{"0": {
    "doc": "F.A.Q",
    "title": "F.A.Q",
    "content": "Frequently Asked Questions . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/FAQ.html#faq",
    "relUrl": "/FAQ.html#faq"
  },"1": {
    "doc": "F.A.Q",
    "title": "Q: I get “Ensure condition failed: InDependenciesCrc.IsValid()” when caching/uncaching PCGEx nodes!",
    "content": "Yes. It’s ok, you can ignore these. PCG isn’t natively architectured to support node that switch between cacheable/not-cacheable, which sometime generates failed checks. It’s annoying but is harmless. The benefits of switching caching mode outweights the assert in my opinion – if that bugs you, don’t touch to the checkbox, it’s generally safer not to ship with cached data anyway. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/FAQ.html#q-i-get-ensure-condition-failed-independenciescrcisvalid-when-cachinguncaching-pcgex-nodes",
    "relUrl": "/FAQ.html#q-i-get-ensure-condition-failed-independenciescrcisvalid-when-cachinguncaching-pcgex-nodes"
  },"2": {
    "doc": "F.A.Q",
    "title": "F.A.Q",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/FAQ.html",
    "relUrl": "/FAQ.html"
  },"3": {
    "doc": "About",
    "title": "I’m Tim!",
    "content": "I made this. Follow @Nebukam . I made PCGEx as a way to bring some my personal Houdini toolkit into Unreal, and figured it could be useful to my fellow artists and designers. I love my current workflow &amp; tools when it comes to procedural generation, and often needed ways to generate data &amp; structures to… well, generate more data and structures to spawn stuff on. Unreal PCG has powerful tools to generate and work with splines, but unless you’re making them by hand, spline are a pain to manipulate and maintain at scale – that’s the main reason why I wanted to have tools to create graphs and pathfind in them. Turns out, it’s useful for plenty of other things :) . Special Thanks . Massive kudo to MikeC, who has been an early adopter, and whose feedback and suggestions tremendously helped make PCGEx a better and more useful tool &lt;3 Also thanks to Sinbad, as I shamelessly pasted some of his C++ formatting and practices for this documentation ^_^ . Source code . PCGEx is licensed under MIT : if you want to look at the code, or if you’re worried it could hurt your machine, the code is available in full on github. It does not rely on nor embbed any third party library/dlls. Bugs! . If you encounter a bug, please fill an issue here. Please provide as much information as you can (stack traces, node setup, …). Improvement &amp; Feature Requests . If you have a feature or improvement requestion, please start a discussion here! . Footnotes &amp; Credits . | I am not affiliated with Unreal! | Photo of Edsger W. Dijkstra from Wikipedia, (c) Hamilton Richards / CC BY-SA 3.0 : source | Photo of Bertran Raphael from Wikipedia, (c) Blogjack / CC BY-SA 3.0 : source | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/about/#im-tim",
    "relUrl": "/about/#im-tim"
  },"4": {
    "doc": "About",
    "title": "About",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/about/",
    "relUrl": "/about/"
  },"5": {
    "doc": "🝐 Write Attributes",
    "title": "🝐 Write Attributes",
    "content": "PCGEx | Action : Write Attributes The **Write Attribute action…** . TBD . ConditionsFilters used as condition to check which match to choose from Match SuccessAttributes that will be written if the conditions pass Match FailAttributes that will be written if the conditions fails ActionA single action definition . Table of content . | Properties | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/batch-actions/action-write-attributes.html#write-attributes",
    "relUrl": "/doc-misc/batch-actions/action-write-attributes.html#write-attributes"
  },"6": {
    "doc": "🝐 Write Attributes",
    "title": "Properties",
    "content": ". DOC TDB . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/batch-actions/action-write-attributes.html#properties",
    "relUrl": "/doc-misc/batch-actions/action-write-attributes.html#properties"
  },"7": {
    "doc": "🝐 Write Attributes",
    "title": "🝐 Write Attributes",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/batch-actions/action-write-attributes.html",
    "relUrl": "/doc-misc/batch-actions/action-write-attributes.html"
  },"8": {
    "doc": "🝐 Write Result",
    "title": "🝐 Write Result",
    "content": "PCGEx | Action : Write Result The **Write Results action…** . TBD . ConditionsFilters whose results will be consolidated and written to an attribute ActionA single action definition . Table of content . | Properties | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/batch-actions/action-write-result.html#write-result",
    "relUrl": "/doc-misc/batch-actions/action-write-result.html#write-result"
  },"9": {
    "doc": "🝐 Write Result",
    "title": "Properties",
    "content": ". DOC TDB . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/batch-actions/action-write-result.html#properties",
    "relUrl": "/doc-misc/batch-actions/action-write-result.html#properties"
  },"10": {
    "doc": "🝐 Write Result",
    "title": "🝐 Write Result",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/batch-actions/action-write-result.html",
    "relUrl": "/doc-misc/batch-actions/action-write-result.html"
  },"11": {
    "doc": "All Nodes",
    "title": "All Nodes",
    "content": "Comprehensive list of all PCGEx nodes . Table of content . | All Nodes . | Clusters | Pathfinding | Paths | Staging | Misc | Sampling | Shape Ecosystem | Filter Ecosystem | . | Filters . | Regular Filters | Edges Filters | Node Filters | . | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#all-nodes",
    "relUrl": "/all-nodes.html#all-nodes"
  },"12": {
    "doc": "All Nodes",
    "title": "All Nodes",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#all-nodes",
    "relUrl": "/all-nodes.html#all-nodes"
  },"13": {
    "doc": "All Nodes",
    "title": "Clusters",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#clusters",
    "relUrl": "/all-nodes.html#clusters"
  },"14": {
    "doc": "All Nodes",
    "title": "Connect Points",
    "content": "Creates connections between points using various probes. · · · · ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#connect-points",
    "relUrl": "/all-nodes.html#connect-points"
  },"15": {
    "doc": "All Nodes",
    "title": "Diagrams",
    "content": "Delaunay 2D / 3D, Voronoi 2D / 3D . · · · · ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#diagrams",
    "relUrl": "/all-nodes.html#diagrams"
  },"16": {
    "doc": "All Nodes",
    "title": "Fuse Clusters",
    "content": "Fuse clusters together by finding Point/Edge and Edge/Edge intersections. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#fuse-clusters",
    "relUrl": "/all-nodes.html#fuse-clusters"
  },"17": {
    "doc": "All Nodes",
    "title": "Refine",
    "content": "One-stop node for pruning edges . · · · · · · · · · · · · · ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#refine",
    "relUrl": "/all-nodes.html#refine"
  },"18": {
    "doc": "All Nodes",
    "title": "Mesh to Clusters",
    "content": "Convert mesh/geometry topology to usable clusters. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#mesh-to-clusters",
    "relUrl": "/all-nodes.html#mesh-to-clusters"
  },"19": {
    "doc": "All Nodes",
    "title": "Properties : Edge",
    "content": "Compute edge extra data from its vertices . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#properties--edge",
    "relUrl": "/all-nodes.html#properties--edge"
  },"20": {
    "doc": "All Nodes",
    "title": "Edge Order",
    "content": "Fix the order of edge start &amp; end points . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#edge-order",
    "relUrl": "/all-nodes.html#edge-order"
  },"21": {
    "doc": "All Nodes",
    "title": "Properties : Vtx",
    "content": "Compute vtx extra data . · · · ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#properties--vtx",
    "relUrl": "/all-nodes.html#properties--vtx"
  },"22": {
    "doc": "All Nodes",
    "title": "Flag Nodes",
    "content": "Find conditional-based states to nodes within a graph . · ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#flag-nodes",
    "relUrl": "/all-nodes.html#flag-nodes"
  },"23": {
    "doc": "All Nodes",
    "title": "Cut Clusters",
    "content": "Cut clusters using paths . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#cut-clusters",
    "relUrl": "/all-nodes.html#cut-clusters"
  },"24": {
    "doc": "All Nodes",
    "title": "Copy Cluster to Points",
    "content": "Creates copies of entire clusters to a set of target points . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#copy-cluster-to-points",
    "relUrl": "/all-nodes.html#copy-cluster-to-points"
  },"25": {
    "doc": "All Nodes",
    "title": "Hulls",
    "content": "Convex hull algorithms . · · ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#hulls",
    "relUrl": "/all-nodes.html#hulls"
  },"26": {
    "doc": "All Nodes",
    "title": "Sanitize Clusters",
    "content": "Ensure clusters are clean and complete . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#sanitize-clusters",
    "relUrl": "/all-nodes.html#sanitize-clusters"
  },"27": {
    "doc": "All Nodes",
    "title": "Pick Closest Cluster",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#pick-closest-cluster",
    "relUrl": "/all-nodes.html#pick-closest-cluster"
  },"28": {
    "doc": "All Nodes",
    "title": "Relax",
    "content": "Relax points positions of a graph. · · ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#relax",
    "relUrl": "/all-nodes.html#relax"
  },"29": {
    "doc": "All Nodes",
    "title": "Find Clusters",
    "content": "Find matching cluster data. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#find-clusters",
    "relUrl": "/all-nodes.html#find-clusters"
  },"30": {
    "doc": "All Nodes",
    "title": "Partition Vertices",
    "content": "Create per-cluster Vtx datasets . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#partition-vertices",
    "relUrl": "/all-nodes.html#partition-vertices"
  },"31": {
    "doc": "All Nodes",
    "title": "Break to Paths",
    "content": "Breaks clusters edge chains into individual paths . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#break-to-paths",
    "relUrl": "/all-nodes.html#break-to-paths"
  },"32": {
    "doc": "All Nodes",
    "title": "Make Unique",
    "content": "Forward clusters with a new unique pair of tags. It’s like creating a copy, only much faster. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#make-unique",
    "relUrl": "/all-nodes.html#make-unique"
  },"33": {
    "doc": "All Nodes",
    "title": "Custom Graph",
    "content": "Build clusters using custom blueprints! . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#custom-graph",
    "relUrl": "/all-nodes.html#custom-graph"
  },"34": {
    "doc": "All Nodes",
    "title": "Connect Clusters",
    "content": "Connects clusters together. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#connect-clusters",
    "relUrl": "/all-nodes.html#connect-clusters"
  },"35": {
    "doc": "All Nodes",
    "title": "Find point on Bounds",
    "content": "Find a point in each cluster that is the closest to a bound-relative position. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#find-point-on-bounds",
    "relUrl": "/all-nodes.html#find-point-on-bounds"
  },"36": {
    "doc": "All Nodes",
    "title": "Cluster Filters",
    "content": "Cluster-specific filters . · · · · · · · ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#cluster-filters",
    "relUrl": "/all-nodes.html#cluster-filters"
  },"37": {
    "doc": "All Nodes",
    "title": "Packing Clusters",
    "content": "Two nodes to conveniently pack/unpack cluster data. · · . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#packing-clusters",
    "relUrl": "/all-nodes.html#packing-clusters"
  },"38": {
    "doc": "All Nodes",
    "title": "Pathfinding",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#pathfinding",
    "relUrl": "/all-nodes.html#pathfinding"
  },"39": {
    "doc": "All Nodes",
    "title": "Edges Pathfinding",
    "content": "Find paths connecting seeds to goals. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#edges-pathfinding",
    "relUrl": "/all-nodes.html#edges-pathfinding"
  },"40": {
    "doc": "All Nodes",
    "title": "Plot Edges Pathfinding",
    "content": "Find a path that goes through multiple chained points. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#plot-edges-pathfinding",
    "relUrl": "/all-nodes.html#plot-edges-pathfinding"
  },"41": {
    "doc": "All Nodes",
    "title": "Find Contours",
    "content": "Find edge contours &amp; outlines . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#find-contours",
    "relUrl": "/all-nodes.html#find-contours"
  },"42": {
    "doc": "All Nodes",
    "title": "Find All Cells",
    "content": "Find all cells within a cluster . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#find-all-cells",
    "relUrl": "/all-nodes.html#find-all-cells"
  },"43": {
    "doc": "All Nodes",
    "title": "Grow Paths",
    "content": "Grows paths from seeds alone. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#grow-paths",
    "relUrl": "/all-nodes.html#grow-paths"
  },"44": {
    "doc": "All Nodes",
    "title": "Paths",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#paths",
    "relUrl": "/all-nodes.html#paths"
  },"45": {
    "doc": "All Nodes",
    "title": "Smooth",
    "content": "Smooth points properties and attributes . · · ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#smooth",
    "relUrl": "/all-nodes.html#smooth"
  },"46": {
    "doc": "All Nodes",
    "title": "Orient",
    "content": "Orient points in relation to their neighbors . · · · ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#orient",
    "relUrl": "/all-nodes.html#orient"
  },"47": {
    "doc": "All Nodes",
    "title": "Blend",
    "content": "Blend individual points between from paths’ start and end points. · · · ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#blend",
    "relUrl": "/all-nodes.html#blend"
  },"48": {
    "doc": "All Nodes",
    "title": "Path Spline Mesh",
    "content": "Create SplineMesh components from paths . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#path-spline-mesh",
    "relUrl": "/all-nodes.html#path-spline-mesh"
  },"49": {
    "doc": "All Nodes",
    "title": "Solidify Path",
    "content": "Solidify paths into “edges” . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#solidify-path",
    "relUrl": "/all-nodes.html#solidify-path"
  },"50": {
    "doc": "All Nodes",
    "title": "Path × Path Crossings",
    "content": "Find crossings within &amp; against other paths. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#path--path-crossings",
    "relUrl": "/all-nodes.html#path--path-crossings"
  },"51": {
    "doc": "All Nodes",
    "title": "Path × Bounds Intersections",
    "content": "Find intersections with points bounds. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#path--bounds-intersections",
    "relUrl": "/all-nodes.html#path--bounds-intersections"
  },"52": {
    "doc": "All Nodes",
    "title": "Attribute Rolling",
    "content": "Does a rolling operation over properties &amp; attributes along a path . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#attribute-rolling",
    "relUrl": "/all-nodes.html#attribute-rolling"
  },"53": {
    "doc": "All Nodes",
    "title": "Fuse Collinear",
    "content": "Fuse collinear points on a path . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#fuse-collinear",
    "relUrl": "/all-nodes.html#fuse-collinear"
  },"54": {
    "doc": "All Nodes",
    "title": "Offset",
    "content": "Offset path along a direction . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#offset",
    "relUrl": "/all-nodes.html#offset"
  },"55": {
    "doc": "All Nodes",
    "title": "Bevel",
    "content": "Bevel path points . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#bevel",
    "relUrl": "/all-nodes.html#bevel"
  },"56": {
    "doc": "All Nodes",
    "title": "Resample",
    "content": "Resample path points. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#resample",
    "relUrl": "/all-nodes.html#resample"
  },"57": {
    "doc": "All Nodes",
    "title": "Shift",
    "content": "Shift path point order inside the dataset. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#shift",
    "relUrl": "/all-nodes.html#shift"
  },"58": {
    "doc": "All Nodes",
    "title": "Path Spline Mesh (Simple)",
    "content": "Create SplineMesh components from paths . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#path-spline-mesh-simple",
    "relUrl": "/all-nodes.html#path-spline-mesh-simple"
  },"59": {
    "doc": "All Nodes",
    "title": "Spline to Path",
    "content": "Converts a spline into a path. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#spline-to-path",
    "relUrl": "/all-nodes.html#spline-to-path"
  },"60": {
    "doc": "All Nodes",
    "title": "Subdivide",
    "content": "Create sub-points between existing points . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#subdivide",
    "relUrl": "/all-nodes.html#subdivide"
  },"61": {
    "doc": "All Nodes",
    "title": "Create Spline",
    "content": "A Create Spline node with per-point controls &amp; tagging abilities. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#create-spline",
    "relUrl": "/all-nodes.html#create-spline"
  },"62": {
    "doc": "All Nodes",
    "title": "Write Paths Properties",
    "content": "Compute extra path informations . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#write-paths-properties",
    "relUrl": "/all-nodes.html#write-paths-properties"
  },"63": {
    "doc": "All Nodes",
    "title": "Write Tangents",
    "content": "TBD . · · · · · ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#write-tangents",
    "relUrl": "/all-nodes.html#write-tangents"
  },"64": {
    "doc": "All Nodes",
    "title": "Paths to Clusters",
    "content": "Convert paths to clusters. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#paths-to-clusters",
    "relUrl": "/all-nodes.html#paths-to-clusters"
  },"65": {
    "doc": "All Nodes",
    "title": "Staging",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#staging",
    "relUrl": "/all-nodes.html#staging"
  },"66": {
    "doc": "All Nodes",
    "title": "Asset Staging",
    "content": "Prepare points before spawning. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#asset-staging",
    "relUrl": "/all-nodes.html#asset-staging"
  },"67": {
    "doc": "All Nodes",
    "title": "Asset Collection to Set",
    "content": "Converts an asset collection to an attribute set. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#asset-collection-to-set",
    "relUrl": "/all-nodes.html#asset-collection-to-set"
  },"68": {
    "doc": "All Nodes",
    "title": "Misc",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#misc",
    "relUrl": "/all-nodes.html#misc"
  },"69": {
    "doc": "All Nodes",
    "title": "Sort Points",
    "content": "Sort points using any number of properties and attributes . · ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#sort-points",
    "relUrl": "/all-nodes.html#sort-points"
  },"70": {
    "doc": "All Nodes",
    "title": "Partition by Values",
    "content": "Create complex partitions from multiple criteria . · ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#partition-by-values",
    "relUrl": "/all-nodes.html#partition-by-values"
  },"71": {
    "doc": "All Nodes",
    "title": "Fuse Points",
    "content": "Proximity-based point pruning and blending. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#fuse-points",
    "relUrl": "/all-nodes.html#fuse-points"
  },"72": {
    "doc": "All Nodes",
    "title": "Attribute Stats",
    "content": "Compute attribute statistics &amp; unique values . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#attribute-stats",
    "relUrl": "/all-nodes.html#attribute-stats"
  },"73": {
    "doc": "All Nodes",
    "title": "Attribute To Tags",
    "content": "Transfer attribute values to collection tags . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#attribute-to-tags",
    "relUrl": "/all-nodes.html#attribute-to-tags"
  },"74": {
    "doc": "All Nodes",
    "title": "Points to Bounds",
    "content": "Convert point clouds to a single bounding point . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#points-to-bounds",
    "relUrl": "/all-nodes.html#points-to-bounds"
  },"75": {
    "doc": "All Nodes",
    "title": "Find point on Bounds (Any)",
    "content": "Find a point closest to a bound-relative position. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#find-point-on-bounds-any",
    "relUrl": "/all-nodes.html#find-point-on-bounds-any"
  },"76": {
    "doc": "All Nodes",
    "title": "Reverse Points Order",
    "content": "Reverse current points order. Way faster than reverse index sort. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#reverse-points-order",
    "relUrl": "/all-nodes.html#reverse-points-order"
  },"77": {
    "doc": "All Nodes",
    "title": "Cherry Pick Points",
    "content": "Cherry pick points using their indices. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#cherry-pick-points",
    "relUrl": "/all-nodes.html#cherry-pick-points"
  },"78": {
    "doc": "All Nodes",
    "title": "Batch Actions",
    "content": "A node that batche-process individual actions . · · ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#batch-actions",
    "relUrl": "/all-nodes.html#batch-actions"
  },"79": {
    "doc": "All Nodes",
    "title": "Collocation Count",
    "content": "Cherry pick points using their indices. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#collocation-count",
    "relUrl": "/all-nodes.html#collocation-count"
  },"80": {
    "doc": "All Nodes",
    "title": "Destroy Actor",
    "content": "Destroys target actors created by the same PCG Component . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#destroy-actor",
    "relUrl": "/all-nodes.html#destroy-actor"
  },"81": {
    "doc": "All Nodes",
    "title": "GUID",
    "content": "Get/Set GUID in a wide range of formats . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#guid",
    "relUrl": "/all-nodes.html#guid"
  },"82": {
    "doc": "All Nodes",
    "title": "Iterations",
    "content": "Artificially drive loop subgraph iteration count . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#iterations",
    "relUrl": "/all-nodes.html#iterations"
  },"83": {
    "doc": "All Nodes",
    "title": "Merge Points by Tags",
    "content": "Merge points based on shared tags . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#merge-points-by-tags",
    "relUrl": "/all-nodes.html#merge-points-by-tags"
  },"84": {
    "doc": "All Nodes",
    "title": "Meta Cleanup",
    "content": "Keep/Remove tags &amp; attributes using string queries . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#meta-cleanup",
    "relUrl": "/all-nodes.html#meta-cleanup"
  },"85": {
    "doc": "All Nodes",
    "title": "Meta Filter",
    "content": "Filter point collections based on tags &amp; attributes using string queries . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#meta-filter",
    "relUrl": "/all-nodes.html#meta-filter"
  },"86": {
    "doc": "All Nodes",
    "title": "Write Index",
    "content": "Write current point index to an attribute . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#write-index",
    "relUrl": "/all-nodes.html#write-index"
  },"87": {
    "doc": "All Nodes",
    "title": "Refresh Seed",
    "content": "Refreshes point seeds based on their position. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#refresh-seed",
    "relUrl": "/all-nodes.html#refresh-seed"
  },"88": {
    "doc": "All Nodes",
    "title": "Discard by Points Count",
    "content": "Filter point dataset by their point count. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#discard-by-points-count",
    "relUrl": "/all-nodes.html#discard-by-points-count"
  },"89": {
    "doc": "All Nodes",
    "title": "Discard by Overlap",
    "content": "Kindda like self-pruning but for collections. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#discard-by-overlap",
    "relUrl": "/all-nodes.html#discard-by-overlap"
  },"90": {
    "doc": "All Nodes",
    "title": "Sampling",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#sampling",
    "relUrl": "/all-nodes.html#sampling"
  },"91": {
    "doc": "All Nodes",
    "title": "Sample Nearest Surface",
    "content": "Sample information from the nearest mesh collision . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#sample-nearest-surface",
    "relUrl": "/all-nodes.html#sample-nearest-surface"
  },"92": {
    "doc": "All Nodes",
    "title": "Sample Line Trace",
    "content": "Sample environment using line casting . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#sample-line-trace",
    "relUrl": "/all-nodes.html#sample-line-trace"
  },"93": {
    "doc": "All Nodes",
    "title": "Wait for PCG Data",
    "content": "Wait for PCG Components data to be available and grabs it. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#wait-for-pcg-data",
    "relUrl": "/all-nodes.html#wait-for-pcg-data"
  },"94": {
    "doc": "All Nodes",
    "title": "Sample Nearest Spline",
    "content": "Sample informations from the nearest spline . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#sample-nearest-spline",
    "relUrl": "/all-nodes.html#sample-nearest-spline"
  },"95": {
    "doc": "All Nodes",
    "title": "Sample Nearest Points",
    "content": "Sample points within a spherical range . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#sample-nearest-points",
    "relUrl": "/all-nodes.html#sample-nearest-points"
  },"96": {
    "doc": "All Nodes",
    "title": "Sample Nearest Bounds",
    "content": "Sample within bounds . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#sample-nearest-bounds",
    "relUrl": "/all-nodes.html#sample-nearest-bounds"
  },"97": {
    "doc": "All Nodes",
    "title": "Sample Overlap Stats",
    "content": "Compute overlap statistics between point collections . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#sample-overlap-stats",
    "relUrl": "/all-nodes.html#sample-overlap-stats"
  },"98": {
    "doc": "All Nodes",
    "title": "Textures",
    "content": "Nodes that work with textures . · · · ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#textures",
    "relUrl": "/all-nodes.html#textures"
  },"99": {
    "doc": "All Nodes",
    "title": "Sample Neighbors",
    "content": "Sample points based on edge connections . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#sample-neighbors",
    "relUrl": "/all-nodes.html#sample-neighbors"
  },"100": {
    "doc": "All Nodes",
    "title": "Pack Actor Data",
    "content": "Conveniently process actors and output data using custom blueprints . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#pack-actor-data",
    "relUrl": "/all-nodes.html#pack-actor-data"
  },"101": {
    "doc": "All Nodes",
    "title": "Sample Inside Bounds",
    "content": "Sample target points contained within bounds. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#sample-inside-bounds",
    "relUrl": "/all-nodes.html#sample-inside-bounds"
  },"102": {
    "doc": "All Nodes",
    "title": "Shape Ecosystem",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#shape-ecosystem",
    "relUrl": "/all-nodes.html#shape-ecosystem"
  },"103": {
    "doc": "All Nodes",
    "title": "Create Shapes",
    "content": "Create parametric shapes out of seed points . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#create-shapes",
    "relUrl": "/all-nodes.html#create-shapes"
  },"104": {
    "doc": "All Nodes",
    "title": "🜛 Circle",
    "content": "Circle, Arc, and more . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#circle",
    "relUrl": "/all-nodes.html#circle"
  },"105": {
    "doc": "All Nodes",
    "title": "Filter Ecosystem",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#filter-ecosystem",
    "relUrl": "/all-nodes.html#filter-ecosystem"
  },"106": {
    "doc": "All Nodes",
    "title": "Uber Filter",
    "content": "Combine multiple filters . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#uber-filter",
    "relUrl": "/all-nodes.html#uber-filter"
  },"107": {
    "doc": "All Nodes",
    "title": "Uber Filter (Collection)",
    "content": "Combine multiple filters . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#uber-filter-collection",
    "relUrl": "/all-nodes.html#uber-filter-collection"
  },"108": {
    "doc": "All Nodes",
    "title": "Filters",
    "content": "There are here to enable ctrl+f users. You can find all about them in the Filter Ecosystem section. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#filters",
    "relUrl": "/all-nodes.html#filters"
  },"109": {
    "doc": "All Nodes",
    "title": "Regular Filters",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#regular-filters",
    "relUrl": "/all-nodes.html#regular-filters"
  },"110": {
    "doc": "All Nodes",
    "title": "🝖 AND / OR (Group)",
    "content": "Group multiple filters to set up complex AND/OR branches. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#and--or-group",
    "relUrl": "/all-nodes.html#and--or-group"
  },"111": {
    "doc": "All Nodes",
    "title": "🝖 Adjacency (Node)",
    "content": "Check if adjacent node meet specific conditions . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#adjacency-node",
    "relUrl": "/all-nodes.html#adjacency-node"
  },"112": {
    "doc": "All Nodes",
    "title": "🝖 Compare Nearest (Numeric)",
    "content": "The Numeric Comparison Filter compares the arithmetic value of an attribute against the closest point from another dataset. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#compare-nearest-numeric",
    "relUrl": "/all-nodes.html#compare-nearest-numeric"
  },"113": {
    "doc": "All Nodes",
    "title": "🝖 Compare (Numeric)",
    "content": "The Numeric Comparison Filter compares the arithmetic value of two attributes . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#compare-numeric",
    "relUrl": "/all-nodes.html#compare-numeric"
  },"114": {
    "doc": "All Nodes",
    "title": "🝖 Edge Direction (Node)",
    "content": "Check if adjacent node meet specific conditions . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#edge-direction-node",
    "relUrl": "/all-nodes.html#edge-direction-node"
  },"115": {
    "doc": "All Nodes",
    "title": "🝖 Compare (String)",
    "content": "Compares two string-like attributes against each other. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#compare-string",
    "relUrl": "/all-nodes.html#compare-string"
  },"116": {
    "doc": "All Nodes",
    "title": "🝖 Neighbors Count (Node)",
    "content": "Check a node’ neighbors count . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#neighbors-count-node",
    "relUrl": "/all-nodes.html#neighbors-count-node"
  },"117": {
    "doc": "All Nodes",
    "title": "🝖 Bool",
    "content": "Performs a simple boolean comparison, converting numeric values to true (&gt; 0) or false (&lt;= 0). ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#bool",
    "relUrl": "/all-nodes.html#bool"
  },"118": {
    "doc": "All Nodes",
    "title": "🝖 Within Range",
    "content": "Checks if an attribute value falls within a specified range. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#within-range",
    "relUrl": "/all-nodes.html#within-range"
  },"119": {
    "doc": "All Nodes",
    "title": "🝖 Dot Product",
    "content": "Compares the dot product of two direction vectors against a third value. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#dot-product",
    "relUrl": "/all-nodes.html#dot-product"
  },"120": {
    "doc": "All Nodes",
    "title": "🝖 Modulo Comparison",
    "content": "Compares the modulo of two attributes against a third operand, with configurable comparisons and tolerance. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#modulo-comparison",
    "relUrl": "/all-nodes.html#modulo-comparison"
  },"121": {
    "doc": "All Nodes",
    "title": "🝖 Edge Direction (Edge)",
    "content": "Check if the edge direction is within a given range. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#edge-direction-edge",
    "relUrl": "/all-nodes.html#edge-direction-edge"
  },"122": {
    "doc": "All Nodes",
    "title": "🝖 Endpoints Compare (Numeric)",
    "content": "Compare the value of an attribute on each of the edge endpoint. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#endpoints-compare-numeric",
    "relUrl": "/all-nodes.html#endpoints-compare-numeric"
  },"123": {
    "doc": "All Nodes",
    "title": "🝖 Bounds",
    "content": "Checks if a point is inside or outside the provided bounds, with options for bounds types and an epsilon adjustment. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#bounds",
    "relUrl": "/all-nodes.html#bounds"
  },"124": {
    "doc": "All Nodes",
    "title": "🝖 Distance",
    "content": "Compare distance to closest target against a constant or attribute. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#distance",
    "relUrl": "/all-nodes.html#distance"
  },"125": {
    "doc": "All Nodes",
    "title": "🝖 Endpoints Compare (String)",
    "content": "Compare the value of an attribute on each of the edge endpoint. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#endpoints-compare-string",
    "relUrl": "/all-nodes.html#endpoints-compare-string"
  },"126": {
    "doc": "All Nodes",
    "title": "🝖 Bitmask",
    "content": "Checks specific flags in an int64 bitmask attribute with configurable mask types, comparisons, and an option to invert results. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#bitmask",
    "relUrl": "/all-nodes.html#bitmask"
  },"127": {
    "doc": "All Nodes",
    "title": "🝖 Neighbors Count (Edge)",
    "content": "Check a node’ neighbors count . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#neighbors-count-edge",
    "relUrl": "/all-nodes.html#neighbors-count-edge"
  },"128": {
    "doc": "All Nodes",
    "title": "🝖 Random",
    "content": "Random filter. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#random",
    "relUrl": "/all-nodes.html#random"
  },"129": {
    "doc": "All Nodes",
    "title": "🝖 Mean Value",
    "content": "The Mean Value Filter compares per-point values of an attribute against the mean statistical value of that same attribute. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#mean-value",
    "relUrl": "/all-nodes.html#mean-value"
  },"130": {
    "doc": "All Nodes",
    "title": "🝖 Self Compare (Numeric)",
    "content": "Compares the numeric value at one index against the same attribute at another index. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#self-compare-numeric",
    "relUrl": "/all-nodes.html#self-compare-numeric"
  },"131": {
    "doc": "All Nodes",
    "title": "🝖 Self Compare (String)",
    "content": "Compares the string value at one index against the same attribute at another index. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#self-compare-string",
    "relUrl": "/all-nodes.html#self-compare-string"
  },"132": {
    "doc": "All Nodes",
    "title": "🝖 Spline Inclusion",
    "content": "Checks against how a point is included in a spline. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#spline-inclusion",
    "relUrl": "/all-nodes.html#spline-inclusion"
  },"133": {
    "doc": "All Nodes",
    "title": "🝖 Path Inclusion",
    "content": "Checks against how a point is included in a path. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#path-inclusion",
    "relUrl": "/all-nodes.html#path-inclusion"
  },"134": {
    "doc": "All Nodes",
    "title": "Edges Filters",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#edges-filters",
    "relUrl": "/all-nodes.html#edges-filters"
  },"135": {
    "doc": "All Nodes",
    "title": "🝖 Edge Direction (Edge)",
    "content": "Check if the edge direction is within a given range. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#edge-direction-edge-1",
    "relUrl": "/all-nodes.html#edge-direction-edge-1"
  },"136": {
    "doc": "All Nodes",
    "title": "🝖 Endpoints Compare (Numeric)",
    "content": "Compare the value of an attribute on each of the edge endpoint. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#endpoints-compare-numeric-1",
    "relUrl": "/all-nodes.html#endpoints-compare-numeric-1"
  },"137": {
    "doc": "All Nodes",
    "title": "🝖 Endpoints Compare (String)",
    "content": "Compare the value of an attribute on each of the edge endpoint. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#endpoints-compare-string-1",
    "relUrl": "/all-nodes.html#endpoints-compare-string-1"
  },"138": {
    "doc": "All Nodes",
    "title": "🝖 Neighbors Count (Edge)",
    "content": "Check a node’ neighbors count . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#neighbors-count-edge-1",
    "relUrl": "/all-nodes.html#neighbors-count-edge-1"
  },"139": {
    "doc": "All Nodes",
    "title": "Node Filters",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#node-filters",
    "relUrl": "/all-nodes.html#node-filters"
  },"140": {
    "doc": "All Nodes",
    "title": "🝖 Adjacency (Node)",
    "content": "Check if adjacent node meet specific conditions . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#adjacency-node-1",
    "relUrl": "/all-nodes.html#adjacency-node-1"
  },"141": {
    "doc": "All Nodes",
    "title": "🝖 Edge Direction (Node)",
    "content": "Check if adjacent node meet specific conditions . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#edge-direction-node-1",
    "relUrl": "/all-nodes.html#edge-direction-node-1"
  },"142": {
    "doc": "All Nodes",
    "title": "🝖 Neighbors Count (Node)",
    "content": "Check a node’ neighbors count . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html#neighbors-count-node-1",
    "relUrl": "/all-nodes.html#neighbors-count-node-1"
  },"143": {
    "doc": "All Nodes",
    "title": "All Nodes",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/all-nodes.html",
    "relUrl": "/all-nodes.html"
  },"144": {
    "doc": "🝱 Actor Collection",
    "title": "🝱 Actor Collection",
    "content": "Actor Collection DataAsset . The Actor Collection DataAsset is a list of Actors, that comes with all the Asset Collection goodies. Related . | Asset Collection | . Table of content . | Properties | Individual Entry | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-assets/asset-collections/asset-collection-actors.html#actor-collection",
    "relUrl": "/doc-assets/asset-collections/asset-collection-actors.html#actor-collection"
  },"145": {
    "doc": "🝱 Actor Collection",
    "title": "Properties",
    "content": ". | Property | Description | . | Collection Tags | A set of unique tags associated with this collection data asset. | . | Entries | Entries are a list of actors (soft) references and their associated shared properties.*You really just need to set the Actor property for it to work.* | . | Do Not Ignore Invalid Entries | Forces distribution of this to NOT skip over invalid entries.This can be useful to create ‘weighted’ spaces, and can be overriden on a per-node basis. | . | : **Advanced** :| |   | . | Auto Rebuild Staging | Enabled by default.When enabled, any user-made modification to the asset collection will trigger a rebuilding of the staging data *(saves you a click, in case your forget about it.)* | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-assets/asset-collections/asset-collection-actors.html#properties",
    "relUrl": "/doc-assets/asset-collections/asset-collection-actors.html#properties"
  },"146": {
    "doc": "🝱 Actor Collection",
    "title": "Individual Entry",
    "content": ". | Property | Description | . | :**Settings** :| |   | . | Actor | The actor associated with this entry. | . Common properties . Common properties are properties shared amonst all asset collection’ entries . | Property | Description | . | : Sub Collection : |   | . | Sub Collection | If Is Sub Collection is enabled, lets you pick an Asset Collection that will work like a list of alternative choices for this entry. | . | Is Sub Collection | Whether this entry is a sub-collection or not.Enabling this option will reveal the Asset Collection picker. | . | : Settings : |   | . | Weight | The weight of this entry, relative to the others in the list.Higher weights means higher chance of being picked, if the context is using weighted random selection. | . | Category | A category associated with this entry. Think of it as a unique tag. | . | Tags | A list of unique tags that can be forwarded to components using this entry.Note that not all nodes can handle tags. | . An entry Weight is not only used for Weighted Random selection, but is also used to sort entries in certain cases; among which Indexed Weight (Ascending/Descending) distribution mode of the Asset Staging node. Variations . Optionally, you may enter a few random ranges for staging nodes to use, should you want to. This can come in handy if you want to have high-level, per-asset variations. | : Positions : | Additive | . | Offset Min | Minimum offset range. | . | Offset Max | Maximum offset range. | . | Absolute offset | Whether the offset should be applied in world space, or “local” to the point’ transform. | . | : Rotation : | Additive | . | Rotation Min | Minimum rotation offset range. | . | Rotation Max | Maximum rotation offset range. | . | : Scale : | Multiplicative | . | Scale Min | Minimum scale multiplier range. | . | Scale Max | Maximum scale multiplier range. | . | Uniform Scale | Whether the random scale multiplier should be applied per-component or uniformly (in which case it uses X for all components). | . Note that variations are never applied by default by any nodes, and are considered an advanced tweak. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-assets/asset-collections/asset-collection-actors.html#individual-entry",
    "relUrl": "/doc-assets/asset-collections/asset-collection-actors.html#individual-entry"
  },"147": {
    "doc": "🝱 Actor Collection",
    "title": "🝱 Actor Collection",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-assets/asset-collections/asset-collection-actors.html",
    "relUrl": "/doc-assets/asset-collections/asset-collection-actors.html"
  },"148": {
    "doc": "🝱 Mesh Collection",
    "title": "🝱 Mesh Collection",
    "content": "Mesh Collection DataAsset . The Mesh Collection DataAsset is a list of Meshes with ISM/HISM Descriptors, that comes with all the Asset Collection goodies. Related . | Asset Collection | . Table of content . | Properties | Individual Entry | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-assets/asset-collections/asset-collection-meshes.html#mesh-collection",
    "relUrl": "/doc-assets/asset-collections/asset-collection-meshes.html#mesh-collection"
  },"149": {
    "doc": "🝱 Mesh Collection",
    "title": "Properties",
    "content": ". | Property | Description | . | :**Settings** :| |   | . | Collection Tags | A set of unique tags associated with this collection data asset. | . | Entries | Entries are a list of meshes (soft) references descriptor and their associated shared properties.*You really just need to set the Descriptor’ StaticMesh property for it to work.* | . | Do Not Ignore Invalid Entries | Forces distribution of this collection to NOT skip over invalid entries.This can be useful to create ‘weighted’ spaces, and can be overriden on a per-node basis. | . | : **Advanced** :| |   | . | Auto Rebuild Staging | Enabled by default.When enabled, any user-made modification to the asset collection will trigger a rebuilding of the staging data *(saves you a click, in case your forget about it.)* | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-assets/asset-collections/asset-collection-meshes.html#properties",
    "relUrl": "/doc-assets/asset-collections/asset-collection-meshes.html#properties"
  },"150": {
    "doc": "🝱 Mesh Collection",
    "title": "Individual Entry",
    "content": ". | Property | Description | . | :**Settings** :| |   | . | Static Mesh | The static mesh associated with this entry. | . | ISM Descriptor | Descriptor used for this static mesh when used with a Instanced Static Mesh component.*Note that there is no need to re-set the Static Mesh, it will use the one set at the top-level of the entry itself.* | . | SM Descriptor | Descriptor used for this static mesh when used with a regular Static Mesh component, such as Spline Mesh. | . | Sub Collection | If this entry is marked as a sub-collection, this let you specify which collection this entry will get its data from. | . Common properties . Common properties are properties shared amonst all asset collection’ entries . | Property | Description | . | : Sub Collection : |   | . | Sub Collection | If Is Sub Collection is enabled, lets you pick an Asset Collection that will work like a list of alternative choices for this entry. | . | Is Sub Collection | Whether this entry is a sub-collection or not.Enabling this option will reveal the Asset Collection picker. | . | : Settings : |   | . | Weight | The weight of this entry, relative to the others in the list.Higher weights means higher chance of being picked, if the context is using weighted random selection. | . | Category | A category associated with this entry. Think of it as a unique tag. | . | Tags | A list of unique tags that can be forwarded to components using this entry.Note that not all nodes can handle tags. | . An entry Weight is not only used for Weighted Random selection, but is also used to sort entries in certain cases; among which Indexed Weight (Ascending/Descending) distribution mode of the Asset Staging node. Variations . Optionally, you may enter a few random ranges for staging nodes to use, should you want to. This can come in handy if you want to have high-level, per-asset variations. | : Positions : | Additive | . | Offset Min | Minimum offset range. | . | Offset Max | Maximum offset range. | . | Absolute offset | Whether the offset should be applied in world space, or “local” to the point’ transform. | . | : Rotation : | Additive | . | Rotation Min | Minimum rotation offset range. | . | Rotation Max | Maximum rotation offset range. | . | : Scale : | Multiplicative | . | Scale Min | Minimum scale multiplier range. | . | Scale Max | Maximum scale multiplier range. | . | Uniform Scale | Whether the random scale multiplier should be applied per-component or uniformly (in which case it uses X for all components). | . Note that variations are never applied by default by any nodes, and are considered an advanced tweak. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-assets/asset-collections/asset-collection-meshes.html#individual-entry",
    "relUrl": "/doc-assets/asset-collections/asset-collection-meshes.html#individual-entry"
  },"151": {
    "doc": "🝱 Mesh Collection",
    "title": "🝱 Mesh Collection",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-assets/asset-collections/asset-collection-meshes.html",
    "relUrl": "/doc-assets/asset-collections/asset-collection-meshes.html"
  },"152": {
    "doc": "Asset Collection to Set",
    "title": "Asset Collection to Set",
    "content": "PCGEx | Asset Collection to Set Converts an asset collection to an attribute set. The Asset Collection to Set offers a variety of options &amp; settings to turn an Asset Collection to a more common Attribute Set. Attribute SetAttribute set from asset collection . Related . | Asset Collection | . Table of content . | Properties . | Sub Collection Handling | Outputs | . | . The Asset Collection to Set exists in order to support Attribute-set based workflows and still be able to rely and re-use Asset Collections in meaningful ways. It’s a very straightfoward node that takes an Asset Collection as input and outputs an attribute set from that. Since an Asset Collection support the concept of nested collections, it can also be leveraged as an interesting way to generate random pre-selections of assets! . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-assets/assets-collection-to-set.html#asset-collection-to-set",
    "relUrl": "/doc-assets/assets-collection-to-set.html#asset-collection-to-set"
  },"153": {
    "doc": "Asset Collection to Set",
    "title": "Properties",
    "content": "| Property | Description | . | Asset Collection | The Asset Collection to build an attribute set from. | . | Sub Collection Handling | Defines how sub-collection entries are handled during the generation process *(more below)* | . | Allow Duplicates | Whether or not to allow duplicate entries inside the output attribute set.*(Same object path is considered a duplicate)* | . | Omit Invalid and Empty | Whether or not to strip out invalid or empty entries from the output attribute set.*(invalid or empty entries are null or invalid object paths)* | . Sub Collection Handling . | : Handling | |   | . | &lt;span class=\"ebit\"&gt;Ignore&lt;/span&gt; | Skips entry. | . | &lt;span class=\"ebit\"&gt;Expand&lt;/span&gt; | Recursively add sub-collection entries. | . | &lt;span class=\"ebit\"&gt;Random&lt;/span&gt; | Picks a random entry from the sub-collection, recursive until it’s a non-collection entry. | . | &lt;span class=\"ebit\"&gt;Random Weighted&lt;/span&gt; | Picks a random weighted entry from the sub-collection, recursive until it’s a non-collection entry. | . | &lt;span class=\"ebit\"&gt;First Item&lt;/span&gt; | Picks the first entry from the sub-collection, recursive until it’s a non-collection entry. | . | &lt;span class=\"ebit\"&gt;Last Item&lt;/span&gt; | Picks the first entry from the sub-collection, recursive until it’s a non-collection entry. | . Outputs . You can choose which property from the Asset Collection to build the attribute set from. | : Output properties | |   | . | Asset Path | *FSoftbjectPath* | . | Weight | *int32* | . | Category | *FName* | . | Extents | *FVector* | . | BoundsMin | *FVector* | . | BoundsMax | *FVector* | . | Nesting Depth | *int32* | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-assets/assets-collection-to-set.html#properties",
    "relUrl": "/doc-assets/assets-collection-to-set.html#properties"
  },"154": {
    "doc": "Asset Collection to Set",
    "title": "Asset Collection to Set",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-assets/assets-collection-to-set.html",
    "relUrl": "/doc-assets/assets-collection-to-set.html"
  },"155": {
    "doc": "Asset Staging",
    "title": "Asset Staging",
    "content": "PCGEx | Asset Staging Prepare points before spawning. The Asset Staging node lets your prepare points for spawning assets. InPoints to be prepared Attribute SetOptional attribute set to be used as a collection, if the node is set-up that way. OutModified points, with added attributes . Related . | Asset Collection | . Table of content . | Properties . | Scale to Fit &amp; Justification | Variations | Distribution Settings . | Distribution | Index Settings | Index Safety | . | Additional Outputs . | Tagging/Flagging Points | . | . | Modules . | Available Asset Collections modules | . | . The Asset Staging exists for many reasons, but primarily to “pre-spawn” assets from an Asset Collection, and modify points according to various rules, in relation to their associated asset. This is especially useful if you want to have pruning control on overlaps, or require very tight placement rules no matter how the assets have been authored (pivot point location etc) . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-assets/assets-staging.html#asset-staging",
    "relUrl": "/doc-assets/assets-staging.html#asset-staging"
  },"156": {
    "doc": "Asset Staging",
    "title": "Properties",
    "content": "| Property | Description | . | Source | Which type of source to use for the asset collection.Can be either Asset for an Asset Collection picker, or Attribute Set, which will reveal a new input pin that accepts an attribute set. | . | Asset Collection | If Asset is selected as a source, this is the Asset Collection that will be used for staging points.*See [Available Asset Collections](#available-asset-collections).* | . When using the Attribute Set source, the node will create a temp, internal Asset Collection from the source attribute set. | : **Attribute Set Details** :| |   | . | Asset Path Source Attribute | The name of the attribute within the Attribute Set that contains the entry’ **Asset Path**.*FSoftObjectPath is preferred, but FString and FName are supported.* | . | Weight Source Attribute | The name of the attribute within the Attribute Set that contains the entry’ **Weight**.*int32 is preferred, but float, double and int64 are supported.* | . | Category Source Attribute | The name of the attribute within the Attribute Set that contains the entry’ **Category**.*FName is preferred, but FString is supported.* | . While it’s a needed option, keep in mind that using an attribute set prevents access to any asset cached data. As such, all assets from the Attribute Set will be first loaded (asynchronously) in memory in order to compute their bounds; before the node execution can properly start. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-assets/assets-staging.html#properties",
    "relUrl": "/doc-assets/assets-staging.html#properties"
  },"157": {
    "doc": "Asset Staging",
    "title": "Scale to Fit &amp; Justification",
    "content": "See Fitting Details. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-assets/assets-staging.html#scale-to-fit--justification",
    "relUrl": "/doc-assets/assets-staging.html#scale-to-fit--justification"
  },"158": {
    "doc": "Asset Staging",
    "title": "Variations",
    "content": "When to apply the asset’ variations, if any, as defined in the Source. At the time of writing, this is not supported for Attribute Set source. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-assets/assets-staging.html#variations",
    "relUrl": "/doc-assets/assets-staging.html#variations"
  },"159": {
    "doc": "Asset Staging",
    "title": "Distribution Settings",
    "content": "Distribution drives how assets are selected within the collection &amp; assigned to points. | : Seed components | *Seed components lets you choose which seed source you want to combined to drive randomness.* | . | &lt;span class=\"ebit\"&gt;None&lt;/span&gt; | Will only use the point’ seed. | . | &lt;span class=\"ebit\"&gt;Local&lt;/span&gt; | The local user-set seed *see property below* | . | &lt;span class=\"ebit\"&gt;Settings&lt;/span&gt; | This node’ Settings seed. | . | &lt;span class=\"ebit\"&gt;Component&lt;/span&gt; | The parent PCG component’ seed. | . Distribution . | : Distribution | |   | . | &lt;span class=\"ebit\"&gt;Index&lt;/span&gt; | Index-based selection within the collection.*Enable a lot of additional options.* | . | &lt;span class=\"ebit\"&gt;Random&lt;/span&gt; | Plain old random selection. | . | &lt;span class=\"ebit\"&gt;Weighted Random&lt;/span&gt; | Weighted random selection, using entries’ Weight property. | . Index Settings . Index settings offer granular controls over what the Index actually is, and how it is used. | Index Setting | Description | . | Pick Mode | Choose in which ordered context the input index should be used. | . | Index Safety | Defines how the index value should be sanitized/post-processed. | . | Index Source | The source of the index value. | . | Remap Index to Collection Size | If enabled, the input index is first remapped to the size of the collection.**This enable the use of basically any input value and distribute the entierety of the collection over its range.***Note that this can have a noticeable performance impact since all input indices must be loaded in memory first to find the min/max range.* | . | Truncate Remap | Lets you choose how the remapped value (floating point) should be truncated to an integer. | . Index Safety . The index safety property controls how invalid/out of bounds input values are handled. | Safety method |   | . | Ignore | Invalid indices will be ignored and won’t be processed further. | . | Tile | Index is tiled (wrapped around) the context’ valid min/max range. | . | Clamp | Index is clamped between the context’ valid min/max range. | . | Yoyo | Index bounces back and forth between the context’ valid min/max range. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-assets/assets-staging.html#distribution-settings",
    "relUrl": "/doc-assets/assets-staging.html#distribution-settings"
  },"160": {
    "doc": "Asset Staging",
    "title": "Additional Outputs",
    "content": "Lets you output the Weight of the selection to each node, using different post-processing methods. This can be very handy to identify “rare” spawns and preserve them during self-pruning operations. Tagging/Flagging Points . | Property | Description | . | Grab Tags | Pick which tags from the asset collection should be grabbed and added to the component.See Entries &amp; Collections Tags. | . | Forward Input Data Tags | If enabled, tags associated with the currently processed dataset will be forwarded to the components. | . | More TBD |   | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-assets/assets-staging.html#additional-outputs",
    "relUrl": "/doc-assets/assets-staging.html#additional-outputs"
  },"161": {
    "doc": "Asset Staging",
    "title": "Modules",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-assets/assets-staging.html#modules",
    "relUrl": "/doc-assets/assets-staging.html#modules"
  },"162": {
    "doc": "Asset Staging",
    "title": "Available Asset Collections modules",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-assets/assets-staging.html#available-asset-collections-modules",
    "relUrl": "/doc-assets/assets-staging.html#available-asset-collections-modules"
  },"163": {
    "doc": "Asset Staging",
    "title": "🝱 Mesh Collection",
    "content": "Mesh Collection DataAsset . The Mesh Collection DataAsset is a list of Meshes with ISM/HISM Descriptors, that comes with all the Asset Collection goodies. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-assets/assets-staging.html#mesh-collection",
    "relUrl": "/doc-assets/assets-staging.html#mesh-collection"
  },"164": {
    "doc": "Asset Staging",
    "title": "🝱 Actor Collection",
    "content": "Actor Collection DataAsset . The Actor Collection DataAsset is a list of Actors, that comes with all the Asset Collection goodies. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-assets/assets-staging.html#actor-collection",
    "relUrl": "/doc-assets/assets-staging.html#actor-collection"
  },"165": {
    "doc": "Asset Staging",
    "title": "Asset Staging",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-assets/assets-staging.html",
    "relUrl": "/doc-assets/assets-staging.html"
  },"166": {
    "doc": "⋰ Inherit Last",
    "title": "⋰ Inherit Last",
    "content": "Copy the last point’ values . Processed subpoints will inherit from the last properties &amp; attributes. Nothing fancy about it. Table of content . | Properties | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-blend/blending-inherit-end.html#inherit-last",
    "relUrl": "/doc-paths/paths-blend/blending-inherit-end.html#inherit-last"
  },"167": {
    "doc": "⋰ Inherit Last",
    "title": "Properties",
    "content": ". | Property | Description | . | :**Settings**| |   | . | Blending Settings | SeeBlending *(Common properties)* | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-blend/blending-inherit-end.html#properties",
    "relUrl": "/doc-paths/paths-blend/blending-inherit-end.html#properties"
  },"168": {
    "doc": "⋰ Inherit Last",
    "title": "⋰ Inherit Last",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-blend/blending-inherit-end.html",
    "relUrl": "/doc-paths/paths-blend/blending-inherit-end.html"
  },"169": {
    "doc": "⋰ Inherit First",
    "title": "⋰ Inherit First",
    "content": "Copy the first point’ values . Processed subpoints will inherit from the first properties &amp; attributes. Nothing fancy about it. Table of content . | Properties | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-blend/blending-inherit-start.html#inherit-first",
    "relUrl": "/doc-paths/paths-blend/blending-inherit-start.html#inherit-first"
  },"170": {
    "doc": "⋰ Inherit First",
    "title": "Properties",
    "content": ". | Property | Description | . | :**Settings**| |   | . | Blending Settings | SeeBlending *(Common properties)* | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-blend/blending-inherit-start.html#properties",
    "relUrl": "/doc-paths/paths-blend/blending-inherit-start.html#properties"
  },"171": {
    "doc": "⋰ Inherit First",
    "title": "⋰ Inherit First",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-blend/blending-inherit-start.html",
    "relUrl": "/doc-paths/paths-blend/blending-inherit-start.html"
  },"172": {
    "doc": "⋰ Interpolate",
    "title": "⋰ Interpolate",
    "content": "Interpolates values between first and last point. Processed subpoints properties &amp; attributes will lerp between the first and last subpoints. Table of content . | Properties . | Blend Over Methods . | Distance | Count | Fixed | . | . | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-blend/blending-interpolate.html#interpolate",
    "relUrl": "/doc-paths/paths-blend/blending-interpolate.html#interpolate"
  },"173": {
    "doc": "⋰ Interpolate",
    "title": "Properties",
    "content": ". | Property | Description | . | :**Settings**| |   | . | Blending Over | Defines the method used to compute the alpha value for the interpolation. | . | Blending Settings | SeeBlending *(Common properties)* | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-blend/blending-interpolate.html#properties",
    "relUrl": "/doc-paths/paths-blend/blending-interpolate.html#properties"
  },"174": {
    "doc": "⋰ Interpolate",
    "title": "Blend Over Methods",
    "content": ". | Distance | Count | Fixed | . Distance . Distance will first calculate the total distance covered by the subpoints (from current to next), and compute their individual lerp as Local Distance / Total Distance. This usually gives more better-looking results if the distance between points is irregular; but the difference in values between a point and the next can either be brutal or negligible. If points are equally spaced, it will look very similar to Point Count. Count . Point Count uses the current point index, and compute their individual lerp as Current Index / Total Point Count. Using this method is equivalent of using a fixed blending step between each point. If points are irregularly spaced, it may look a bit random. Fixed . Uses a unique fixed lerp value for each point. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-blend/blending-interpolate.html#blend-over-methods",
    "relUrl": "/doc-paths/paths-blend/blending-interpolate.html#blend-over-methods"
  },"175": {
    "doc": "⋰ Interpolate",
    "title": "⋰ Interpolate",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-blend/blending-interpolate.html",
    "relUrl": "/doc-paths/paths-blend/blending-interpolate.html"
  },"176": {
    "doc": "Bounds to Points",
    "title": "Bounds to Points",
    "content": "PCGEx | Bounds To Points Not to confuse with Points to Bounds . The Bounds to Points node… . InPoints to be used as bounds which surface will be used to generate new points OutNew points . Table of content . | Properties | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/doc-transforms/bounds-to-points.html#bounds-to-points",
    "relUrl": "/doc-misc/doc-transforms/bounds-to-points.html#bounds-to-points"
  },"177": {
    "doc": "Bounds to Points",
    "title": "Properties",
    "content": ". WIP . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/doc-transforms/bounds-to-points.html#properties",
    "relUrl": "/doc-misc/doc-transforms/bounds-to-points.html#properties"
  },"178": {
    "doc": "Bounds to Points",
    "title": "Bounds to Points",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/doc-transforms/bounds-to-points.html",
    "relUrl": "/doc-misc/doc-transforms/bounds-to-points.html"
  },"179": {
    "doc": "Break to Paths",
    "title": "Break to Paths",
    "content": "PCGEx | Cluster : Break to Paths Breaks clusters edge chains into individual paths . The Break Clusters to Paths node converts edge chains into individual paths, offering a quick way to extract paths or splines from a refined topology without requiring complex pathfinding, but is less suited for dense clusters with highly connected vertices. VtxEndpoints of the input Edges EdgesEdges associated with the input Vtxs Break ConditionsFilters used to know which points are 'break' points. Packed ClustersIndividually packed vtx/edges pairs . Related . | Working with Clusters | Filter Ecosystem | . Table of content . | Properties . | Direction Settings | . | Using Break Conditions | . The Break Cluster to Path turns all Edges chains to individual paths. It’s useful to quickly get a bunch of paths or splines out of a refined topology without the need for pathfinding. It is not recommended to use this node on very dense clusters (where a lot of Vtx have more than two connections), as it quickly ends up creating a single point data per individual edge. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-break-to-paths.html#break-to-paths",
    "relUrl": "/doc-clusters/clusters-break-to-paths.html#break-to-paths"
  },"180": {
    "doc": "Break to Paths",
    "title": "Properties",
    "content": ". | Property | Description | . | :**Settings** | |   | . | Operate On | Lets you choose how to break cluster down.- Paths : Operate on edge chains which form paths with no crossings. e.g, nodes with only two neighbors.- Edges : Operate on each edge individually (very expensive) | . | : Direction Settings | Drive how path points should be ordered.*See below.* | . | : **Pruning** | |   | . | Min Point Count | This lets you filter out output paths that have less that the specified number of points. | . | Max Point Count | If enabled, this lets you filter out output paths that have more that the specified number of points. | . | : **Tagging** | |   | . | &lt;span class=\"etag\"&gt;Is Closed Loop Tag&lt;/span&gt; | If enabled, will tag closed loop paths data with the specified tag. | . | &lt;span class=\"etag\"&gt;Is Open Path Tag&lt;/span&gt; | If enabled, will tag open paths data with the specified tag. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-break-to-paths.html#properties",
    "relUrl": "/doc-clusters/clusters-break-to-paths.html#properties"
  },"181": {
    "doc": "Break to Paths",
    "title": "Direction Settings",
    "content": ". | Property | Description | . | Direction Method | Defines which endpoints “order” will be used to define the direction reference for the ouputs. | . | Direction Choice | Further refines the direction method, based on the above selection.-Smallest to Greatest will order direction reference metrics in ascending order.-Greatest to Smallest will order direction reference metrics in descending order.Really it’s how the endpoint reference value is sorted, but I couldn’t call that Direction’ direction. | . | Dir Source Attribute | The attribute that will be used by the selected method. | . If the selected method is Edge Dot Attribute, the attribute will be read from Edges as an FVector direction. Method . The Direction method, combined with the Direction Choice determine which endpoint should be considered the Start &amp; End of the edge. The “direction” of the edge used for computing outputs &amp; properties is the safe normal going from the start to the end of the edge. | Mode | Description | . | Endpoints order | Will use the endpoints’ as ordered during cluster construction. | . | Endpoints indices | Will use the endpoints’ point index. | . | Endpoints Sort | Enables the use of any number of Sorting Rules to determine direction.This method, while more expensive, is the most efficient. | . | Edge Dot Attribute | Will use an attribute (converted to an FVector) from the edges’ and do a Dot Product with the edge’ direction.This method, combined with Direction Choice offers full control over direction. | . Using Edge Dot Attribute only uses the first available edge in the chain to infer direction. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-break-to-paths.html#direction-settings",
    "relUrl": "/doc-clusters/clusters-break-to-paths.html#direction-settings"
  },"182": {
    "doc": "Break to Paths",
    "title": "Using Break Conditions",
    "content": "The break condition filters can be used to get tighter control over when to split a clean edge chain into more sub-paths than the default behavior. If the point pass the specified filters, it will stop whatever path was being created. If the point . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-break-to-paths.html#using-break-conditions",
    "relUrl": "/doc-clusters/clusters-break-to-paths.html#using-break-conditions"
  },"183": {
    "doc": "Break to Paths",
    "title": "🝖 AND / OR (Group)",
    "content": "Group multiple filters to set up complex AND/OR branches. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-break-to-paths.html#and--or-group",
    "relUrl": "/doc-clusters/clusters-break-to-paths.html#and--or-group"
  },"184": {
    "doc": "Break to Paths",
    "title": "🝖 Adjacency (Node)",
    "content": "Check if adjacent node meet specific conditions . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-break-to-paths.html#adjacency-node",
    "relUrl": "/doc-clusters/clusters-break-to-paths.html#adjacency-node"
  },"185": {
    "doc": "Break to Paths",
    "title": "🝖 Compare Nearest (Numeric)",
    "content": "The Numeric Comparison Filter compares the arithmetic value of an attribute against the closest point from another dataset. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-break-to-paths.html#compare-nearest-numeric",
    "relUrl": "/doc-clusters/clusters-break-to-paths.html#compare-nearest-numeric"
  },"186": {
    "doc": "Break to Paths",
    "title": "🝖 Compare (Numeric)",
    "content": "The Numeric Comparison Filter compares the arithmetic value of two attributes . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-break-to-paths.html#compare-numeric",
    "relUrl": "/doc-clusters/clusters-break-to-paths.html#compare-numeric"
  },"187": {
    "doc": "Break to Paths",
    "title": "🝖 Edge Direction (Node)",
    "content": "Check if adjacent node meet specific conditions . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-break-to-paths.html#edge-direction-node",
    "relUrl": "/doc-clusters/clusters-break-to-paths.html#edge-direction-node"
  },"188": {
    "doc": "Break to Paths",
    "title": "🝖 Compare (String)",
    "content": "Compares two string-like attributes against each other. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-break-to-paths.html#compare-string",
    "relUrl": "/doc-clusters/clusters-break-to-paths.html#compare-string"
  },"189": {
    "doc": "Break to Paths",
    "title": "🝖 Neighbors Count (Node)",
    "content": "Check a node’ neighbors count . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-break-to-paths.html#neighbors-count-node",
    "relUrl": "/doc-clusters/clusters-break-to-paths.html#neighbors-count-node"
  },"190": {
    "doc": "Break to Paths",
    "title": "🝖 Bool",
    "content": "Performs a simple boolean comparison, converting numeric values to true (&gt; 0) or false (&lt;= 0). ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-break-to-paths.html#bool",
    "relUrl": "/doc-clusters/clusters-break-to-paths.html#bool"
  },"191": {
    "doc": "Break to Paths",
    "title": "🝖 Within Range",
    "content": "Checks if an attribute value falls within a specified range. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-break-to-paths.html#within-range",
    "relUrl": "/doc-clusters/clusters-break-to-paths.html#within-range"
  },"192": {
    "doc": "Break to Paths",
    "title": "🝖 Dot Product",
    "content": "Compares the dot product of two direction vectors against a third value. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-break-to-paths.html#dot-product",
    "relUrl": "/doc-clusters/clusters-break-to-paths.html#dot-product"
  },"193": {
    "doc": "Break to Paths",
    "title": "🝖 Modulo Comparison",
    "content": "Compares the modulo of two attributes against a third operand, with configurable comparisons and tolerance. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-break-to-paths.html#modulo-comparison",
    "relUrl": "/doc-clusters/clusters-break-to-paths.html#modulo-comparison"
  },"194": {
    "doc": "Break to Paths",
    "title": "🝖 Edge Direction (Edge)",
    "content": "Check if the edge direction is within a given range. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-break-to-paths.html#edge-direction-edge",
    "relUrl": "/doc-clusters/clusters-break-to-paths.html#edge-direction-edge"
  },"195": {
    "doc": "Break to Paths",
    "title": "🝖 Endpoints Compare (Numeric)",
    "content": "Compare the value of an attribute on each of the edge endpoint. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-break-to-paths.html#endpoints-compare-numeric",
    "relUrl": "/doc-clusters/clusters-break-to-paths.html#endpoints-compare-numeric"
  },"196": {
    "doc": "Break to Paths",
    "title": "🝖 Bounds",
    "content": "Checks if a point is inside or outside the provided bounds, with options for bounds types and an epsilon adjustment. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-break-to-paths.html#bounds",
    "relUrl": "/doc-clusters/clusters-break-to-paths.html#bounds"
  },"197": {
    "doc": "Break to Paths",
    "title": "🝖 Distance",
    "content": "Compare distance to closest target against a constant or attribute. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-break-to-paths.html#distance",
    "relUrl": "/doc-clusters/clusters-break-to-paths.html#distance"
  },"198": {
    "doc": "Break to Paths",
    "title": "🝖 Endpoints Compare (String)",
    "content": "Compare the value of an attribute on each of the edge endpoint. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-break-to-paths.html#endpoints-compare-string",
    "relUrl": "/doc-clusters/clusters-break-to-paths.html#endpoints-compare-string"
  },"199": {
    "doc": "Break to Paths",
    "title": "🝖 Bitmask",
    "content": "Checks specific flags in an int64 bitmask attribute with configurable mask types, comparisons, and an option to invert results. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-break-to-paths.html#bitmask",
    "relUrl": "/doc-clusters/clusters-break-to-paths.html#bitmask"
  },"200": {
    "doc": "Break to Paths",
    "title": "🝖 Neighbors Count (Edge)",
    "content": "Check a node’ neighbors count . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-break-to-paths.html#neighbors-count-edge",
    "relUrl": "/doc-clusters/clusters-break-to-paths.html#neighbors-count-edge"
  },"201": {
    "doc": "Break to Paths",
    "title": "🝖 Random",
    "content": "Random filter. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-break-to-paths.html#random",
    "relUrl": "/doc-clusters/clusters-break-to-paths.html#random"
  },"202": {
    "doc": "Break to Paths",
    "title": "🝖 Mean Value",
    "content": "The Mean Value Filter compares per-point values of an attribute against the mean statistical value of that same attribute. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-break-to-paths.html#mean-value",
    "relUrl": "/doc-clusters/clusters-break-to-paths.html#mean-value"
  },"203": {
    "doc": "Break to Paths",
    "title": "🝖 Self Compare (Numeric)",
    "content": "Compares the numeric value at one index against the same attribute at another index. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-break-to-paths.html#self-compare-numeric",
    "relUrl": "/doc-clusters/clusters-break-to-paths.html#self-compare-numeric"
  },"204": {
    "doc": "Break to Paths",
    "title": "🝖 Self Compare (String)",
    "content": "Compares the string value at one index against the same attribute at another index. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-break-to-paths.html#self-compare-string",
    "relUrl": "/doc-clusters/clusters-break-to-paths.html#self-compare-string"
  },"205": {
    "doc": "Break to Paths",
    "title": "🝖 Spline Inclusion",
    "content": "Checks against how a point is included in a spline. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-break-to-paths.html#spline-inclusion",
    "relUrl": "/doc-clusters/clusters-break-to-paths.html#spline-inclusion"
  },"206": {
    "doc": "Break to Paths",
    "title": "🝖 Path Inclusion",
    "content": "Checks against how a point is included in a path. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-break-to-paths.html#path-inclusion",
    "relUrl": "/doc-clusters/clusters-break-to-paths.html#path-inclusion"
  },"207": {
    "doc": "Break to Paths",
    "title": "Break to Paths",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-break-to-paths.html",
    "relUrl": "/doc-clusters/clusters-break-to-paths.html"
  },"208": {
    "doc": "Connect Clusters",
    "title": "Connect Clusters",
    "content": "PCGEx | Cluster : Connect Connects clusters together. The Connect Clusters node creates bridge edges between clusters using methods like Delaunay, Least Edges, or Most Edges, always connecting the closest points between clusters to form a larger, unified cluster. VtxEndpoints of the input Edges EdgesEdges associated with the input Vtxs VtxEndpoints of the output Edges EdgesEdges associated with the output Vtxs . Related . | Working with Clusters | . Table of content . | Properties . | Bridge Methods | Projection Settings | Carry Over Settings | Cluster Output Settings | . | . The Connect Clusters creates “bridge” edges between all input clusters and outputs a single bigger one as a result. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-connect.html#connect-clusters",
    "relUrl": "/doc-clusters/clusters-connect.html#connect-clusters"
  },"209": {
    "doc": "Connect Clusters",
    "title": "Properties",
    "content": ". | Property | Description | . | Bridge Method | The method that will be used to identify and create bridges between clusters. | . Note that no matter what method is selected, a bridge will always connect the two closest points between two clusters. The chosen method only drives which cluster is connected to which other cluster. Bridge Methods . | Method | Description | . | | **Delaunay**When using this method, each cluster is abstracted into a single bounding box that encapsulates all its vertices. A 3D Delaunay is generated using each bounding box center as an input, and the resulting delaunay edges are used as bridges. | . | | **Least Edges**When using this method, the algorithm will generate the least possible amount of bridge in order to connect all the clusters together.*Careful because it can easily look like a minimum spanning tree, but it’s not.* | . | | **Most Edges**When using this method, the algorithm will create a bridge from each cluster to every other cluster. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-connect.html#properties",
    "relUrl": "/doc-clusters/clusters-connect.html#properties"
  },"210": {
    "doc": "Connect Clusters",
    "title": "Projection Settings",
    "content": ". The projection settings control how the point position is translated to a 2D space before the graph is computed; and how this projection will translate back to the original space, if relevant. | Property | Description | . | Projection Normal | Normal vector of the plane used for projection.By default, the projection plan normal is Up; so the graph is computed over the X Y plane. | . | Local Projection Normal | If enabled, uses a per-point projection vector. | . | Local Normal | Attribute ti read normal from, | . Local projection normal is very powerful but can also be very clunky to use – it’s very easy to end up with singularities that will prevent the graph from being properly computed. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-connect.html#projection-settings",
    "relUrl": "/doc-clusters/clusters-connect.html#projection-settings"
  },"211": {
    "doc": "Connect Clusters",
    "title": "Carry Over Settings",
    "content": ". “Carry over” settings lets you pick-and-choose which attributes &amp; tags carry over to the new data. | Property | Description | . | Preserve Attributes Default Value | If enabled, the node will attempt to create attributes on the data in a way that preserve the original, underlying default value of the attribute.This can be critical in order to identify which data originally belonged to which, as well as properly initializing flags to a desirable default. | . | Attributes | Lets you pick and choose which attributes to keep or dismiss. | . | Tags | Lets you pick and choose which attributes to keep or dismiss. | . Both Attributes &amp; Tags share the same string-based filters. Note that the filters look for a single valid match amongst the list; you cannot create and/or conditions. Filter Details . | Property | Description | . | Filter Mode | Chooses how the filter operates.- All let everything pass.- Exclude filters out the result of the filter.- Include only allows the items that pass the filters. | . | Matches | Lets you define a list of checks pairs: a string value, and a Match Mode. | . | Comma Separated Names | Easy to override, lets you specify a list of comma-separated names.The only caveat is that you can only pick a unique match mode used for each entry. | . | Comma Separated Names Filter | Which filter will be used along the Comma Separated Names. | . | Preserve PCGEx Data | Most of the time you’ll want to leave it to its default value. It ensures PCGEx/ prefixed data are not captured by the filter. | . Filter Modes . | Mode | Description | . | Equals | Checks for strict equality of the filtered value and the associated string. | . | Contains | Checks if the filtered value contains the associated string. | . | Starts With | Checks if the filtered value is prefixed with the associated string. | . | Ends With | Checks if the filtered value is suffixed with the associated string. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-connect.html#carry-over-settings",
    "relUrl": "/doc-clusters/clusters-connect.html#carry-over-settings"
  },"212": {
    "doc": "Connect Clusters",
    "title": "Cluster Output Settings",
    "content": "See Working with Clusters - Cluster Output Settings. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-connect.html#cluster-output-settings",
    "relUrl": "/doc-clusters/clusters-connect.html#cluster-output-settings"
  },"213": {
    "doc": "Connect Clusters",
    "title": "Connect Clusters",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-connect.html",
    "relUrl": "/doc-clusters/clusters-connect.html"
  },"214": {
    "doc": "Copy Cluster to Points",
    "title": "Copy Cluster to Points",
    "content": "PCGEx | Cluster : Copy to Points Creates copies of entire clusters to a set of target points . The Copy Cluster to Points node duplicates entire clusters at specified target points, applying transformations like rotation and scale from the target points, similar to the Copy Points node but for clusters. VtxEndpoints of the input Edges EdgesEdges associated with the input Vtxs In TargetsTarget points to copy input clusters to. VtxEndpoints of the output Edges EdgesEdges associated with the output Vtxs . Related . | Working with Clusters | . Table of content . | Properties | . The Copy Clusters to points is very much like the vanilla Copy Points node, but for clusters: it will create transformed copies of any input cluster at the target points’ location, accounting for rotation and scale. This comes handy when you make use of Packing Clusters to store Clusters into data assets and want to “place” them somewhere specific. Unlike Copy Points, this node outputs individual per-cluster datasets. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-copy-to-points.html#copy-cluster-to-points",
    "relUrl": "/doc-clusters/clusters-copy-to-points.html#copy-cluster-to-points"
  },"215": {
    "doc": "Copy Cluster to Points",
    "title": "Properties",
    "content": ". | Property | Description | . | **Transform Details** |   | . | Inherit Scale | If enabled, copied points will be scaled by the target’ scale. | . | Inherit Rotation | If enabled, copied points will be scaled by the target’ rotation. | . | Scale to Fit &amp; Justification | See [Fitting Details](/PCGExtendedToolkit/doc-general/general-fitting.html). | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-copy-to-points.html#properties",
    "relUrl": "/doc-clusters/clusters-copy-to-points.html#properties"
  },"216": {
    "doc": "Copy Cluster to Points",
    "title": "Copy Cluster to Points",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-copy-to-points.html",
    "relUrl": "/doc-clusters/clusters-copy-to-points.html"
  },"217": {
    "doc": "Custom Graph",
    "title": "Custom Graph",
    "content": "PCGEx | Cluster : Build Custom Graph Build clusters using custom blueprints! . The Build Custom Graph node allows users to create clusters and their edges using custom blueprints, offering flexibility to generate and manage graphs through blueprint base classes that can be extended. InPoints used to fetch actor references, depending on the selected mode. VtxEndpoints of the output Edges EdgesEdges associated with the output Vtxs . Related . | Working with Clusters | . Table of content . | Properties | Workflow . | Order of operations | Custom Graph Builder . | InitializeWithContext | . | Custom Graph Settings . | InitializeSettings | BuildGraph | UpdateNodePoint | . | Cluster Output Settings | . | . The Build Custom Graph relies on user-made blueprint to create clusters from scratch. It comes with two blueprint base classes that can be extended and used to create nodes &amp; edges in a very straightforward yet flexible way. It’s highly recommended to look at the example project’ Custom Graph example – it’s simple enough and covers 100% of the available features for this node. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-custom-graph.html#custom-graph",
    "relUrl": "/doc-clusters/clusters-custom-graph.html#custom-graph"
  },"218": {
    "doc": "Custom Graph",
    "title": "Properties",
    "content": ". | Property | Description | . | Mode | The selected mode drives how and which actors will be made available to the custom graph builder.- Owner only forwards the PCG Component’ owner.- Actor References takes point dataset coming from a GetActorData node and forwards any actor reference that successfully resolve to a world actor. | . | Actor Reference Attribute | When using Actor Reference mode, this is the name of the attribute that contains actor references paths. | . | Builder | User-made custom graph builder object. | . | Mute Unprocessed Settings Warning | This quiets the warning regarding invalid settings *(e.g settings that don’t have enough nodes)* | . | Cluster Output Settings | *See [Working with Clusters - Cluster Output Settings](/PCGExtendedToolkit/doc-general/working-with-clusters.html#cluster-output-settings).* | . Note that the PCG Graph will work with a copy of the selected builder, not the instance that exists within the setting panel. In case you’re doing fancy stuff in the constructor, which you probably shouldn’t, keep in mind only public blueprint variables will be copied from it. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-custom-graph.html#properties",
    "relUrl": "/doc-clusters/clusters-custom-graph.html#properties"
  },"219": {
    "doc": "Custom Graph",
    "title": "Workflow",
    "content": ". The custom graph workflow is made out of two pieces. The main one, Custom Graph Builder, drives how many graphs will be generated; The other, Custom Graph Settings, is a data/settings holder that is responsible for creating edges &amp; updating individual nodes’ PCG points. | First, create a new blueprint inheriting from [PCGEx] Custom Graph Settings. | Override the InitializeSettings, BuildGraph and UpdateNodePoint. | InitializeSettings is where you confirm the settings are valid, and optionally reserve some memory for your graph. | BuildGraph is where you will add edges to the graph. | UpdateNodePoint is where you will set individual node' PCG point properties. | . | Next, create a new blueprint, inheriting from [PCGEx] Custom Graph Builder. | Override InitializeWithContext. This is where you will create \"settings\" objects using the internal CreateSettings method and the class created before. Each unique settings represent a single graph, that you will populate as you see fit. | . Only InitializeWithContext is executed on the main thread, all other methods are called from asynchronous, multi-threaded places. If you need custom initialization behavior that is guaranteed to run on the main thread, implement your own method and call it on the setting object after using CreateSettings during builder’ initialization. Order of operations . | First, InitializeSettings will be called on the main builder instance. | Then, for each graph settings registered during initialization, individual Settings objects will have their BuildGraph method called. This is where you add edges. Points will be automatically created based on the IDs you use to register edges. | Finally, each individual Settings will have its UpdateNodePoint method called once per node created. Since this part is heavily multi-threaded, there is no call order guarantee. | That’s it! | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-custom-graph.html#workflow",
    "relUrl": "/doc-clusters/clusters-custom-graph.html#workflow"
  },"220": {
    "doc": "Custom Graph",
    "title": "Custom Graph Builder",
    "content": ". The custom graph builder is only responsible for creating Custom Graph Settings, and forwarding them with actor references provided by the host PCG node. The execution flow is controlled by the latter, so it’s only important to implement InitializeSettings. This object has an internal read-only array, InputActors, which is populated by the host PCG node based on its selected Mode. It is assumed that you either use custom component or blueprint that store custom data from which you will be building custom graphs, so you can fetch &amp; filter more custom components from these actors references. You may also access another internal read-only array, GraphSettings, which contains all settings created using the CreateSettings method. InitializeWithContext . – . You may override BuildGraph if you need to do some sort of pre-processing of the settings at the builder level, but it’s highly unlikely that you ever need to do so. The multi-threaded nature of this node means that there is no guarantee that other concurrent graphs are properly initialized at this point, so everything should be kept in silos. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-custom-graph.html#custom-graph-builder",
    "relUrl": "/doc-clusters/clusters-custom-graph.html#custom-graph-builder"
  },"221": {
    "doc": "Custom Graph",
    "title": "Custom Graph Settings",
    "content": ". The custom graph settings are holding data &amp; providing a handy way to cache per-graph data mapping, as well as a streamlined way to create edges and update graph PCG points. InitializeSettings . Example where initialization uses a property on an actor to drive the number of node for these settings. Note that there is no relationship whatsoever between input actors and graph, they’re just a convenience thing. BuildGraph . BuildGraph is where you call AddEdge appropriately. The method takes two int64 IDs – those can be point index, or whatever you see fit. These IDs will be passed to UpdateNodePoint later on; along with the internal point index assocaited with it. RemoveEdge is also available if you want to remove a previously added edge. Custom Graph uses per-node IDs instead of indices so that you can build a graph as you discover connections. It comes at the cost of a slight overhead, but it’s much more flexible that way. You don’t have to worry about duplicate/directed edges, the graph system uses an unsigned hash under the hood, so A -&gt; B and B -&gt; A refer to the same edge. Example where a straight line of edges is created by using a simple loop index. UpdateNodePoint . Example where a point position is oriented forward in space using an actor’ transform, and setting the point Color from a variable on the actor. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-custom-graph.html#custom-graph-settings",
    "relUrl": "/doc-clusters/clusters-custom-graph.html#custom-graph-settings"
  },"222": {
    "doc": "Custom Graph",
    "title": "Cluster Output Settings",
    "content": "See Working with Clusters - Cluster Output Settings. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-custom-graph.html#cluster-output-settings",
    "relUrl": "/doc-clusters/clusters-custom-graph.html#cluster-output-settings"
  },"223": {
    "doc": "Custom Graph",
    "title": "Custom Graph",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-custom-graph.html",
    "relUrl": "/doc-clusters/clusters-custom-graph.html"
  },"224": {
    "doc": "Cut Clusters",
    "title": "Cut Clusters",
    "content": "PCGEx | Cluster : Cut Cut clusters using paths . The Cut Cluster node allows selective cutting of clusters by intersecting paths, with options to retain or remove affected edges and nodes, and includes adjustable behaviors for node and edge proximity, making it versatile for dividing clusters into distinct parts. VtxEndpoints of the input Edges EdgesEdges associated with the input Vtxs In TargetsTarget points to copy input clusters to. VtxEndpoints of the output Edges EdgesEdges associated with the output Vtxs . Related . | Working with Clusters | . Table of content . | Properties . | Mode | Cluster Output Settings | . | . The Cut Cluster node is a path/cluster interop node. It uses input paths to “select” clusters parts they intersect with, and either keep or remove these parts. It’s especially useful to split clusters into multiple partitions using paths, but has many other uses. It can operate on clusters edges only, nodes only, or both. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-cut-clusters.html#cut-clusters",
    "relUrl": "/doc-clusters/clusters-cut-clusters.html#cut-clusters"
  },"225": {
    "doc": "Cut Clusters",
    "title": "Properties",
    "content": ". | Property | Description | . | Closed loop |   | . | Scope | The scope/selection of input data that are to be processed as closed paths or not.-All processes all input as selected below.-All but tagged inverts the scope based on tags.Default is, all paths are considered open, unless they are tagged with ClosedLoop. | . | Closed Loop | Whether to consider input data that are part of the scope as closed loop or not. | . | Comma Separated Tags | Tags to check for. Any match uses the inverse of the above value. | . | Property | Description | . | **Settings** |   | . | Invert | Inverts the cutting behavior. Edges &amp; nodes are kept in the vicinity of the path, instead of being removed. | . | Mode | Which cluster components the node operates on. | . | Node Expansion | Amount by which node bounds should be expanded for proximity testing.*Uses node point’ bounds as a baseline.* | . | Affected Nodes Affect Connected Edges | If a node is kept or removed, so are its connected edges. | . | Affected Edges Affect Endpoints | If an edge is kept or removed, so are its start and end points.*This make the whichever mode is selected more \"aggressive\".* | . | Keep Edges that connect valid nodes | When Invert is enabled, this keep edges that exist between two valid nodes.*This make the overall pruning more conservative of edges.* | . Mode . | : Handling | |   | . | &lt;span class=\"ebit\"&gt;Nodes&lt;/span&gt; | Nodes are tested for **proximity** against the input paths. | . | &lt;span class=\"ebit\"&gt;Edges&lt;/span&gt; | Edges are tested for **intersection** with the input paths. | . | &lt;span class=\"ebit\"&gt;Edges &amp; Nodes&lt;/span&gt; | Combines the two operations above. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-cut-clusters.html#properties",
    "relUrl": "/doc-clusters/clusters-cut-clusters.html#properties"
  },"226": {
    "doc": "Cut Clusters",
    "title": "Cluster Output Settings",
    "content": "See Working with Clusters - Cluster Output Settings. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-cut-clusters.html#cluster-output-settings",
    "relUrl": "/doc-clusters/clusters-cut-clusters.html#cluster-output-settings"
  },"227": {
    "doc": "Cut Clusters",
    "title": "Cut Clusters",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-cut-clusters.html",
    "relUrl": "/doc-clusters/clusters-cut-clusters.html"
  },"228": {
    "doc": "Edge Order",
    "title": "Edge Order",
    "content": "PCGEx | Cluster : Edge Order Fix the order of edge start &amp; end points . The Edge Order node fixes the endpoints order of edges, effectively turning clusters into directed graphs. VtxEndpoints of the input Edges EdgesEdges associated with the input Vtxs Sorting RulesSorting rules when this mode is selected VtxEndpoints of the output Edges EdgesEdges associated with the output Vtxs . Related . | Working with Clusters | | . Table of content . | Properties . | Direction (Order) | . | . The Edge Order node lets you fix the order of the start &amp; end point on the edge. This enable to have full control with edge filters that work on endpoint comparison. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-edge-order.html#edge-order",
    "relUrl": "/doc-clusters/clusters-edge-order.html#edge-order"
  },"229": {
    "doc": "Edge Order",
    "title": "Properties",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-edge-order.html#properties",
    "relUrl": "/doc-clusters/clusters-edge-order.html#properties"
  },"230": {
    "doc": "Edge Order",
    "title": "Direction (Order)",
    "content": "| Property | Description | . | Direction Method | Defines which endpoints “order” will be used to define the direction reference for the ouputs. | . | Direction Choice | Further refines the direction method, based on the above selection.-Smallest to Greatest will order direction reference metrics in ascending order.-Greatest to Smallest will order direction reference metrics in descending order.Really it’s how the endpoint reference value is sorted, but I couldn’t call that Direction’ direction. | . | Dir Source Attribute | The attribute that will be used by the selected method. | . If the selected method is Edge Dot Attribute, the attribute will be read from Edges as an FVector direction. Method . The Direction method, combined with the Direction Choice determine which endpoint should be considered the Start &amp; End of the edge. The “direction” of the edge used for computing outputs &amp; properties is the safe normal going from the start to the end of the edge. | Mode | Description | . | Endpoints order | Will use the endpoints’ as ordered during cluster construction. | . | Endpoints indices | Will use the endpoints’ point index. | . | Endpoints Sort | Enables the use of any number of Sorting Rules to determine direction.This method, while more expensive, is the most efficient. | . | Edge Dot Attribute | Will use an attribute (converted to an FVector) from the edges’ and do a Dot Product with the edge’ direction.This method, combined with Direction Choice offers full control over direction. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-edge-order.html#direction-order",
    "relUrl": "/doc-clusters/clusters-edge-order.html#direction-order"
  },"231": {
    "doc": "Edge Order",
    "title": "Edge Order",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-edge-order.html",
    "relUrl": "/doc-clusters/clusters-edge-order.html"
  },"232": {
    "doc": "Properties : Edge",
    "title": "Properties : Edge",
    "content": "PCGEx | Cluster : Edge Properties Compute edge extra data from its vertices . The Edge Properties node allows you to compute and write additional cluster-related data for edges, as well as “solidify” their bounds, giving them a more defined shape. The direction of the edge, from start to end, is determined by the chosen direction method and is used to influence outputs. VtxEndpoints of the input Edges EdgesEdges associated with the input Vtxs VtxEndpoints of the output Edges EdgesEdges associated with the output Vtxs . Related . | Working with Clusters | | . Table of content . | Properties . | Direction | Outputs | . | Solidfication . | Radiuses | . | . The Edge Properties node lets you extract &amp; write cluster-related properties to individual Edges points, as well as “solidify” the edge points (i.e giving their bounds an decent shape). ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-edge-properties.html#properties--edge",
    "relUrl": "/doc-clusters/clusters-edge-properties.html#properties--edge"
  },"233": {
    "doc": "Properties : Edge",
    "title": "Properties",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-edge-properties.html#properties",
    "relUrl": "/doc-clusters/clusters-edge-properties.html#properties"
  },"234": {
    "doc": "Properties : Edge",
    "title": "Direction",
    "content": "| Property | Description | . | Direction Method | Defines which endpoints “order” will be used to define the direction reference for the ouputs. | . | Direction Choice | Further refines the direction method, based on the above selection.-Smallest to Greatest will order direction reference metrics in ascending order.-Greatest to Smallest will order direction reference metrics in descending order.Really it’s how the endpoint reference value is sorted, but I couldn’t call that Direction’ direction. | . | Dir Source Attribute | The attribute that will be used by the selected method. | . If the selected method is Edge Dot Attribute, the attribute will be read from Edges as an FVector direction. Method . The Direction method, combined with the Direction Choice determine which endpoint should be considered the Start &amp; End of the edge. The “direction” of the edge used for computing outputs &amp; properties is the safe normal going from the start to the end of the edge. | Mode | Description | . | Endpoints order | Will use the endpoints’ as ordered during cluster construction. | . | Endpoints indices | Will use the endpoints’ point index. | . | Endpoints Sort | Enables the use of any number of Sorting Rules to determine direction.This method, while more expensive, is the most efficient. | . | Edge Dot Attribute | Will use an attribute (converted to an FVector) from the edges’ and do a Dot Product with the edge’ direction.This method, combined with Direction Choice offers full control over direction. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-edge-properties.html#direction",
    "relUrl": "/doc-clusters/clusters-edge-properties.html#direction"
  },"235": {
    "doc": "Properties : Edge",
    "title": "Outputs",
    "content": "| Property | Description | . | **Outputs**| |   | . | &lt;span class=\"eout\"&gt;Edge Length&lt;/span&gt;double |   | . | &lt;span class=\"eout\"&gt;Edge Direction&lt;/span&gt;FVector |   | . | Endpoints Blending |   | . | Endpoints Weights |   | . | Blending Settings | Defines how each enpoint’ property (Start and End Vtx) is blended into the edge.*See Blending*. | . | Heuristics | If enabled, will reveal a new Heuristic input.**This is used to ouput &amp; debug the heuristic score of each edge.***Note that heuristics that require external parameters won’t work correctly and output a constant value.* | . Note on blending: this is a 2-point blend, hence Lerp yields more accurate results than Weight. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-edge-properties.html#outputs",
    "relUrl": "/doc-clusters/clusters-edge-properties.html#outputs"
  },"236": {
    "doc": "Properties : Edge",
    "title": "Solidfication",
    "content": ". Solidifying an edge means computing its bounds so they visually connect the start &amp; end point. This makes edge point incredibly more useful than just “data holders”! . Solidification is fairly straightforward on paper, but in order to be flexible it also exposes an overwhelming amount of parameters. Unreal has a visual bug in the detail panel: the first time you select a solidification axis, remaining axis’ properties will not show up. *You have to deselect the node then select it again for the details panel to properly refresh. | Property | Description | . | :**Settings**| |   | . | Write Edge Position |   | . | Edge Position Lerp |   | . | Solidification Axis |   | . | Soldification Lerp Operand |   | . | Soldification Lerp *(Constant or Attribute)* |   | . Note that if solidification is enabled, the specified Edge Position Lerp will override the Endpoints Weights specified for Outputs, to enforce consistency. Radiuses . When a solidification axis is selected, lets you set the edge bounds’ remaining two axis as “radiuses”. Each component shares the same following properties: . | Write Radius X/Y/Z |   | . | Radius Type |   | . | Radius Constant |   | . | Radius Attribute |   | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-edge-properties.html#solidfication",
    "relUrl": "/doc-clusters/clusters-edge-properties.html#solidfication"
  },"237": {
    "doc": "Properties : Edge",
    "title": "Properties : Edge",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-edge-properties.html",
    "relUrl": "/doc-clusters/clusters-edge-properties.html"
  },"238": {
    "doc": "Find Clusters",
    "title": "Find Clusters",
    "content": "PCGEx | Find Clusters Find matching cluster data. The Find Clusters node locates matching Vtx and Edges pairs from disordered data collections, helping streamline operations when working with individual clusters. InAny data EdgesKey data to be matched against. Availability depends on the selected Search Mode. VtxKey data to be matched against. Availability depends on the selected Search Mode. VtxEndpoints of the output Edges EdgesEdges associated with the output Vtxs . Related . | Working with Clusters | . Table of content . | Properties . | Search modes . | All | Vtx from Edges | Edges from Vtx | . | . | Usage in loops | . The Find Clusters node is a handy helper to find matching Vtx and Edges data from more-or-less scrambled collections of data. It basically makes it easy to do non-destructive operations (i.e attribute ops) on both Vtx &amp; Edges at the same time without and then “restore” the working pairs. Alternatively, it also makes it easy to cherry pick Vtx or Edges if you have single key data to restore from. (i.e loop subgraphs) . Note that this node is not an alternative to Sanitize Clusters, it only works at the collection level and doesn’t inspect per-point data. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-find-cluster-data.html#find-clusters",
    "relUrl": "/doc-clusters/clusters-find-cluster-data.html#find-clusters"
  },"239": {
    "doc": "Find Clusters",
    "title": "Properties",
    "content": ". | Property | Description | . | Search Mode | Defines how to search and what the node will output.*Some search modes will unlock additional inputs.* | . | Skip Trivial Warnings | If enabled, will skip trivial warnings about unmatched pairs and missing siblings. | . | Skip Important Warnings | If enabled, will skip important warnings that you may get from incomplete data. | . The ability to skip warning is there mostly because I found this node to be often purposefully used with “bad” data, and you don’t want to be spammed with infos you already know. Just don’t forget to uncheck these if for some reason the node is not generating the output you’d expect; it will definitely provide some details on why. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-find-cluster-data.html#properties",
    "relUrl": "/doc-clusters/clusters-find-cluster-data.html#properties"
  },"240": {
    "doc": "Find Clusters",
    "title": "Search modes",
    "content": ". All . This search mode finds all valid Vtx &amp; Edges pair and output the workable ones. If a Vtx is found but no matching Edges are, or vice versa (Edges found but no assocated Vtx), They will be ommited from the ouput. Vtx from Edges . This search modes finds the single valid Vtx associated with the Edges found in the corresponding node input. If none is found, the entire output will be empty. Edges from Vtx . This search modes finds all valid Edges associated with the Vtx found in the corresponding node input. If none is found, the entire output will be empty. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-find-cluster-data.html#search-modes",
    "relUrl": "/doc-clusters/clusters-find-cluster-data.html#search-modes"
  },"241": {
    "doc": "Find Clusters",
    "title": "Usage in loops",
    "content": "Looping over individual clusters can look like a needlessly complex task: how do you get the right Edges with the right Vtx or vice versa? Well, this node is there to help! . In order to loop over individual clusters, you need to loop over the Edges dataset, not the Vtx; because Vtx dataset may be bound to more than one Edges set. Check out Working with Clusters for more infos on that. Forward Vtx groups to another loop input and use the Vtx from Edges input, like so: . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-find-cluster-data.html#usage-in-loops",
    "relUrl": "/doc-clusters/clusters-find-cluster-data.html#usage-in-loops"
  },"242": {
    "doc": "Find Clusters",
    "title": "Find Clusters",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-find-cluster-data.html",
    "relUrl": "/doc-clusters/clusters-find-cluster-data.html"
  },"243": {
    "doc": "Find point on Bounds",
    "title": "Find point on Bounds",
    "content": "PCGEx | Cluster : Find point on Bounds Find a point in each cluster that is the closest to a bound-relative position. The Find point on Bounds node find the point inside either edge or vtx points that is closest to that cluster’ bounds. This is especially useful to use as a seed to find outer contours of individual clusters. VtxEndpoints of the input Edges EdgesEdges associated with the input Vtxs OutPoints found. One dataset per input cluster. Related . | Working with Clusters | . Table of content . | Properties . | Carry Over Settings | Cluster Output Settings | . | . The Find point on Bounds node for cluster extract the single closest Vtx point to a target position that is relative to the cluster’ AABB. In other words, it’s a very reliable way to find a point that can be used as a seed for the Find Contours node and grab the perimeter of a cluster. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-find-point-on-bounds.html#find-point-on-bounds",
    "relUrl": "/doc-clusters/clusters-find-point-on-bounds.html#find-point-on-bounds"
  },"244": {
    "doc": "Find point on Bounds",
    "title": "Properties",
    "content": ". | Property | Description | . | Search Mode | Whether to validate closest distance for the closest Vtx or the closest Edge. | . | Output Mode | Whether to output a single dataset per cluster, or a single consolidated list. | . | UVW | The bound-relative position to start searching from. 1,1,1 will be top left corner of the bounding box; while -1,-1,-1 will be located in the opposite corner. | . | Offset | Offset the output point by a distance, **away** from the center of the bounding box. | . | Carry Over Settings | *See below.* | . | Quiet Attribute Mismatch Warning | When using Merged output, some attribute may share the same name but not the same type, which will throw a warning. You can disable the warning by enabling this option. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-find-point-on-bounds.html#properties",
    "relUrl": "/doc-clusters/clusters-find-point-on-bounds.html#properties"
  },"245": {
    "doc": "Find point on Bounds",
    "title": "Carry Over Settings",
    "content": ". “Carry over” settings lets you pick-and-choose which attributes &amp; tags carry over to the new data. | Property | Description | . | Preserve Attributes Default Value | If enabled, the node will attempt to create attributes on the data in a way that preserve the original, underlying default value of the attribute.This can be critical in order to identify which data originally belonged to which, as well as properly initializing flags to a desirable default. | . | Attributes | Lets you pick and choose which attributes to keep or dismiss. | . | Tags | Lets you pick and choose which attributes to keep or dismiss. | . Both Attributes &amp; Tags share the same string-based filters. Note that the filters look for a single valid match amongst the list; you cannot create and/or conditions. Filter Details . | Property | Description | . | Filter Mode | Chooses how the filter operates.- All let everything pass.- Exclude filters out the result of the filter.- Include only allows the items that pass the filters. | . | Matches | Lets you define a list of checks pairs: a string value, and a Match Mode. | . | Comma Separated Names | Easy to override, lets you specify a list of comma-separated names.The only caveat is that you can only pick a unique match mode used for each entry. | . | Comma Separated Names Filter | Which filter will be used along the Comma Separated Names. | . | Preserve PCGEx Data | Most of the time you’ll want to leave it to its default value. It ensures PCGEx/ prefixed data are not captured by the filter. | . Filter Modes . | Mode | Description | . | Equals | Checks for strict equality of the filtered value and the associated string. | . | Contains | Checks if the filtered value contains the associated string. | . | Starts With | Checks if the filtered value is prefixed with the associated string. | . | Ends With | Checks if the filtered value is suffixed with the associated string. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-find-point-on-bounds.html#carry-over-settings",
    "relUrl": "/doc-clusters/clusters-find-point-on-bounds.html#carry-over-settings"
  },"246": {
    "doc": "Find point on Bounds",
    "title": "Cluster Output Settings",
    "content": "See Working with Clusters - Cluster Output Settings. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-find-point-on-bounds.html#cluster-output-settings",
    "relUrl": "/doc-clusters/clusters-find-point-on-bounds.html#cluster-output-settings"
  },"247": {
    "doc": "Find point on Bounds",
    "title": "Find point on Bounds",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-find-point-on-bounds.html",
    "relUrl": "/doc-clusters/clusters-find-point-on-bounds.html"
  },"248": {
    "doc": "Fuse Clusters",
    "title": "Fuse Clusters",
    "content": "PCGEx | Cluster : Fuse Fuse clusters together by finding Point/Edge and Edge/Edge intersections. The Fuse Clusters node merges clusters by combining collocated vertices and edges, while detecting point/edge and edge/edge intersections, creating larger and more complex clusters through a multi-stage blending process. VtxEndpoints of the input Edges EdgesEdges associated with the input Vtxs VtxEndpoints of the output Edges EdgesEdges associated with the output Vtxs . Related . | Working with Clusters | . Table of content . | Properties . | Point/Point Intersections | Point/Edge Intersections | Edge/Edge Intersections | Blending | Meta Filters | Cluster Output Settings | . | . The Fuse Cluster merges &amp; fuse all input cluster together: collocated Vtx and their connected Edges are merged to create bigger islands. Additionally, the node can find point/edge and edge/edge intersections, creating even more complex clusters and supporting some advanced scenarios. Be careful with this node, it can quickly become very expensive! . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-fuse-cluster.html#fuse-clusters",
    "relUrl": "/doc-clusters/clusters-fuse-cluster.html#fuse-clusters"
  },"249": {
    "doc": "Fuse Clusters",
    "title": "Properties",
    "content": ". The Fuse node has a very specific order of operation: . | First collocated Vtx are merged together (Point/Point), and any duplicate Edge is removed. | Points that are merged go through a first blending pass. | . | Next, if enabled, any Vtx that lie on a foreign Edge will split that edge into two. | A second blending pass is applied | . | Last, Edges are tested against each other, possibly creating new Vtx &amp; Edges in the process. | A third and last blending pass is applied, where each edges’ endpoints are blended into their resulting intersection point. | . | . While counter intuitive, it is much cheaper to leave self-intersection enabled. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-fuse-cluster.html#properties",
    "relUrl": "/doc-clusters/clusters-fuse-cluster.html#properties"
  },"250": {
    "doc": "Fuse Clusters",
    "title": "Point/Point Intersections",
    "content": ". | Property | Description | . | Fuse Details |   | . | Target Distance | Target Distance reference..Whether to consider point bounds, and if so, how. | . | Fuse Method | Lets you choose the method for finding neighbors &amp; collocated points | . | Voxel Grid Offset | Offset the voxelized grid by an constant amount.By default the center of the grid is 0,0,0, which may look like an undersirable offset. That offset can be manually compensated using this parameter. | . | Inline Insertion | Using the Octree fuse method is not deterministic by default.Enabling inlined insertion will make it so, at the cost of speed. | . | Source Distance | Source Distance reference.Whether to consider point bounds, and if so, how. | . | Tolerance |   | . | Component Wise Tolerance | If enabled, lets you set individual tolerance in world space for each X, Y and Z axis. | . | Tolerance | Uniform tolerance. This represent the radius within which elements will be considered in fuse range. | . | Tolerances | If enabled, represent individual axis’ radius within which elements will be considered in fuse range. | . | Local Tolerance | If enabled, lets your use per-point tolerance value.NOT IMPLEMENTED | . | Outputs |   | . | Compounded Attribute Namebool | If enabled, writes a bool flag. true if the point is the result of a merge, false if it’s the “original” one. | . | Compound Size Attribute Nameint32 | If enabled, writes the numbers of points that have been compounded/merged into it. | . Voxel is faster but will snap vtx on a grid; Octree is slower but is much more conservative of the original aspect. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-fuse-cluster.html#pointpoint-intersections",
    "relUrl": "/doc-clusters/clusters-fuse-cluster.html#pointpoint-intersections"
  },"251": {
    "doc": "Fuse Clusters",
    "title": "Point/Edge Intersections",
    "content": ". Point/Edge intersections search for Vtx that are lying on Edges they’re not connected to, and if such situation is found, the matching edge is split into new edges as to insert the Vtx there. The original Edge is removed and the Vtx then becomes connected to the old Edge’ endpoints through 2 new Edges. | Find Point Edge Intersections | If enabled, fusing will search for point/edge intersections. | . | Property | Description | . | Enable Self Intersection | If enabled, a cluster will test if intersection exists against itself. Otherwise, only check against other clusters. | . | Fuse Details |   | . | Source Distance | Source Distance reference.Whether to consider point bounds, and if so, how. | . | Component Wise Tolerance | If enabled, lets you set individual tolerance in world space for each X, Y and Z axis. | . | Tolerance | Uniform tolerance. This represent the radius within which elements will be considered in fuse range. | . | Tolerances | If enabled, represent individual axis’ radius within which elements will be considered in fuse range. | . | Local Tolerance | If enabled, lets your use per-point tolerance value.NOT IMPLEMENTED | . | Outputs |   | . | Snap on Edge | If enabled, snap the intersection position onto the original edge, as opposed to the reverse. | . | Intersector Attribute Namebool | If enabled, flag the points that intersected with an edge. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-fuse-cluster.html#pointedge-intersections",
    "relUrl": "/doc-clusters/clusters-fuse-cluster.html#pointedge-intersections"
  },"252": {
    "doc": "Fuse Clusters",
    "title": "Edge/Edge Intersections",
    "content": ". Edge/Edge intersections search for Edges that intersect with others Edges. When found, a new Vtx is created at the intersection, creating 4 new edges in place of the previous 2. | Find Edge Edge Intersections | If enabled, fusing will search for edge/edge intersections. | . | Property | Description | . | Enable Self Intersection | If enabled, a cluster will test if intersection exists against itself. Otherwise, only check against other clusters. | . | Tolerance |   | . | Tolerance | Uniform tolerance. This represent the radius within which elements will be considered in fuse range. | . | Min Angle | If enabled, only considers edges to be intersecting if their angle is greater than the specified value. | . | Max Angle | If enabled, only considers edges to be intersecting if their angle is smaller than the specified value. | . | Outputs |   | . | Crossing Attribute Namebool | If enabled, flag the edges’ intersection point. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-fuse-cluster.html#edgeedge-intersections",
    "relUrl": "/doc-clusters/clusters-fuse-cluster.html#edgeedge-intersections"
  },"253": {
    "doc": "Fuse Clusters",
    "title": "Blending",
    "content": "See Blending for properties details. | Default Points Blending is used for Point/Point &amp; Point/Edge | Default Edges Blending is used for Point/Edge and Edge/Edge | You may use the associated checkbox to override blending settings to get more control over the different processing stages. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-fuse-cluster.html#blending",
    "relUrl": "/doc-clusters/clusters-fuse-cluster.html#blending"
  },"254": {
    "doc": "Fuse Clusters",
    "title": "Meta Filters",
    "content": "Meta filters lets you choose separately which attributes &amp; tags should carry over from their original data to the new output. “Carry over” settings lets you pick-and-choose which attributes &amp; tags carry over to the new data. | Property | Description | . | Preserve Attributes Default Value | If enabled, the node will attempt to create attributes on the data in a way that preserve the original, underlying default value of the attribute.This can be critical in order to identify which data originally belonged to which, as well as properly initializing flags to a desirable default. | . | Attributes | Lets you pick and choose which attributes to keep or dismiss. | . | Tags | Lets you pick and choose which attributes to keep or dismiss. | . Both Attributes &amp; Tags share the same string-based filters. Note that the filters look for a single valid match amongst the list; you cannot create and/or conditions. Filter Details . | Property | Description | . | Filter Mode | Chooses how the filter operates.- All let everything pass.- Exclude filters out the result of the filter.- Include only allows the items that pass the filters. | . | Matches | Lets you define a list of checks pairs: a string value, and a Match Mode. | . | Comma Separated Names | Easy to override, lets you specify a list of comma-separated names.The only caveat is that you can only pick a unique match mode used for each entry. | . | Comma Separated Names Filter | Which filter will be used along the Comma Separated Names. | . | Preserve PCGEx Data | Most of the time you’ll want to leave it to its default value. It ensures PCGEx/ prefixed data are not captured by the filter. | . Filter Modes . | Mode | Description | . | Equals | Checks for strict equality of the filtered value and the associated string. | . | Contains | Checks if the filtered value contains the associated string. | . | Starts With | Checks if the filtered value is prefixed with the associated string. | . | Ends With | Checks if the filtered value is suffixed with the associated string. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-fuse-cluster.html#meta-filters",
    "relUrl": "/doc-clusters/clusters-fuse-cluster.html#meta-filters"
  },"255": {
    "doc": "Fuse Clusters",
    "title": "Cluster Output Settings",
    "content": "See Working with Clusters - Cluster Output Settings. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-fuse-cluster.html#cluster-output-settings",
    "relUrl": "/doc-clusters/clusters-fuse-cluster.html#cluster-output-settings"
  },"256": {
    "doc": "Fuse Clusters",
    "title": "Fuse Clusters",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-fuse-cluster.html",
    "relUrl": "/doc-clusters/clusters-fuse-cluster.html"
  },"257": {
    "doc": "Make Unique",
    "title": "Make Unique",
    "content": "PCGEx | Cluster : Make Unique Forward clusters with a new unique pair of tags. It’s like creating a copy, only much faster. The Make Unique node assigns new unique IDs to clusters without duplicating the data, enabling advanced operations like copying and modifying existing clusters before merging them with the original. VtxEndpoints of the input Edges EdgesEdges associated with the input Vtxs VtxEndpoints of the output Edges EdgesEdges associated with the output Vtxs . Related . | Working with Clusters | . Table of content . The Make Unique node is a handy helper to slap a new pair of unique IDs to an existing cluster pair, without actually duplicating the data. This node primarily exists to allow certain advanced operations such as copying an existing cluster configuration, modify it and then fuse it with the original one. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-make-unique.html#make-unique",
    "relUrl": "/doc-clusters/clusters-make-unique.html#make-unique"
  },"258": {
    "doc": "Make Unique",
    "title": "Make Unique",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-make-unique.html",
    "relUrl": "/doc-clusters/clusters-make-unique.html"
  },"259": {
    "doc": "Mesh to Clusters",
    "title": "Mesh to Clusters",
    "content": "PCGEx | Mesh to Clusters Convert mesh/geometry topology to usable clusters. The Mesh to Cluster node transforms raw mesh geometry into clusters by extracting vertices and edges, which are then copied to input points. This is useful for leveraging mesh topology within a cluster-based workflow. In TargetsTarget points to copy mesh cluster to. VtxEndpoints of the output Edges EdgesEdges associated with the output Vtxs . Related . | Working with Clusters | . Table of content . | Properties . | Graph Output Type | Cluster Output Settings | Attribute Forwarding | . | . The Mesh to Cluster node converts raw geometry from meshes (either specific reference or by sampling the scene) into Clusters, using geometry’ vertices and triangles to build Vtx and Edges and copy them onto the input points, much like Copy Cluster to Points does. Note that the current implementation is very prototype-y : when using an actor reference, only the first primitive will be processed. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-mesh-to-clusters.html#mesh-to-clusters",
    "relUrl": "/doc-clusters/clusters-mesh-to-clusters.html#mesh-to-clusters"
  },"260": {
    "doc": "Mesh to Clusters",
    "title": "Properties",
    "content": ". | Property | Description | . | Graph Output Type | Defines how the raw geometry will be converted to Vtx &amp; Edges | . | Static Mesh Source | Select the source for the mesh(es) to be converted.- Constant is a single StaticMesh picker that will be used for each of the input points.- Attribute on the other end lets you pick an attribute on the input points that contains an object path to either a StaticMesh or an Actor reference. | . | Static Mesh | The static mesh to convert to a graph &amp; copy to input points. | . | Static Mesh Attribute | The name of the attribute that contains a path to a StaticMesh or Actor.*FSoftObjectPath is preferred, but supports Fname, FString* | . | Attribute Handling | Lets you pick how the soft path should be handled, either as StaticMesh or an ActorReference.*Note that this is legacy is will be removed in an upcoming update to support both. Meanwhile, you still need to choose one.* | . | **Transform Details** |   | . | Inherit Scale | If enabled, cluster points will be scaled by the target’ scale. | . | Inherit Rotation | If enabled, cluster points will be scaled by the target’ rotation. | . | Scale to Fit &amp; Justification | See [Fitting Details](/PCGExtendedToolkit/doc-general/general-fitting.html). | . | **Misc** |   | . | Ignore Mesh Warning | If enabled, skips over invalid meshes path without warning. | . | Cluster Output Settings | *See below.* | . | Attributes Forwarding | *See below.* | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-mesh-to-clusters.html#properties",
    "relUrl": "/doc-clusters/clusters-mesh-to-clusters.html#properties"
  },"261": {
    "doc": "Mesh to Clusters",
    "title": "Graph Output Type",
    "content": "| : Output Type | Description | . | | &lt;span class=\"ebit\"&gt;Raw&lt;/span&gt;Uses the raw, unedited mesh topology. | . | | &lt;span class=\"ebit\"&gt;Dual&lt;/span&gt;Uses the dual graph of the mesh topology. | . | | &lt;span class=\"ebit\"&gt;Hollow&lt;/span&gt;Create edges from faces’ centroid to faces vertices. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-mesh-to-clusters.html#graph-output-type",
    "relUrl": "/doc-clusters/clusters-mesh-to-clusters.html#graph-output-type"
  },"262": {
    "doc": "Mesh to Clusters",
    "title": "Cluster Output Settings",
    "content": "See Working with Clusters - Cluster Output Settings. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-mesh-to-clusters.html#cluster-output-settings",
    "relUrl": "/doc-clusters/clusters-mesh-to-clusters.html#cluster-output-settings"
  },"263": {
    "doc": "Mesh to Clusters",
    "title": "Attribute Forwarding",
    "content": ". Note that at the time of writing, attribute forwarding is not implemented . “Forwarding” settings lets you pick-and-choose which attributes &amp; tags carry over from some data to another. | Property | Description | . | Enabled | Whether attribute forwarding is enabled or not. | . | Preserve Attributes Default Value | If enabled, the node will attempt to create attributes on the data in a way that preserve the original, underlying default value of the attribute.This can be critical in order to identify which data originally belonged to which, as well as properly initializing flags to a desirable default. | . Note that the filters look for a single valid match amongst the list; you cannot create and/or conditions. Filter Details . | Property | Description | . | Filter Mode | Chooses how the filter operates.- All let everything pass.- Exclude filters out the result of the filter.- Include only allows the items that pass the filters. | . | Matches | Lets you define a list of checks pairs: a string value, and a Match Mode. | . | Comma Separated Names | Easy to override, lets you specify a list of comma-separated names.The only caveat is that you can only pick a unique match mode used for each entry. | . | Comma Separated Names Filter | Which filter will be used along the Comma Separated Names. | . | Preserve PCGEx Data | Most of the time you’ll want to leave it to its default value. It ensures PCGEx/ prefixed data are not captured by the filter. | . Filter Modes . | Mode | Description | . | Equals | Checks for strict equality of the filtered value and the associated string. | . | Contains | Checks if the filtered value contains the associated string. | . | Starts With | Checks if the filtered value is prefixed with the associated string. | . | Ends With | Checks if the filtered value is suffixed with the associated string. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-mesh-to-clusters.html#attribute-forwarding",
    "relUrl": "/doc-clusters/clusters-mesh-to-clusters.html#attribute-forwarding"
  },"264": {
    "doc": "Mesh to Clusters",
    "title": "Mesh to Clusters",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-mesh-to-clusters.html",
    "relUrl": "/doc-clusters/clusters-mesh-to-clusters.html"
  },"265": {
    "doc": "Pack Clusters",
    "title": "Pack Clusters",
    "content": "PCGEx | Cluster : Pack Pack Clusters . The Pack Clusters node combines individual vertex-edge pairs into a single data set for storage and reuse, allowing for selective attribute and tag preservation, but must be unpacked to be used as a cluster. VtxEndpoints of the input Edges EdgesEdges associated with the input Vtxs Packed ClustersIndividually packed vtx/edges pairs . Related . | Working with Clusters | . Table of content . | Properties . | Carry Over Settings | . | . The Pack Cluster nodes outputs individual clusters into a single points data that contains both Vtx and Edges. As such, it is not directly usable as a cluster object, until it is unpacked using the Unpack Clusters node. This node is primarily designed so you can save clusters/diagrams to assets in order to re-use them without the associated cost of building them. Make sure to flatten the data before you save it, otherwise attributes may not carry over properly. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/packing-clusters/clusters-pack-clusters.html#pack-clusters",
    "relUrl": "/doc-clusters/packing-clusters/clusters-pack-clusters.html#pack-clusters"
  },"266": {
    "doc": "Pack Clusters",
    "title": "Properties",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/packing-clusters/clusters-pack-clusters.html#properties",
    "relUrl": "/doc-clusters/packing-clusters/clusters-pack-clusters.html#properties"
  },"267": {
    "doc": "Pack Clusters",
    "title": "Carry Over Settings",
    "content": ". “Carry over” settings lets you pick-and-choose which attributes &amp; tags carry over to the new data. | Property | Description | . | Preserve Attributes Default Value | If enabled, the node will attempt to create attributes on the data in a way that preserve the original, underlying default value of the attribute.This can be critical in order to identify which data originally belonged to which, as well as properly initializing flags to a desirable default. | . | Attributes | Lets you pick and choose which attributes to keep or dismiss. | . | Tags | Lets you pick and choose which attributes to keep or dismiss. | . Both Attributes &amp; Tags share the same string-based filters. Note that the filters look for a single valid match amongst the list; you cannot create and/or conditions. Filter Details . | Property | Description | . | Filter Mode | Chooses how the filter operates.- All let everything pass.- Exclude filters out the result of the filter.- Include only allows the items that pass the filters. | . | Matches | Lets you define a list of checks pairs: a string value, and a Match Mode. | . | Comma Separated Names | Easy to override, lets you specify a list of comma-separated names.The only caveat is that you can only pick a unique match mode used for each entry. | . | Comma Separated Names Filter | Which filter will be used along the Comma Separated Names. | . | Preserve PCGEx Data | Most of the time you’ll want to leave it to its default value. It ensures PCGEx/ prefixed data are not captured by the filter. | . Filter Modes . | Mode | Description | . | Equals | Checks for strict equality of the filtered value and the associated string. | . | Contains | Checks if the filtered value contains the associated string. | . | Starts With | Checks if the filtered value is prefixed with the associated string. | . | Ends With | Checks if the filtered value is suffixed with the associated string. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/packing-clusters/clusters-pack-clusters.html#carry-over-settings",
    "relUrl": "/doc-clusters/packing-clusters/clusters-pack-clusters.html#carry-over-settings"
  },"268": {
    "doc": "Pack Clusters",
    "title": "Pack Clusters",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/packing-clusters/clusters-pack-clusters.html",
    "relUrl": "/doc-clusters/packing-clusters/clusters-pack-clusters.html"
  },"269": {
    "doc": "Partition Vertices",
    "title": "Partition Vertices",
    "content": "PCGEx | Cluster : Partition Vtx Create per-cluster Vtx datasets . The Partition Vertices splits input vtx into separate output groups, so that each Edge dataset is associated to a unique Vtx dataset (as opposed to a shared Vtx dataset for multiple edge groups) . VtxEndpoints of the input Edges EdgesEdges associated with the input Vtxs VtxEndpoints of the output Edges EdgesEdges associated with the output Vtxs . Related . | Working with Clusters | . Table of content . The Partition Vertices node converts processes the input clusters and outputs matching pairs of dataset for each cluster. This guarantees that each Edges have a single, unshared Vtx dataset. Contrary to other edge &amp; cluster processors, this node does not produce a sanitized result. If the input is unsanitized, you may have unexpected results. This node primarily exists to allow certain advanced operations such as easily finding individual convex hull of isolated clusters. This is not a default behavior as doing so can lead to greater cluster processing times. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-partition-vertices.html#partition-vertices",
    "relUrl": "/doc-clusters/clusters-partition-vertices.html#partition-vertices"
  },"270": {
    "doc": "Partition Vertices",
    "title": "Partition Vertices",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-partition-vertices.html",
    "relUrl": "/doc-clusters/clusters-partition-vertices.html"
  },"271": {
    "doc": "Pick Closest Cluster",
    "title": "Pick Closest Cluster",
    "content": "PCGEx | Cluster : Pick Closest . The Pick Closest Cluster node filters clusters based on their proximity to target points, allowing selection, omission, or tagging of the closest clusters. VtxEndpoints of the input Edges EdgesEdges associated with the input Vtxs In TargetsTarget points used to test for proximity VtxEndpoints of the output Edges EdgesEdges associated with the output Vtxs . Related . | Working with Clusters | . Table of content . | Properties . | Target Attributes to Tags | Target Forwarding | . | . The Pick Closest Cluster nodes lets you select clusters within the available one based on proximity to a target point. Each target point will select a single cluster based on proxmimity. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-pick-closest-clusters.html#pick-closest-cluster",
    "relUrl": "/doc-clusters/clusters-pick-closest-clusters.html#pick-closest-cluster"
  },"272": {
    "doc": "Pick Closest Cluster",
    "title": "Properties",
    "content": ". | Property | Description | . | Search Mode | Whether to validate closest distance for the closest Vtx or the closest Edge. | . | Pick Mode | Defines how many clusters will get picked.-Only Best selects only the best pick, even if multiple targets have the same pick. The first best (bestest best) pick will be accounted for for forwarding.-Next Best guarantees each target will pick a cluster, unless there are less clusters than there are targets. | . | Action | Defines how the selection will be processed.-Keep keeps the selected clusters, and omits unselected ones from the output.-Omit remove the selected clusters from the output.-Tag tags the data based on whether they’re selected or not. | . | Target Bounds Expansion | Expands the target bounds for the purposes of testing.*Expansion is the same for all components, and unaffected by scale.* | . | Expand Search Outside Target Bounds | If enabled, removes the need for an overlap with the targets for a pick to happen. | . | &lt;span class=\"etag\"&gt;Keep Tag&lt;/span&gt; | Tag to add to the data if it’s selected. | . | &lt;span class=\"etag\"&gt;Omit Tag&lt;/span&gt; | Tag to add to the data if it’s not selected. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-pick-closest-clusters.html#properties",
    "relUrl": "/doc-clusters/clusters-pick-closest-clusters.html#properties"
  },"273": {
    "doc": "Pick Closest Cluster",
    "title": "Target Attributes to Tags",
    "content": ". “Forwarding” settings lets you pick-and-choose which attributes &amp; tags carry over from some data to another. | Property | Description | . | Enabled | Whether attribute forwarding is enabled or not. | . | Preserve Attributes Default Value | If enabled, the node will attempt to create attributes on the data in a way that preserve the original, underlying default value of the attribute.This can be critical in order to identify which data originally belonged to which, as well as properly initializing flags to a desirable default. | . Note that the filters look for a single valid match amongst the list; you cannot create and/or conditions. Filter Details . | Property | Description | . | Filter Mode | Chooses how the filter operates.- All let everything pass.- Exclude filters out the result of the filter.- Include only allows the items that pass the filters. | . | Matches | Lets you define a list of checks pairs: a string value, and a Match Mode. | . | Comma Separated Names | Easy to override, lets you specify a list of comma-separated names.The only caveat is that you can only pick a unique match mode used for each entry. | . | Comma Separated Names Filter | Which filter will be used along the Comma Separated Names. | . | Preserve PCGEx Data | Most of the time you’ll want to leave it to its default value. It ensures PCGEx/ prefixed data are not captured by the filter. | . Filter Modes . | Mode | Description | . | Equals | Checks for strict equality of the filtered value and the associated string. | . | Contains | Checks if the filtered value contains the associated string. | . | Starts With | Checks if the filtered value is prefixed with the associated string. | . | Ends With | Checks if the filtered value is suffixed with the associated string. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-pick-closest-clusters.html#target-attributes-to-tags",
    "relUrl": "/doc-clusters/clusters-pick-closest-clusters.html#target-attributes-to-tags"
  },"274": {
    "doc": "Pick Closest Cluster",
    "title": "Target Forwarding",
    "content": ". “Forwarding” settings lets you pick-and-choose which attributes &amp; tags carry over from some data to another. | Property | Description | . | Enabled | Whether attribute forwarding is enabled or not. | . | Preserve Attributes Default Value | If enabled, the node will attempt to create attributes on the data in a way that preserve the original, underlying default value of the attribute.This can be critical in order to identify which data originally belonged to which, as well as properly initializing flags to a desirable default. | . Note that the filters look for a single valid match amongst the list; you cannot create and/or conditions. Filter Details . | Property | Description | . | Filter Mode | Chooses how the filter operates.- All let everything pass.- Exclude filters out the result of the filter.- Include only allows the items that pass the filters. | . | Matches | Lets you define a list of checks pairs: a string value, and a Match Mode. | . | Comma Separated Names | Easy to override, lets you specify a list of comma-separated names.The only caveat is that you can only pick a unique match mode used for each entry. | . | Comma Separated Names Filter | Which filter will be used along the Comma Separated Names. | . | Preserve PCGEx Data | Most of the time you’ll want to leave it to its default value. It ensures PCGEx/ prefixed data are not captured by the filter. | . Filter Modes . | Mode | Description | . | Equals | Checks for strict equality of the filtered value and the associated string. | . | Contains | Checks if the filtered value contains the associated string. | . | Starts With | Checks if the filtered value is prefixed with the associated string. | . | Ends With | Checks if the filtered value is suffixed with the associated string. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-pick-closest-clusters.html#target-forwarding",
    "relUrl": "/doc-clusters/clusters-pick-closest-clusters.html#target-forwarding"
  },"275": {
    "doc": "Pick Closest Cluster",
    "title": "Pick Closest Cluster",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-pick-closest-clusters.html",
    "relUrl": "/doc-clusters/clusters-pick-closest-clusters.html"
  },"276": {
    "doc": "Sanitize Clusters",
    "title": "Sanitize Clusters",
    "content": "PCGEx | Cluster : Sanitize Ensure clusters are clean and complete . The Sanitize Clusters ensures clusters are pathfinding-friendly. Fix broken connections, create new clusters as needed. Customize settings for isolated points, edge positions, and cluster sizes. VtxEndpoints of the input Edges EdgesEdges associated with the input Vtxs VtxEndpoints of the output Edges EdgesEdges associated with the output Vtxs . Related . | Working with Clusters | . Table of content . | Cluster Output Settings | . The Sanitize Cluster is a required post-processing node when you “manually” remove Vtx or Edge from datasets. It ensure that the cluster data is properly usable inside PCGEx' ecosystem of cluster-related nodes. As mentionned in the Working with Clusters page, Vtx and Edge points are storing critical attributes &amp; informations about the topology of a cluster. Sanitize removes Edges which Vtx have been removed, as well as prune Vtx that aren’t participating to any Edge. Additionally, if a cluster that was previously a bit interconnected topology has been split into smaller groups, this will be reflected in the Edges output with additional point datasets. Note that all cluster nodes output sanitized clusters by design, so there is no need to use this node after “official” PCGEx operations. Rule of thumb is, if a node has a ‘Cluster Output Settings’ in its detail panel, it’s generating clean clusters. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-sanitize-clusters.html#sanitize-clusters",
    "relUrl": "/doc-clusters/clusters-sanitize-clusters.html#sanitize-clusters"
  },"277": {
    "doc": "Sanitize Clusters",
    "title": "Cluster Output Settings",
    "content": "See Working with Clusters - Cluster Output Settings. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-sanitize-clusters.html#cluster-output-settings",
    "relUrl": "/doc-clusters/clusters-sanitize-clusters.html#cluster-output-settings"
  },"278": {
    "doc": "Sanitize Clusters",
    "title": "Sanitize Clusters",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/clusters-sanitize-clusters.html",
    "relUrl": "/doc-clusters/clusters-sanitize-clusters.html"
  },"279": {
    "doc": "Unpack Clusters",
    "title": "Unpack Clusters",
    "content": "PCGEx | Cluster : Unpack Unpack Clusters . The Unpack Clusters node restores individual vertex-edge pairs from packed data, making clusters usable again after being processed by the Pack Clusters node. Packed ClustersIndividually packed vtx/edges pairs VtxEndpoints of the output Edges EdgesEdges associated with the output Vtxs . Related . | Working with Clusters | . Table of content . The Unpack Cluster nodes recreates clusters’ Vtx and Edges pairs from packed point data created by the Pack Clusters node. … and that’s it. That’s the node. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/packing-clusters/clusters-unpack-clusters.html#unpack-clusters",
    "relUrl": "/doc-clusters/packing-clusters/clusters-unpack-clusters.html#unpack-clusters"
  },"280": {
    "doc": "Unpack Clusters",
    "title": "Unpack Clusters",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/packing-clusters/clusters-unpack-clusters.html",
    "relUrl": "/doc-clusters/packing-clusters/clusters-unpack-clusters.html"
  },"281": {
    "doc": "Debug",
    "title": "Debug",
    "content": "Working with PCGEx Debug nodes . Need-to-know stuff regarding internal visual debugging tools available in PCGEx. | Visual Debugging | Debugging inside subgraphs | Available debug nodes | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/debug/debug.html#debug",
    "relUrl": "/doc-misc/debug/debug.html#debug"
  },"282": {
    "doc": "Debug",
    "title": "Visual Debugging",
    "content": "PCGEx Debug node draw debug information flagged as persistent, and as such needs to be flushed. However, there is currently no way in Unreal to selectively flush or tag debug line – hence they needs to be flushed before they are redrawn (Or thousands of thousands of line willl stack and bring the editor to its knees). This means you need to use Flush Debug in your flow before using other PCGEx’ debug nodes. The Flush Debug is basically there to manage execution order and ensure stuffs aren’t flushed from the buffer right after they’re drawn. It’s non-intrusive, and sometimes needs an update or two to work right. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/debug/debug.html#visual-debugging",
    "relUrl": "/doc-misc/debug/debug.html#visual-debugging"
  },"283": {
    "doc": "Debug",
    "title": "Debugging inside subgraphs",
    "content": ". When disabled, the input data of a node becomes a simple passthrough. The PCGExDebug property in the Debug details of the node is overridable and basically allows you to remotely disable the PCGEx debug nodes. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/debug/debug.html#debugging-inside-subgraphs",
    "relUrl": "/doc-misc/debug/debug.html#debugging-inside-subgraphs"
  },"284": {
    "doc": "Debug",
    "title": "Available debug nodes",
    "content": "At the time of writing, there are three main debug nodes: . | Draw Attributes | | . Draw Edges is specific to Edges &amp; Clusters, however Draw Attributes is designed to work with any input. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/debug/debug.html#available-debug-nodes",
    "relUrl": "/doc-misc/debug/debug.html#available-debug-nodes"
  },"285": {
    "doc": "Debug",
    "title": "Debug",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/debug/debug.html",
    "relUrl": "/doc-misc/debug/debug.html"
  },"286": {
    "doc": "Delaunay 2D",
    "title": "Delaunay 2D",
    "content": "PCGEx | Cluster : Delaunay 2D Outputs a 2D Delaunay triangulation. The Delaunay 2D node outputs a 2D Delaunay triangulation with options like Urquhart graph, hull identification, and projection settings. InPoints clouds that will be triangulated VtxEndpoints of the output Edges EdgesEdges associated with the output Vtxs SitesDelaunay Sites . Related . | Working with Clusters | Custom Graph | . Table of content . | Properties . | Sites . | Urquhart Sites Merge | . | Projection Settings | Cluster Output Settings | Tips . | Hull pruning | Outliers edge cleaning | . | . | . This node creates a 2D Delaunay graph from the input points. If you’d like to know more about Delaunay intrinsic properties, check out the Wikipedia article! It has very very interesting properties, and this node also offers the ability to output the Urquhart alternative; which is even more fascinating. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/diagrams/diagrams-delaunay-2d.html#delaunay-2d",
    "relUrl": "/doc-clusters/diagrams/diagrams-delaunay-2d.html#delaunay-2d"
  },"287": {
    "doc": "Delaunay 2D",
    "title": "Properties",
    "content": ". | Property | Description | . | :**Settings** : |   | . | Urquhart | If enabled, the node will output the Urquhart version of the Delaunay graph.*This enables additional options for site output.* | . | &lt;span class=\"eout\"&gt;Hull Attribute Name&lt;/span&gt;Boolean | If enabled, will flag output Vtx points that lie on the convex hull of the graph. | . | Mark Edge on Touch | If enabled, edges that have at least a point on the Hull as marked as being on the hull; *as opposed to only be marked as hull edges if both endpoints are on the hull.* | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/diagrams/diagrams-delaunay-2d.html#properties",
    "relUrl": "/doc-clusters/diagrams/diagrams-delaunay-2d.html#properties"
  },"288": {
    "doc": "Delaunay 2D",
    "title": "Sites",
    "content": ". | Output Sites | If enabled, the node will output the Delaunay Sites.*Each site is the centroid of a Delaunay triangle.* | . | &lt;span class=\"eout\"&gt;Site Hull Attribute Name&lt;/span&gt;Boolean | If enabled, will flag output site points that have at least an edge that lie on the convex hull of the graph. | . | Urquhart Sites Merge | Defines if and how Delaunay Sites should be merged when they are part of a single \"Urquhart\" cell. | . Urquhart Sites Merge . | Mode |   | . | | **None**Outputs canon Delaunay sites. | . | | **Merge Sites**The output site is the average of all the canon Delaunay sites that are abstracted by the Urquhart pass. | . | | **Merge Edges**The output site is the average of all the edges removed by the Urquhart pass. | . Which merge mode to use, if any, depends on your final intent. If your goal is find the contours of an Urquhart “cell”, then Merge Edges offer usually more interesting sites positions. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/diagrams/diagrams-delaunay-2d.html#sites",
    "relUrl": "/doc-clusters/diagrams/diagrams-delaunay-2d.html#sites"
  },"289": {
    "doc": "Delaunay 2D",
    "title": "Projection Settings",
    "content": ". The projection settings control how the point position is translated to a 2D space before the graph is computed; and how this projection will translate back to the original space, if relevant. | Property | Description | . | Projection Normal | Normal vector of the plane used for projection.By default, the projection plan normal is Up; so the graph is computed over the X Y plane. | . | Local Projection Normal | If enabled, uses a per-point projection vector. | . | Local Normal | Attribute ti read normal from, | . Local projection normal is very powerful but can also be very clunky to use – it’s very easy to end up with singularities that will prevent the graph from being properly computed. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/diagrams/diagrams-delaunay-2d.html#projection-settings",
    "relUrl": "/doc-clusters/diagrams/diagrams-delaunay-2d.html#projection-settings"
  },"290": {
    "doc": "Delaunay 2D",
    "title": "Cluster Output Settings",
    "content": "See Working with Clusters - Cluster Output Settings. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/diagrams/diagrams-delaunay-2d.html#cluster-output-settings",
    "relUrl": "/doc-clusters/diagrams/diagrams-delaunay-2d.html#cluster-output-settings"
  },"291": {
    "doc": "Delaunay 2D",
    "title": "Tips",
    "content": "The delaunay algorithm creates a convex hull of very, very long edges, so you’ll often need to remove them to “clean” the graph. There are multiple approaches to to that, the two most straighfoward approaches being: . Hull pruning . Simply enable the Hull mark, filter these Vtx out and sanitize the cluster afterward. Outliers edge cleaning . Compute edge length’ using Properties : Edge, then use Refine with a 🝖 Mean Value on the edge’ length property to get rid of longer edges on the outskirts of the graph. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/diagrams/diagrams-delaunay-2d.html#tips",
    "relUrl": "/doc-clusters/diagrams/diagrams-delaunay-2d.html#tips"
  },"292": {
    "doc": "Delaunay 2D",
    "title": "Delaunay 2D",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/diagrams/diagrams-delaunay-2d.html",
    "relUrl": "/doc-clusters/diagrams/diagrams-delaunay-2d.html"
  },"293": {
    "doc": "Delaunay 3D",
    "title": "Delaunay 3D",
    "content": "PCGEx | Cluster : Delaunay 3D Outputs a 3D Delaunay tetrahedralization. The Delaunay 3D node outputs a 3D Delaunay tetrahedralization with options like Urquhart graph, hull identification, and projection settings. InPoints clouds that will be triangulated VtxEndpoints of the output Edges EdgesEdges associated with the output Vtxs . Related . | Working with Clusters | Custom Graph | . Table of content . | Properties . | Sites | Projection Settings | Cluster Output Settings | . | . This node creates a 3D Delaunay tetrahedralization from the input points. If you’d like to know more about Delaunay intrinsic properties, check out the Wikipedia article! It has very very interesting properties, and this node also offers the ability to output the Urquhart alternative; which is even more fascinating. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/diagrams/diagrams-delaunay-3d.html#delaunay-3d",
    "relUrl": "/doc-clusters/diagrams/diagrams-delaunay-3d.html#delaunay-3d"
  },"294": {
    "doc": "Delaunay 3D",
    "title": "Properties",
    "content": ". | Property | Description | . | :**Settings** : |   | . | Urquhart | If enabled, the node will output the Urquhart version of the Delaunay graph. | . | &lt;span class=\"eout\"&gt;Hull Attribute Name&lt;/span&gt;Boolean | If enabled, will flag output Vtx points that lie on the convex hull of the graph. | . | Mark Edge on Touch | If enabled, edges that have at least a point on the Hull as marked as being on the hull; *as opposed to only be marked as hull edges if both endpoints are on the hull.* | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/diagrams/diagrams-delaunay-3d.html#properties",
    "relUrl": "/doc-clusters/diagrams/diagrams-delaunay-3d.html#properties"
  },"295": {
    "doc": "Delaunay 3D",
    "title": "Sites",
    "content": ". | Output Sites | If enabled, the node will output the Delaunay Sites.*Each site is the centroid of a Delaunay triangle.* | . | &lt;span class=\"eout\"&gt;Site Hull Attribute Name&lt;/span&gt;Boolean | If enabled, will flag output site points that have at least an edge that lie on the convex hull of the graph. | . Contrary to the Delaunay 2D node, the 3D version does not offer site-merging. Not only is it not trivial, it’s all also of very little use as its main appeal is to find contours, which works poorly (if at all) on complex 3D topologies. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/diagrams/diagrams-delaunay-3d.html#sites",
    "relUrl": "/doc-clusters/diagrams/diagrams-delaunay-3d.html#sites"
  },"296": {
    "doc": "Delaunay 3D",
    "title": "Projection Settings",
    "content": ". The projection settings control how the point position is translated to a 2D space before the graph is computed; and how this projection will translate back to the original space, if relevant. | Property | Description | . | Projection Normal | Normal vector of the plane used for projection.By default, the projection plan normal is Up; so the graph is computed over the X Y plane. | . | Local Projection Normal | If enabled, uses a per-point projection vector. | . | Local Normal | Attribute ti read normal from, | . Local projection normal is very powerful but can also be very clunky to use – it’s very easy to end up with singularities that will prevent the graph from being properly computed. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/diagrams/diagrams-delaunay-3d.html#projection-settings",
    "relUrl": "/doc-clusters/diagrams/diagrams-delaunay-3d.html#projection-settings"
  },"297": {
    "doc": "Delaunay 3D",
    "title": "Cluster Output Settings",
    "content": "See Working with Clusters - Cluster Output Settings. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/diagrams/diagrams-delaunay-3d.html#cluster-output-settings",
    "relUrl": "/doc-clusters/diagrams/diagrams-delaunay-3d.html#cluster-output-settings"
  },"298": {
    "doc": "Delaunay 3D",
    "title": "Delaunay 3D",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/diagrams/diagrams-delaunay-3d.html",
    "relUrl": "/doc-clusters/diagrams/diagrams-delaunay-3d.html"
  },"299": {
    "doc": "Voronoi 2D",
    "title": "Voronoi 2D",
    "content": "PCGEx | Cluster : Voronoi 2D Outputs a 2D Voronoi graph. The Voronoi 2D node outputs a 2D Voronoi graph with options like balanced, canon, or centroid positioning. Adjust bounds, prune sites, and mark edges on the hull. InPoints clouds that will be triangulated VtxEndpoints of the output Edges EdgesEdges associated with the output Vtxs SitesUpdated &amp; optionally pruned delaunay sites . Related . | Working with Clusters | Custom Graph | . Table of content . | Properties . | Voronoi site position | Additional Outputs | Projection Settings | Cluster Output Settings | . | . This node creates a 2D Voronoi diagram from the input points. If you’d like to know more about Voronoi intrinsic properties, check out the Wikipedia article! . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/diagrams/diagrams-voronoi-2d.html#voronoi-2d",
    "relUrl": "/doc-clusters/diagrams/diagrams-voronoi-2d.html#voronoi-2d"
  },"300": {
    "doc": "Voronoi 2D",
    "title": "Properties",
    "content": ". | Property | Description | . | :**Settings** : |   | . | Method | Defines how the position of the Voronoi site is computed. *See below for more infos.* | . | Expand Bounds | Value added on each axis of the initial input points bounds, used for maths &amp; processes involving bounds. | . | Prune Out of Bounds | Depending on the selected method, the diagram will produce out-of-bounds points *(up to ±inf)*. Enabling this option lets you remove those points from the output. | . | &lt;span class=\"eout\"&gt;Hull Attribute Name&lt;/span&gt;Boolean | If enabled, will flag output Vtx points that lie on the convex hull of the underlying Delaunay diagram.*Note that this is not the exact hull, but rather an approximation.* | . | Mark Edge on Touch | If enabled, edges that have at least a point on the Hull as marked as being on the hull; *as opposed to only be marked as hull edges if both endpoints are on the hull.* | . Note that enabling Prune Out of Bounds points has a theorical risk of creating more than one finite cluster as a result. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/diagrams/diagrams-voronoi-2d.html#properties",
    "relUrl": "/doc-clusters/diagrams/diagrams-voronoi-2d.html#properties"
  },"301": {
    "doc": "Voronoi 2D",
    "title": "Voronoi site position",
    "content": ". | Mode |   | . | | **Balanced**Uses the centroid of the Delaunay site for the point that are outside the bounds, otherwise use circumcenters.*Best of both worlds, or worst of both worlds; depending on how you look at it.* | . | | **Canon (Circumcenter)**Uses the [circumcenter](https://en.wikipedia.org/wiki/Circumcircle) of the Delaunay triangle.*This is the true voronoi algorithm, it guarantees only convex sites.* | . | | **Centroid**Uses the centroid of the Delaunay site.*While more visually pleasing, some concave sites may appear depending on the initial topology.* | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/diagrams/diagrams-voronoi-2d.html#voronoi-site-position",
    "relUrl": "/doc-clusters/diagrams/diagrams-voronoi-2d.html#voronoi-site-position"
  },"302": {
    "doc": "Voronoi 2D",
    "title": "Additional Outputs",
    "content": ". It may come (very) handy to have access to updated and/or pruned output cell centroid. You can output an modified version of the In points, that better matches the output voronoi cells. | Settings |   | . | Output Sites | If enabled, the node will generate a new output.*Sites output have matching ClusterId tags corresponding output Vtx data.* | . | Prune Open Sites | If enabled, open (or incomplete) voronoi site will be pruned.*This is especially useful if you intend to find individual &amp; valid cell contours.* | . | &lt;span class=\"eout\"&gt;Open Site Flag&lt;/span&gt;bool | If the above is disabled, sites matching incomplete or open voronoi sites will be flagged with a boolean attribute. | . Note that canon Voronoi sites are guaranteed to be convex; so if you’re using find contour, you can safely prune concave contours! . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/diagrams/diagrams-voronoi-2d.html#additional-outputs",
    "relUrl": "/doc-clusters/diagrams/diagrams-voronoi-2d.html#additional-outputs"
  },"303": {
    "doc": "Voronoi 2D",
    "title": "Projection Settings",
    "content": ". The projection settings control how the point position is translated to a 2D space before the graph is computed; and how this projection will translate back to the original space, if relevant. | Property | Description | . | Projection Normal | Normal vector of the plane used for projection.By default, the projection plan normal is Up; so the graph is computed over the X Y plane. | . | Local Projection Normal | If enabled, uses a per-point projection vector. | . | Local Normal | Attribute ti read normal from, | . Local projection normal is very powerful but can also be very clunky to use – it’s very easy to end up with singularities that will prevent the graph from being properly computed. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/diagrams/diagrams-voronoi-2d.html#projection-settings",
    "relUrl": "/doc-clusters/diagrams/diagrams-voronoi-2d.html#projection-settings"
  },"304": {
    "doc": "Voronoi 2D",
    "title": "Cluster Output Settings",
    "content": "See Working with Clusters - Cluster Output Settings. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/diagrams/diagrams-voronoi-2d.html#cluster-output-settings",
    "relUrl": "/doc-clusters/diagrams/diagrams-voronoi-2d.html#cluster-output-settings"
  },"305": {
    "doc": "Voronoi 2D",
    "title": "Voronoi 2D",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/diagrams/diagrams-voronoi-2d.html",
    "relUrl": "/doc-clusters/diagrams/diagrams-voronoi-2d.html"
  },"306": {
    "doc": "Voronoi 3D",
    "title": "Voronoi 3D",
    "content": "PCGEx | Cluster : Voronoi 3D Outputs a 3D Voronoi graph. The Voronoi 3D node outputs a 3D Voronoi graph with options like balanced, canon, or centroid positioning. Adjust bounds, prune sites, and mark edges on the hull. InPoints clouds that will be triangulated VtxEndpoints of the output Edges EdgesEdges associated with the output Vtxs . Related . | Working with Clusters | Custom Graph | . Table of content . | Properties . | Voronoi site position | Cluster Output Settings | . | . This node creates a 3D Voronoi diagram from the input points. If you’d like to know more about Voronoi intrinsic properties, check out the Wikipedia article! . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/diagrams/diagrams-voronoi-3d.html#voronoi-3d",
    "relUrl": "/doc-clusters/diagrams/diagrams-voronoi-3d.html#voronoi-3d"
  },"307": {
    "doc": "Voronoi 3D",
    "title": "Properties",
    "content": ". | Property | Description | . | :**Settings** : |   | . | Method | Defines how the position of the Voronoi site is computed. *See below for more infos.* | . | Expand Bounds | Value added on each axis of the initial input points bounds, used for maths &amp; processes involving bounds. | . | Prune Out of Bounds | Depending on the selected method, the diagram will produce out-of-bounds points *(up to ±inf)*. Enabling this option lets you remove those points from the output. | . | &lt;span class=\"eout\"&gt;Hull Attribute Name&lt;/span&gt;Boolean | If enabled, will flag output Vtx points that lie on the convex hull of the underlying Delaunay diagram.*Note that this is not the exact hull, but rather an approximation.* | . | Mark Edge on Touch | If enabled, edges that have at least a point on the Hull as marked as being on the hull; *as opposed to only be marked as hull edges if both endpoints are on the hull.* | . Note that enabling Prune Out of Bounds points has a theorical risk of creating more than one finite cluster as a result. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/diagrams/diagrams-voronoi-3d.html#properties",
    "relUrl": "/doc-clusters/diagrams/diagrams-voronoi-3d.html#properties"
  },"308": {
    "doc": "Voronoi 3D",
    "title": "Voronoi site position",
    "content": ". | Mode |   | . | | **Balanced**Uses the centroid of the Delaunay tethrahedra for the point that are outside the bounds, otherwise use circumsphere centers.*Best of both worlds, or worst of both worlds; depending on how you look at it.* | . | | **Canon (Circumsphere center)**Uses the [circumcenter](https://en.wikipedia.org/wiki/Circumcircle) of the Delaunay tethrahedra. | . | | **Centroid**Uses the centroid of the Delaunay tethrahedra.*While more visually pleasing, some concave sites may appear depending on the initial topology.* | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/diagrams/diagrams-voronoi-3d.html#voronoi-site-position",
    "relUrl": "/doc-clusters/diagrams/diagrams-voronoi-3d.html#voronoi-site-position"
  },"309": {
    "doc": "Voronoi 3D",
    "title": "Cluster Output Settings",
    "content": "See Working with Clusters - Cluster Output Settings. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/diagrams/diagrams-voronoi-3d.html#cluster-output-settings",
    "relUrl": "/doc-clusters/diagrams/diagrams-voronoi-3d.html#cluster-output-settings"
  },"310": {
    "doc": "Voronoi 3D",
    "title": "Voronoi 3D",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/diagrams/diagrams-voronoi-3d.html",
    "relUrl": "/doc-clusters/diagrams/diagrams-voronoi-3d.html"
  },"311": {
    "doc": "🝖 Bitmask",
    "title": "🝖 Bitmask",
    "content": "PCGEx | Filter : Bitmask Checks specific flags in an int64 bitmask attribute with configurable mask types, comparisons, and an option to invert results. - . FilterA single filter definition . Table of content . | Properties . | Comparison modes | . | . The Bitmask Filter lets you check whether certain flags are set or not in an int64 bitmask attribute. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-bitmask.html#bitmask",
    "relUrl": "/doc-filter-ecosystem/filter-bitmask.html#bitmask"
  },"312": {
    "doc": "🝖 Bitmask",
    "title": "Properties",
    "content": ". | Property | Description | . | Flags Attributes | The is the name of the attribtue which value will be tested.*It is expected to be an int64.* | . | Mask Type | Type of source mask. Can be a per-point Attribute, or an easily overridable Constant. | . | Comparison | *See [Bitmask comparisons](/PCGExtendedToolkit/doc-general/general-comparisons.html#bitmask-comparisons).* | . | Bitmask *(Constant or Attribute)* | Mask value.*Strictly expects an int64.* | . | Invert Result | If enabled, invert the result of the filter. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-bitmask.html#properties",
    "relUrl": "/doc-filter-ecosystem/filter-bitmask.html#properties"
  },"313": {
    "doc": "🝖 Bitmask",
    "title": "Comparison modes",
    "content": ". | Comparison | Data | . | Match (any) | Value &amp; Mask != 0 (At least some flags in the mask are set) | . | Match (all) | Value &amp; Mask == Mask (All the flags in the mask are set) | . | Match (strict) | Value == Mask (Flags strictly equals mask) | . | No Match (any) | Value &amp; Mask == 0 (Flags does not contains any from mask) | . | No Match (all) | Value &amp; Mask != Mask (Flags does not contains the mask) | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-bitmask.html#comparison-modes",
    "relUrl": "/doc-filter-ecosystem/filter-bitmask.html#comparison-modes"
  },"314": {
    "doc": "🝖 Bitmask",
    "title": "🝖 Bitmask",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-bitmask.html",
    "relUrl": "/doc-filter-ecosystem/filter-bitmask.html"
  },"315": {
    "doc": "🝖 Bool",
    "title": "🝖 Bool",
    "content": "PCGEx | Filter : Bool Compare Performs a simple boolean comparison, converting numeric values to true (&gt; 0) or false (&lt;= 0). - . FilterA single filter definition . Table of content . | Properties | . The Bool Filter lets you do a simple boolean comparison. Numeric values will be converted following these rules: . | true if the value is &gt; 0 | false if the value is &lt;= 0 | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-bool.html#bool",
    "relUrl": "/doc-filter-ecosystem/filter-bool.html#bool"
  },"316": {
    "doc": "🝖 Bool",
    "title": "Properties",
    "content": ". | Property | Description | . | **Operand A** | |   | . | Operand A | The first attribute of the comparison | . | Comparison | How to compare the two operand A &amp; B. Either Equal (A == B) or Not Equal (A != B) | . | Compare Against | Type of operand B. Can be a per-point Attribute, or an easily overridable Constant. | . | **Operand B** | |   | . | Operand B *(Constant or Attribute)* | Operand B value, the second value to be tested. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-bool.html#properties",
    "relUrl": "/doc-filter-ecosystem/filter-bool.html#properties"
  },"317": {
    "doc": "🝖 Bool",
    "title": "🝖 Bool",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-bool.html",
    "relUrl": "/doc-filter-ecosystem/filter-bool.html"
  },"318": {
    "doc": "🝖 Bounds",
    "title": "🝖 Bounds",
    "content": "PCGEx | Filter : Bounds Checks if a point is inside or outside the provided bounds, with options for bounds types and an epsilon adjustment. - . BoundsSet of points which bounds will be checked against. FilterA single filter definition . Table of content . | Properties . | Bounds types | Check Type | . | . The Bounds Filter checks whether the test points are inside the provided bounds. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-bounds.html#bounds",
    "relUrl": "/doc-filter-ecosystem/filter-bounds.html#bounds"
  },"319": {
    "doc": "🝖 Bounds",
    "title": "Properties",
    "content": ". | Property | Description | . | Bounds Source | Defines the bounds to be used for tested points. | . | Bounds Target | Defines the bounds to be used for the input Bounds points. | . | Check Type | The type of bounds x bounds check the filter will do. | . | Inside Epsilon | Lets you set a small value that will be used to expand the target bounds. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-bounds.html#properties",
    "relUrl": "/doc-filter-ecosystem/filter-bounds.html#properties"
  },"320": {
    "doc": "🝖 Bounds",
    "title": "Bounds types",
    "content": ". | : Bounds type |   | . | Scaled Bounds | Point’ bounds scaled by point’ scale.These are the bounds shown by default when using the debug node in extent mode. | . | Density Bounds | Point’ bounds scaled by point’ scale, expanded by point’ steepness property.These are the bounds used by a lot of vanilla PCG nodes. | . | Bounds | Raw, unscaled point’ bounds. | . Point bounds are determined by its BoundsMin and BoundsMax properties. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-bounds.html#bounds-types",
    "relUrl": "/doc-filter-ecosystem/filter-bounds.html#bounds-types"
  },"321": {
    "doc": "🝖 Bounds",
    "title": "Check Type",
    "content": "Defines how source bounds are checked against the target bounds. These are fairly standard box/box operations. Note that the source bounds are first transformed by their point’ transform, and then inverse transformed by the target’ point transform; meaning there can be some artifacts and mathematical variations as a result of applying the matrices. | : Check Type | |   | . | | &lt;span class=\"ebit\"&gt;Intersect&lt;/span&gt;TBD | . | | &lt;span class=\"ebit\"&gt;Is Inside&lt;/span&gt;TBD | . | | &lt;span class=\"ebit\"&gt;Is Inside or On&lt;/span&gt;TBD | . | | &lt;span class=\"ebit\"&gt;Is Inside or On&lt;/span&gt;TBD | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-bounds.html#check-type",
    "relUrl": "/doc-filter-ecosystem/filter-bounds.html#check-type"
  },"322": {
    "doc": "🝖 Bounds",
    "title": "🝖 Bounds",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-bounds.html",
    "relUrl": "/doc-filter-ecosystem/filter-bounds.html"
  },"323": {
    "doc": "🝖 Dot Product",
    "title": "🝖 Dot Product",
    "content": "PCGEx | Filter : Dot Compares the dot product of two direction vectors against a third value. - . FilterA single filter definition . Table of content . | Properties . | Dot Comparison Details | Comparison modes | . | . The Dot Filter compares the dot product value of two directions. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-compare-dot.html#dot-product",
    "relUrl": "/doc-filter-ecosystem/filter-compare-dot.html#dot-product"
  },"324": {
    "doc": "🝖 Dot Product",
    "title": "Properties",
    "content": ". | Property | Description | . | **Operand A** | |   | . | Operand A | The first attribute of the comparison.*Read as FVector direction.* | . | Transform Operand A | If enabled, the Operand A direction will be transformed by the tested’ point transform. | . | **Operand B** | |   | . | Compare Against | Type of operand B. Can be a per-point Attribute, or an easily overridable Constant. | . | Operand B*(Constant or Attribute)* | Operand B value, used to compute the dot product with.*Read as FVector direction.* | . | Transform Operand A | If enabled, the Operand A direction will be transformed by the tested’ point transform. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-compare-dot.html#properties",
    "relUrl": "/doc-filter-ecosystem/filter-compare-dot.html#properties"
  },"325": {
    "doc": "🝖 Dot Product",
    "title": "Dot Comparison Details",
    "content": ". | Property | Description | . | Comparison | Which comparison to use.See Numeric comparisons. | . | Dot Units | Let you choose to work either with normalized dot range (-1 / 1) or degrees.This affects how the attribute Dot value will be interpreted as well. | . | Unsigned Dot | When enabled, the comparison will occur against an absolute dot value.This is especially useful when testing against undirected lines. | . | Dot Value | The type of value used for this probe’ search radius; either a Constant value or fetched from anAttribute | . | (Dot or Degrees) Constant | Constant to compare against. | . | (Dot or Degrees) Attribute | Constant to compare against. | . | (Dot or Degrees) Tolerance | Comparison tolerance, if the selected comparison is an approximative (~) one. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-compare-dot.html#dot-comparison-details",
    "relUrl": "/doc-filter-ecosystem/filter-compare-dot.html#dot-comparison-details"
  },"326": {
    "doc": "🝖 Dot Product",
    "title": "Comparison modes",
    "content": ". | Comparison | Data | . | == | Strictly equal. | . | != | Strictly not equal. | . | &gt;= | Equal or greater. | . | &lt;= | Equal or smaller. | . | &gt; | Strictly greater. | . | &lt; | Strictly smaller. | . | ~= | Nearly equal. | . | !~= | Nearly not equal. | . Approximative comparison will reveal an additional parameter, dubbed Tolerance. This represents the size of acceptable approximation for the comparison to pass. For example, when checking if 0.5 ~= 0.4 with a tolerance of 0.1 will return true. Large tolerances can be a great, cheap way to achieve results akin to a “within range” comparison! . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-compare-dot.html#comparison-modes",
    "relUrl": "/doc-filter-ecosystem/filter-compare-dot.html#comparison-modes"
  },"327": {
    "doc": "🝖 Dot Product",
    "title": "🝖 Dot Product",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-compare-dot.html",
    "relUrl": "/doc-filter-ecosystem/filter-compare-dot.html"
  },"328": {
    "doc": "🝖 Mean Value",
    "title": "🝖 Mean Value",
    "content": "PCGEx | Filter : Mean The **Mean Value Filter compares per-point values of an attribute against the mean statistical value of that same attribute.** . The Mean Value Filter compares per-point values of an attribute against its mean statistical value, allowing you to exclude points above or below the mean using various calculation methods such as Average, Median, Mode, Central, or Fixed, with options for relative or absolute measures. FilterA single filter definition . Table of content . | Properties . | Measure | Mean Methods . | Average (Arithmetic mean) | Median | Mode (Shortest or Longest) | Central | Fixed | . | Comparison modes | . | . The Mean Filter node is useful to filter out statistical aberrations. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-compare-mean.html#mean-value",
    "relUrl": "/doc-filter-ecosystem/filter-compare-mean.html#mean-value"
  },"329": {
    "doc": "🝖 Mean Value",
    "title": "Properties",
    "content": ". | Property | Description | . | :**Settings**| |   | . | Measure | The \"unit\" system to use for measuring data.*See [Measure](#measure).* | . | Mean Method | The method used to compute the **mean value** for a given attribute.**The mean is what will be used as a reference values by the filter.***See [Mean Methods](#mean-methods).* | . | Mode Tolerance | Value used for equality tolerance.*Only available when using Mode (Shortest) or Mode (Longest) mean methods.* | . | **Pruning**| |   | . | Exclude Below | If enabled, points with a value **below the mean from the specified threshold** will be excluded (fail). | . | Exclude Above | If enabled, points with a value **above the mean from the specified threshold** will be excluded (fail). | . Keep in mind that calculations are relative to the mean value. Example . If using Relative measure and Average mean method, the mean value will be the average of all values. The Exclude Below value is substracted from that average to find the minimum acceptable value (in relative terms), while the Exclude Above value is added to that average to find the maximum acceptable value. In other words, if the average relative mean is 0.5, using Exclude Below = 0.1 and Exclude Above = 0.1, values &lt; 0.4 and &gt; 0.6 will be excluded. Measure . | Method | Description | . | **Relative** | When using Relative measure, values are pre-processed in order to find the min/max, in order for the other calculation to work from **normalized** values.This is a bit clumsy to use, but also highly scalable if you’re doing sub-graph with no control over the input scale/dimensions. | . | **Absolute** | This measure uses the **raw** values.It’s very straighforward to use, but for obvious reason scales poorly; or through PCG overrides by forwarding params from outside. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-compare-mean.html#properties",
    "relUrl": "/doc-filter-ecosystem/filter-compare-mean.html#properties"
  },"330": {
    "doc": "🝖 Mean Value",
    "title": "Mean Methods",
    "content": "The mean method is used to find the reference threshold value that will be used by Exclude Below and Exclude Above. Below are an explanation on how each method works. For the example, let’s say we’re working on a dataset with 10 points that have a float attribute with the following values: . Absolute values = {10, 20, 30, 40, 50, 50, 55, 60, 1200, 500} Relative values = {0.0083, 0.016, 0.025, 0.03, 0.041, 0.041, 0.045, 0.05, 1, 0.41} . | Average | Median | Mode | Central | Fixed | . Average (Arithmetic mean) . Average mean is, well, the averaged value of all the values. Absolute Average Mean = 201.5 Relative Average Mean = 0.125 . Median . Median uses the median value of all the available lengths, sorted. Sorted Absolute values = [10, 20, 30, 40, 50, 50, 55, 60, 500, 1200] Absolute Median Mean = 50 // [.., 50, 50, ...] Sorted Relative values = [0.0083, 0.016, 0.025, 0.03, 0.041, 0.041, 0.045, 0.05, 0.41, 1] Relative Median Mean = 0.041 // [.., 0.041, 0.041, ...] . Mode (Shortest or Longest) . See Mode (statitics) on Wikipedia. If there are concurrent mode values (multiple buckets containing the same amount of values), the selected mode variant allows you to select either the mode with the smallest values, or the one with the largest out of the available conflicting modes. Absolute Mode Mean = 50 // [50, 50] is the largest bucket of equal values Absolute Mode Mean = 0.041 // [0.041, 0.041] is the largest bucket of equal values . In this is scenario, there is no conflicting frequencies. The Mode Tolerance property is used to fill frequency buckets based on equality with already sampled values. Central . Central uses the middle value between the smallest and largest values as mean. Absolute Central Mean = 605 // 10 + (1200-10)/2 Relative Central Mean = 0.504 // 0.0083 + (1-0.0083)/2 . Fixed . Fixed mean is basically user-defined mean. This is the way to go if you don’t care about statistics or if you have a consistent, metrics-driven setup. This is the least flexible but most performant approach as there is no need to compute any statistics prior to pruning. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-compare-mean.html#mean-methods",
    "relUrl": "/doc-filter-ecosystem/filter-compare-mean.html#mean-methods"
  },"331": {
    "doc": "🝖 Mean Value",
    "title": "Comparison modes",
    "content": ". | Comparison | Data | . | == | Strictly equal. | . | != | Strictly not equal. | . | &gt;= | Equal or greater. | . | &lt;= | Equal or smaller. | . | &gt; | Strictly greater. | . | &lt; | Strictly smaller. | . | ~= | Nearly equal. | . | !~= | Nearly not equal. | . Approximative comparison will reveal an additional parameter, dubbed Tolerance. This represents the size of acceptable approximation for the comparison to pass. For example, when checking if 0.5 ~= 0.4 with a tolerance of 0.1 will return true. Large tolerances can be a great, cheap way to achieve results akin to a “within range” comparison! . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-compare-mean.html#comparison-modes",
    "relUrl": "/doc-filter-ecosystem/filter-compare-mean.html#comparison-modes"
  },"332": {
    "doc": "🝖 Mean Value",
    "title": "🝖 Mean Value",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-compare-mean.html",
    "relUrl": "/doc-filter-ecosystem/filter-compare-mean.html"
  },"333": {
    "doc": "🝖 Modulo Comparison",
    "title": "🝖 Modulo Comparison",
    "content": "PCGEx | Filter : Modulo Compare Compares the modulo of two attributes against a third operand, with configurable comparisons and tolerance. - . FilterA single filter definition . Table of content . | Properties . | Comparison modes | . | . The Modulo Filter compares the modulo of two values against a third. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-compare-modulo.html#modulo-comparison",
    "relUrl": "/doc-filter-ecosystem/filter-compare-modulo.html#modulo-comparison"
  },"334": {
    "doc": "🝖 Modulo Comparison",
    "title": "Properties",
    "content": ". | Property | Description | . | **Operand A** | |   | . | Operand A | The first attribute of the comparison. | . | **Operand B** | |   | . | Operand B Source | Type of operand B. Can be a per-point Attribute, or an easily overridable Constant. | . | Compare B *(Constant or Attribute)* | Operand B used for modulo. | . | **Comparison** | |   | . | Comparison | How to compare the two A % B against C.*See [Numeric comparisons](/PCGExtendedToolkit/doc-general/general-comparisons.html#numeric-comparisons).* | . | **Operand C** | |   | . | Compare Against | Type of operand C. Can be a per-point Attribute, or an easily overridable Constant. | . | Operand C | Attribute that contains the per-point operand B value. | . | Operand C *(Constant or Attribute)* | Operand C. *This value will be tested against the modulo’ result.* | . | Tolerance | Equality tolerance for near-value comparisons. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-compare-modulo.html#properties",
    "relUrl": "/doc-filter-ecosystem/filter-compare-modulo.html#properties"
  },"335": {
    "doc": "🝖 Modulo Comparison",
    "title": "Comparison modes",
    "content": ". | Comparison | Data | . | == | Strictly equal. | . | != | Strictly not equal. | . | &gt;= | Equal or greater. | . | &lt;= | Equal or smaller. | . | &gt; | Strictly greater. | . | &lt; | Strictly smaller. | . | ~= | Nearly equal. | . | !~= | Nearly not equal. | . Approximative comparison will reveal an additional parameter, dubbed Tolerance. This represents the size of acceptable approximation for the comparison to pass. For example, when checking if 0.5 ~= 0.4 with a tolerance of 0.1 will return true. Large tolerances can be a great, cheap way to achieve results akin to a “within range” comparison! . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-compare-modulo.html#comparison-modes",
    "relUrl": "/doc-filter-ecosystem/filter-compare-modulo.html#comparison-modes"
  },"336": {
    "doc": "🝖 Modulo Comparison",
    "title": "🝖 Modulo Comparison",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-compare-modulo.html",
    "relUrl": "/doc-filter-ecosystem/filter-compare-modulo.html"
  },"337": {
    "doc": "🝖 Compare Nearest (Numeric)",
    "title": "🝖 Compare Nearest (Numeric)",
    "content": "PCGEx | Filter : Compare Nearest (Numeric) The **Numeric Comparison Filter compares the arithmetic value of an attribute against the closest point from another dataset.** . - . TargetsTargets that will be checked for nearest match. FilterA single filter definition . Table of content . | Properties . | Comparison modes | . | . The Compare Nearest (Numeric) compares two attributes against each other; the second operand being a different attribute on another set of point, with comparison being based on distance. Note that each value is converted to a double under the hood, so you can’t compare multi-component value with it. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-compare-nearest-numeric.html#compare-nearest-numeric",
    "relUrl": "/doc-filter-ecosystem/filter-compare-nearest-numeric.html#compare-nearest-numeric"
  },"338": {
    "doc": "🝖 Compare Nearest (Numeric)",
    "title": "Properties",
    "content": ". | Property | Description | . | **Operand A** | |   | . | Operand A | The first attribute of the comparison.This value is read on the targets. | . | **Comparison** | |   | . | Comparison | How to compare A against B.*See [Numeric comparisons](/PCGExtendedToolkit/doc-general/general-comparisons.html#numeric-comparisons).* | . | **Operand B** | |   | . | Compare Against | Type of operand B. Can be a per-point Attribute, or an easily overridable Constant. | . | Operand B *(Constant or Attribute)* | Operand B, or second value to compare to the first. | . | Tolerance | Equality tolerance for near-value comparisons. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-compare-nearest-numeric.html#properties",
    "relUrl": "/doc-filter-ecosystem/filter-compare-nearest-numeric.html#properties"
  },"339": {
    "doc": "🝖 Compare Nearest (Numeric)",
    "title": "Comparison modes",
    "content": ". | Comparison | Data | . | == | Strictly equal. | . | != | Strictly not equal. | . | &gt;= | Equal or greater. | . | &lt;= | Equal or smaller. | . | &gt; | Strictly greater. | . | &lt; | Strictly smaller. | . | ~= | Nearly equal. | . | !~= | Nearly not equal. | . Approximative comparison will reveal an additional parameter, dubbed Tolerance. This represents the size of acceptable approximation for the comparison to pass. For example, when checking if 0.5 ~= 0.4 with a tolerance of 0.1 will return true. Large tolerances can be a great, cheap way to achieve results akin to a “within range” comparison! . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-compare-nearest-numeric.html#comparison-modes",
    "relUrl": "/doc-filter-ecosystem/filter-compare-nearest-numeric.html#comparison-modes"
  },"340": {
    "doc": "🝖 Compare Nearest (Numeric)",
    "title": "🝖 Compare Nearest (Numeric)",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-compare-nearest-numeric.html",
    "relUrl": "/doc-filter-ecosystem/filter-compare-nearest-numeric.html"
  },"341": {
    "doc": "🝖 Self Compare (Numeric)",
    "title": "🝖 Self Compare (Numeric)",
    "content": "PCGEx | Filter : Self Compare (Numeric) Compares the numeric value at one index against the same attribute at another index. - . FilterA single filter definition . Table of content . | Properties . | Index Safety | Comparison modes | . | . The Self Compare (Numeric) compares the point’ value of a single attribute against that same attribute at another index. Note that each value is converted to a double under the hood, so you can’t compare multi-component value with it. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-compare-numeric-self.html#self-compare-numeric",
    "relUrl": "/doc-filter-ecosystem/filter-compare-numeric-self.html#self-compare-numeric"
  },"342": {
    "doc": "🝖 Self Compare (Numeric)",
    "title": "Properties",
    "content": ". | Property | Description | . | **Operand A** | |   | . | Operand A | The attribute to read compared values from. | . | **Comparison** | |   | . | Comparison | How to compare A against B.*See [Numeric comparisons](/PCGExtendedToolkit/doc-general/general-comparisons.html#numeric-comparisons).* | . | Tolerance | Equality tolerance for near-value comparisons. | . | **Index** | |   | . | Index Mode | Choose how to process the Index value as either a Pick (specific index), or an Offset applied to the currently tested point’ index. | . | Compare Against | Type of values for the Index. Can be a per-point Attribute, or an easily overridable Constant. | . | Index *(Constant or Attribute)* | Value to use as Index/Offset. | . Index Safety . The index safety property controls how invalid/out of bounds input values are handled. | Safety method |   | . | Ignore | Invalid indices will be ignored and won’t be processed further. | . | Tile | Index is tiled (wrapped around) the context’ valid min/max range. | . | Clamp | Index is clamped between the context’ valid min/max range. | . | Yoyo | Index bounces back and forth between the context’ valid min/max range. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-compare-numeric-self.html#properties",
    "relUrl": "/doc-filter-ecosystem/filter-compare-numeric-self.html#properties"
  },"343": {
    "doc": "🝖 Self Compare (Numeric)",
    "title": "Comparison modes",
    "content": ". | Comparison | Data | . | == | Strictly equal. | . | != | Strictly not equal. | . | &gt;= | Equal or greater. | . | &lt;= | Equal or smaller. | . | &gt; | Strictly greater. | . | &lt; | Strictly smaller. | . | ~= | Nearly equal. | . | !~= | Nearly not equal. | . Approximative comparison will reveal an additional parameter, dubbed Tolerance. This represents the size of acceptable approximation for the comparison to pass. For example, when checking if 0.5 ~= 0.4 with a tolerance of 0.1 will return true. Large tolerances can be a great, cheap way to achieve results akin to a “within range” comparison! . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-compare-numeric-self.html#comparison-modes",
    "relUrl": "/doc-filter-ecosystem/filter-compare-numeric-self.html#comparison-modes"
  },"344": {
    "doc": "🝖 Self Compare (Numeric)",
    "title": "🝖 Self Compare (Numeric)",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-compare-numeric-self.html",
    "relUrl": "/doc-filter-ecosystem/filter-compare-numeric-self.html"
  },"345": {
    "doc": "🝖 Compare (Numeric)",
    "title": "🝖 Compare (Numeric)",
    "content": "PCGEx | Filter : Compare (Numeric) The **Numeric Comparison Filter compares the arithmetic value of two attributes** . - . FilterA single filter definition . Table of content . | Properties . | Comparison modes | . | . The Compare (Numeric) compares two attributes against each other. Note that each value is converted to a double under the hood, so you can’t compare multi-component value with it. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-compare-numeric.html#compare-numeric",
    "relUrl": "/doc-filter-ecosystem/filter-compare-numeric.html#compare-numeric"
  },"346": {
    "doc": "🝖 Compare (Numeric)",
    "title": "Properties",
    "content": ". | Property | Description | . | **Operand A** | |   | . | Operand A | The first attribute of the comparison. | . | **Comparison** | |   | . | Comparison | How to compare A against B.*See [Numeric comparisons](/PCGExtendedToolkit/doc-general/general-comparisons.html#numeric-comparisons).* | . | **Operand B** | |   | . | Compare Against | Type of operand B. Can be a per-point Attribute, or an easily overridable Constant. | . | Operand B *(Constant or Attribute)* | Operand B, or second value to compare to the first. | . | Tolerance | Equality tolerance for near-value comparisons. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-compare-numeric.html#properties",
    "relUrl": "/doc-filter-ecosystem/filter-compare-numeric.html#properties"
  },"347": {
    "doc": "🝖 Compare (Numeric)",
    "title": "Comparison modes",
    "content": ". | Comparison | Data | . | == | Strictly equal. | . | != | Strictly not equal. | . | &gt;= | Equal or greater. | . | &lt;= | Equal or smaller. | . | &gt; | Strictly greater. | . | &lt; | Strictly smaller. | . | ~= | Nearly equal. | . | !~= | Nearly not equal. | . Approximative comparison will reveal an additional parameter, dubbed Tolerance. This represents the size of acceptable approximation for the comparison to pass. For example, when checking if 0.5 ~= 0.4 with a tolerance of 0.1 will return true. Large tolerances can be a great, cheap way to achieve results akin to a “within range” comparison! . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-compare-numeric.html#comparison-modes",
    "relUrl": "/doc-filter-ecosystem/filter-compare-numeric.html#comparison-modes"
  },"348": {
    "doc": "🝖 Compare (Numeric)",
    "title": "🝖 Compare (Numeric)",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-compare-numeric.html",
    "relUrl": "/doc-filter-ecosystem/filter-compare-numeric.html"
  },"349": {
    "doc": "🝖 Self Compare (String)",
    "title": "🝖 Self Compare (String)",
    "content": "PCGEx | Filter : Self Compare (String) Compares the string value at one index against the same attribute at another index. - . FilterA single filter definition . Table of content . | Properties . | Index Safety | Comparison modes | . | . The Self Compare (String) compares the point’ value of a single attribute against that same attribute at another index. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-compare-string-self.html#self-compare-string",
    "relUrl": "/doc-filter-ecosystem/filter-compare-string-self.html#self-compare-string"
  },"350": {
    "doc": "🝖 Self Compare (String)",
    "title": "Properties",
    "content": ". | Property | Description | . | **Operand A** | |   | . | Operand A | The attribute to read compared values from. | . | **Comparison** | |   | . | Comparison | How to compare A against B.*See [Numeric comparisons](/PCGExtendedToolkit/doc-general/general-comparisons.html#string-comparisons).* | . | Tolerance | Equality tolerance for near-value comparisons. | . | **Index** | |   | . | Index Mode | Choose how to process the Index value as either a Pick (specific index), or an Offset applied to the currently tested point’ index. | . | Compare Against | Type of values for the Index. Can be a per-point Attribute, or an easily overridable Constant. | . | Index *(Constant or Attribute)* | Value to use as Index/Offset. | . Index Safety . The index safety property controls how invalid/out of bounds input values are handled. | Safety method |   | . | Ignore | Invalid indices will be ignored and won’t be processed further. | . | Tile | Index is tiled (wrapped around) the context’ valid min/max range. | . | Clamp | Index is clamped between the context’ valid min/max range. | . | Yoyo | Index bounces back and forth between the context’ valid min/max range. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-compare-string-self.html#properties",
    "relUrl": "/doc-filter-ecosystem/filter-compare-string-self.html#properties"
  },"351": {
    "doc": "🝖 Self Compare (String)",
    "title": "Comparison modes",
    "content": ". | Comparison | Data | . | == | Strictly equal. | . | != | Strictly not equal. | . | == (Length) | String lengths are strictly equal. | . | != (Length) | String lengths are strictly not equal. | . | &gt;= (Length) | String length is equal or greater. | . | &lt;= (Length) | String lengths are is equal or smaller. | . | &gt; (Length) | String lengths is strictly greater. | . | &lt; (Length) | String lengths is Strictly smaller. | . | &gt; (Locale) | String locale is strictly greater.In alphabetical order. (Z is greater than A) | . | &lt; (Locale) | String locale is strictly smaller.In alphabetical order. (A is smaller than Z) | . | Contains | Check if string is contained in another one.Useful if you have solid naming conventions. | . | Starts With | Check if the string starts with another one.Useful for prefixes. | . | Ends With | Check if the string ends with another one.Useful for suffixes. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-compare-string-self.html#comparison-modes",
    "relUrl": "/doc-filter-ecosystem/filter-compare-string-self.html#comparison-modes"
  },"352": {
    "doc": "🝖 Self Compare (String)",
    "title": "🝖 Self Compare (String)",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-compare-string-self.html",
    "relUrl": "/doc-filter-ecosystem/filter-compare-string-self.html"
  },"353": {
    "doc": "🝖 Compare (String)",
    "title": "🝖 Compare (String)",
    "content": "PCGEx | Filter : Compare (String) Compares two string-like attributes against each other. - . FilterA single filter definition . Table of content . | Properties . | Comparison modes | . | . The Compare (String) compares two string-like attributes against each other. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-compare-string.html#compare-string",
    "relUrl": "/doc-filter-ecosystem/filter-compare-string.html#compare-string"
  },"354": {
    "doc": "🝖 Compare (String)",
    "title": "Properties",
    "content": ". | Property | Description | . | **Operand A** | |   | . | Operand A | The first attribute of the comparison. | . | **Comparison** | |   | . | Comparison | How to compare A against B.*See [String comparisons](/PCGExtendedToolkit/doc-general/general-comparisons.html#string-comparisons).* | . | **Operand B** | |   | . | Compare Against | Type of operand B. Can be a per-point Attribute, or an easily overridable Constant. | . | Operand B *(Constant or Attribute)* | Operand B’ value. | . | Tolerance | Equality tolerance for near-value comparisons. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-compare-string.html#properties",
    "relUrl": "/doc-filter-ecosystem/filter-compare-string.html#properties"
  },"355": {
    "doc": "🝖 Compare (String)",
    "title": "Comparison modes",
    "content": ". | Comparison | Data | . | == | Strictly equal. | . | != | Strictly not equal. | . | == (Length) | String lengths are strictly equal. | . | != (Length) | String lengths are strictly not equal. | . | &gt;= (Length) | String length is equal or greater. | . | &lt;= (Length) | String lengths are is equal or smaller. | . | &gt; (Length) | String lengths is strictly greater. | . | &lt; (Length) | String lengths is Strictly smaller. | . | &gt; (Locale) | String locale is strictly greater.In alphabetical order. (Z is greater than A) | . | &lt; (Locale) | String locale is strictly smaller.In alphabetical order. (A is smaller than Z) | . | Contains | Check if string is contained in another one.Useful if you have solid naming conventions. | . | Starts With | Check if the string starts with another one.Useful for prefixes. | . | Ends With | Check if the string ends with another one.Useful for suffixes. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-compare-string.html#comparison-modes",
    "relUrl": "/doc-filter-ecosystem/filter-compare-string.html#comparison-modes"
  },"356": {
    "doc": "🝖 Compare (String)",
    "title": "🝖 Compare (String)",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-compare-string.html",
    "relUrl": "/doc-filter-ecosystem/filter-compare-string.html"
  },"357": {
    "doc": "🝖 Distance",
    "title": "🝖 Distance",
    "content": "PCGEx | Filter : Distance Compare distance to closest target against a constant or attribute. - . TargetsSet of points which bounds will be checked against. FilterA single filter definition . Table of content . | Properties | . The Distance Filter compares the distance to the closest target against a constant or attribute. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-distance.html#distance",
    "relUrl": "/doc-filter-ecosystem/filter-distance.html#distance"
  },"358": {
    "doc": "🝖 Distance",
    "title": "Properties",
    "content": ". TBD . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-distance.html#properties",
    "relUrl": "/doc-filter-ecosystem/filter-distance.html#properties"
  },"359": {
    "doc": "🝖 Distance",
    "title": "🝖 Distance",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-distance.html",
    "relUrl": "/doc-filter-ecosystem/filter-distance.html"
  },"360": {
    "doc": "🝖 Edge Direction (Edge)",
    "title": "🝖 Edge Direction (Edge)",
    "content": "PCGEx | Cluster Filter : Edge Direction (Edge) Check if the edge direction is within a given range. The Edge Direction filter compares the direction of of the edge using a dot product. Edge FilterA single cluster filter definition . Table of content . | Properties . | Direction Settings | Comparison Quality . | Dot Comparison Details | Hash Comparison Details | . | . | . WIP . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/cluster-filters/filter-edge-edge-direction.html#edge-direction-edge",
    "relUrl": "/doc-clusters/cluster-filters/filter-edge-edge-direction.html#edge-direction-edge"
  },"361": {
    "doc": "🝖 Edge Direction (Edge)",
    "title": "Properties",
    "content": ". | Property | Description | . | : **Settings (Operand A)** | |   | . | : Direction Settings | Used to determine which edge endpoint is either the start or end.*See below.* | . | Comparison Quality | Defines the method used for comparison.- Dot is precise *(easily returns false)*- Hash method is approximative *(easily returns true)* | . | : **Operand B** | |   | . | Compare Against | Type of operand B. Can be a per-edge point Attribute, or an easily overridable Constant. | . | DirectionFVector | Attribute to read the direction vector to compare the edge direction against. | . | Direction Constant | Constant direction vector to compare the edge direction against. | . | Transform Direction | If enabled, the direction to compare will be adjusted by the current edge point’ transform.*If disabled, the direction is in world space.* | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/cluster-filters/filter-edge-edge-direction.html#properties",
    "relUrl": "/doc-clusters/cluster-filters/filter-edge-edge-direction.html#properties"
  },"362": {
    "doc": "🝖 Edge Direction (Edge)",
    "title": "Direction Settings",
    "content": ". | Property | Description | . | Direction Method | Defines which endpoints “order” will be used to define the direction reference for the ouputs. | . | Direction Choice | Further refines the direction method, based on the above selection.-Smallest to Greatest will order direction reference metrics in ascending order.-Greatest to Smallest will order direction reference metrics in descending order.Really it’s how the endpoint reference value is sorted, but I couldn’t call that Direction’ direction. | . | Dir Source Attribute | The attribute that will be used by the selected method. | . If the selected method is Edge Dot Attribute, the attribute will be read from Edges as an FVector direction. Method . The Direction method, combined with the Direction Choice determine which endpoint should be considered the Start &amp; End of the edge. The “direction” of the edge used for computing outputs &amp; properties is the safe normal going from the start to the end of the edge. | Mode | Description | . | Endpoints order | Will use the endpoints’ as ordered during cluster construction. | . | Endpoints indices | Will use the endpoints’ point index. | . | Endpoints Sort | Enables the use of any number of Sorting Rules to determine direction.This method, while more expensive, is the most efficient. | . | Edge Dot Attribute | Will use an attribute (converted to an FVector) from the edges’ and do a Dot Product with the edge’ direction.This method, combined with Direction Choice offers full control over direction. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/cluster-filters/filter-edge-edge-direction.html#direction-settings",
    "relUrl": "/doc-clusters/cluster-filters/filter-edge-edge-direction.html#direction-settings"
  },"363": {
    "doc": "🝖 Edge Direction (Edge)",
    "title": "Comparison Quality",
    "content": ". Dot Comparison Details . Only if Dot method is selected . | Property | Description | . | Comparison | Which comparison to use.See Numeric comparisons. | . | Dot Units | Let you choose to work either with normalized dot range (-1 / 1) or degrees.This affects how the attribute Dot value will be interpreted as well. | . | Unsigned Dot | When enabled, the comparison will occur against an absolute dot value.This is especially useful when testing against undirected lines. | . | Dot Value | The type of value used for this probe’ search radius; either a Constant value or fetched from anAttribute | . | (Dot or Degrees) Constant | Constant to compare against. | . | (Dot or Degrees) Attribute | Constant to compare against. | . | (Dot or Degrees) Tolerance | Comparison tolerance, if the selected comparison is an approximative (~) one. | . Hash Comparison Details . Only if Hash method is selected . | Property | Description | . | Hash Tolerance Value | Where to read the tolerance from. Can be a per-point Attribute, or an easily overridable Constant. | . | Hash Tolerance Attribute | Attribute to read tolerance from. | . | Hash Tolerance Constant | Constant hash tolerance value. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/cluster-filters/filter-edge-edge-direction.html#comparison-quality",
    "relUrl": "/doc-clusters/cluster-filters/filter-edge-edge-direction.html#comparison-quality"
  },"364": {
    "doc": "🝖 Edge Direction (Edge)",
    "title": "🝖 Edge Direction (Edge)",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/cluster-filters/filter-edge-edge-direction.html",
    "relUrl": "/doc-clusters/cluster-filters/filter-edge-edge-direction.html"
  },"365": {
    "doc": "🝖 Endpoints Compare (Numeric)",
    "title": "🝖 Endpoints Compare (Numeric)",
    "content": "PCGEx | Cluster Filter : Endpoints Compare (Numeric) Compare the value of an attribute on each of the edge endpoint. The Endpoint Comparison filter performs a numeric comparison of the values of an attribute on each endpoint, against each other. Edge FilterA single cluster filter definition . Related . | Refine | 🝖 Endpoints Compare (String) | . Table of content . | Properties | Example | . This filter takes the start &amp; end points of an edge and compare the value of a single attribute on these points. It’s most useful when used with the Refine node to either keep or remove edge that connect to different areas. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/cluster-filters/filter-edge-endpoints-compare-numeric.html#endpoints-compare-numeric",
    "relUrl": "/doc-clusters/cluster-filters/filter-edge-endpoints-compare-numeric.html#endpoints-compare-numeric"
  },"366": {
    "doc": "🝖 Endpoints Compare (Numeric)",
    "title": "Properties",
    "content": ". | Property | Description | . | :**Settings** | |   | . | Attribute | Attribute to read on edges’ endpoints | . | Comparison | How to compare each endpoint value against the other.*See [Numeric comparisons](/PCGExtendedToolkit/doc-general/general-comparisons.html#numeric-comparisons).* | . | Tolerance | Equality tolerance for near-value comparisons. | . | Invert | If enabled, invert the result of the filter. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/cluster-filters/filter-edge-endpoints-compare-numeric.html#properties",
    "relUrl": "/doc-clusters/cluster-filters/filter-edge-endpoints-compare-numeric.html#properties"
  },"367": {
    "doc": "🝖 Endpoints Compare (Numeric)",
    "title": "Example",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/cluster-filters/filter-edge-endpoints-compare-numeric.html#example",
    "relUrl": "/doc-clusters/cluster-filters/filter-edge-endpoints-compare-numeric.html#example"
  },"368": {
    "doc": "🝖 Endpoints Compare (Numeric)",
    "title": "🝖 Endpoints Compare (Numeric)",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/cluster-filters/filter-edge-endpoints-compare-numeric.html",
    "relUrl": "/doc-clusters/cluster-filters/filter-edge-endpoints-compare-numeric.html"
  },"369": {
    "doc": "🝖 Endpoints Compare (String)",
    "title": "🝖 Endpoints Compare (String)",
    "content": "PCGEx | Cluster Filter : Endpoints Compare (String) Compare the value of an attribute on each of the edge endpoint. The Endpoint Comparison filter performs string comparison of the values of an attribute on each endpoint, against each other. Edge FilterA single cluster filter definition . Related . | Refine | 🝖 Endpoints Compare (Numeric) | . Table of content . | Properties | . This filter takes the start &amp; end points of an edge and compare the value of a single attribute on these points. It’s most useful when used with the Refine node to either keep or remove edge that connect to different areas. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/cluster-filters/filter-edge-endpoints-compare-string.html#endpoints-compare-string",
    "relUrl": "/doc-clusters/cluster-filters/filter-edge-endpoints-compare-string.html#endpoints-compare-string"
  },"370": {
    "doc": "🝖 Endpoints Compare (String)",
    "title": "Properties",
    "content": ". | Property | Description | . | :**Settings** | |   | . | Attribute | Attribute to read on edges’ endpoints | . | Comparison | How to compare each endpoint value against the other.*See [String comparisons](/PCGExtendedToolkit/doc-general/general-comparisons.html#string-comparisons).* | . | Tolerance | Equality tolerance for near-value comparisons. | . | Invert | If enabled, invert the result of the filter. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/cluster-filters/filter-edge-endpoints-compare-string.html#properties",
    "relUrl": "/doc-clusters/cluster-filters/filter-edge-endpoints-compare-string.html#properties"
  },"371": {
    "doc": "🝖 Endpoints Compare (String)",
    "title": "🝖 Endpoints Compare (String)",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/cluster-filters/filter-edge-endpoints-compare-string.html",
    "relUrl": "/doc-clusters/cluster-filters/filter-edge-endpoints-compare-string.html"
  },"372": {
    "doc": "🝖 Neighbors Count (Edge)",
    "title": "🝖 Neighbors Count (Edge)",
    "content": "PCGEx | Cluster Filter : Neighbors Count (Edge) Check a node’ neighbors count . The Neighbors Count filter compares the number of neighbors of each endpoints against a specified threhsold. Edge FilterA single cluster filter definition . Table of content . | Properties . | Mode | . | . This filter takes the start &amp; end points of an edge and compares the number of connections for each endpoint against a given threshold. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/cluster-filters/filter-edge-neighbors-count.html#neighbors-count-edge",
    "relUrl": "/doc-clusters/cluster-filters/filter-edge-neighbors-count.html#neighbors-count-edge"
  },"373": {
    "doc": "🝖 Neighbors Count (Edge)",
    "title": "Properties",
    "content": ". | Property | Description | . | :**Settings** | |   | . | Threshold Input | Type of threshold value. Can be a per-edge point Attribute, or an easily overridable Constant. | . | Threshold Constant | Constant threshold value. | . | Threshold Attributeint32 | Attribute to read the threshold to compare the number of connections against. | . | Mode | Define how the number of endpoint’ connections should be aggregated (or not) before the comparison is processed. | . | Comparison | How the number of neighbors should be compared against the threshold.*See [Numeric comparisons](/PCGExtendedToolkit/doc-general/general-comparisons.html#numeric-comparisons).* | . | Tolerance | Equality tolerance for near-value comparisons. | . | Invert | If enabled, invert the result of the filter. | . Mode . | : Handling | |   | . | &lt;span class=\"ebit\"&gt;Sum&lt;/span&gt; | The sum of adjacencies will be compared against the specified threshold. | . | &lt;span class=\"ebit\"&gt;Any&lt;/span&gt; | At least one endpoint adjacency count must pass the comparison against the specified threshold. | . | &lt;span class=\"ebit\"&gt;Both&lt;/span&gt; | Both endpoint adjacency count must individually pass the comparison against the specified threshold. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/cluster-filters/filter-edge-neighbors-count.html#properties",
    "relUrl": "/doc-clusters/cluster-filters/filter-edge-neighbors-count.html#properties"
  },"374": {
    "doc": "🝖 Neighbors Count (Edge)",
    "title": "🝖 Neighbors Count (Edge)",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/cluster-filters/filter-edge-neighbors-count.html",
    "relUrl": "/doc-clusters/cluster-filters/filter-edge-neighbors-count.html"
  },"375": {
    "doc": "🝖 AND / OR (Group)",
    "title": "🝖 AND / OR (Group)",
    "content": "PCGEx | Filter Group Group multiple filters to set up complex AND/OR branches. - . FilterA single filter definition . Table of content . | Properties | . The Group Filter node allows grouping &amp; chaining filter conditions to create complex conditional branching; they behave like the BP AND (boolean) and OR (boolean) nodes. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-group.html#and--or-group",
    "relUrl": "/doc-filter-ecosystem/filter-group.html#and--or-group"
  },"376": {
    "doc": "🝖 AND / OR (Group)",
    "title": "Properties",
    "content": ". | Property | Description | . | **Settings** | |   | . | Mode | Defines how the group handle its filters. | . | Invert | If enabled, inverts the result of the group. | . | : Mode | |   | . | &lt;span class=\"ebit\"&gt;AND&lt;/span&gt; | Requires all the input filters to pass in order for the group to pass.*Prioritize filters that are the most likely to fail in order to exit early.* | . | &lt;span class=\"ebit\"&gt;OR&lt;/span&gt; | Only need a single input filter to pass in order for the group to pass.*Prioritize filters that are the most likely to pass in order to exit early.* | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-group.html#properties",
    "relUrl": "/doc-filter-ecosystem/filter-group.html#properties"
  },"377": {
    "doc": "🝖 AND / OR (Group)",
    "title": "🝖 AND / OR (Group)",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-group.html",
    "relUrl": "/doc-filter-ecosystem/filter-group.html"
  },"378": {
    "doc": "🝖 Adjacency (Node)",
    "title": "🝖 Adjacency (Node)",
    "content": "PCGEx | Cluster Filter : Adjacency (Node) Check if adjacent node meet specific conditions . The Adjacency filter performs numeric comparisons on each connection of a Vtx, allowing precise control over success criteria based on the number of passed comparisons, offering the flexibility to test either discrete or relative connections. Node FilterA single cluster filter definition . Table of content . | Properties | . The adjacency filter does a simple numeric comparison on each individual connections of a Vtx, and offer fine grained control over what qualifies as a “success”, based on how many connections passed the comparison or not. What makes it equally useful and tricky to set-up is its ability to test against either a discrete number of connection, or relative ones. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/cluster-filters/filter-node-adjacency.html#adjacency-node",
    "relUrl": "/doc-clusters/cluster-filters/filter-node-adjacency.html#adjacency-node"
  },"379": {
    "doc": "🝖 Adjacency (Node)",
    "title": "Properties",
    "content": ". | Property | Description | . | :**Settings** : |   | . | Priority | Defines the order in which this flag operation will be processed.*See Flag Nodes* | . | Adjacency Settings | Defines how to deal with the number of adjacent nodes *as a criteria to the filter success*.*Covered in more depth later in this page* | . | Compare Against | TBD | . | Operand A Constant | TBD | . | Operand A Attribute | TBD | . | Comparison | How to compare Operand A against Operand B*See [Numeric comparisons](/PCGExtendedToolkit/doc-general/general-comparisons.html#numeric-comparisons).* | . | Operand B Source | TBD | . | Operand B (Neighbor) | TBD | . | Tolerance | Equality tolerance for near-value comparisons. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/cluster-filters/filter-node-adjacency.html#properties",
    "relUrl": "/doc-clusters/cluster-filters/filter-node-adjacency.html#properties"
  },"380": {
    "doc": "🝖 Adjacency (Node)",
    "title": "Adjacency",
    "content": "| Property | Description | . | :Settings : |   | . | Mode | The mode lets you choose how to set the flags value, as a user.- Direct is probably the most useful, as it can be set using an override pin.- Individual lets you use an array where you can set individual bits by their position (index), and whether they’re true or false.- Composite lets you set individual bits using dropdowns. | . Mode : All . This mode consolidate all the connections’ values into a single one to test against. | : Consolidation : |   | . | Individual | Test individual neighbors one by one | . | Individual | Test against averaged value of all neighbors | . | Individual | Test against the Min value of all neighbors | . | Individual | Test against the Max value of all neighbors | . | Individual | Test against the Sum value of all neighbors | . DOC TBD . Mode : Some . This mode test individual connections, but only some of them are required to pass for the entire filter to be considered a success. How that “some” is defined relies on a comparison against a threshold: how many neighbors pass the test vs. how many neighbors there are. | : Threshold Settings : |   | . | Threshold Comparison | TBD | . | Threshold Type | TBD | . | Threshold Source | TBD | . | Discrete Threshold | TBD | . | Relative Threshold | TBD | . | Threshold Attribute | TBD | . | Threshold Source | TBD | . | Rounding | TBD | . | Threshold Tolerance | TBD | . DOC TBD . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/cluster-filters/filter-node-adjacency.html#adjacency",
    "relUrl": "/doc-clusters/cluster-filters/filter-node-adjacency.html#adjacency"
  },"381": {
    "doc": "🝖 Adjacency (Node)",
    "title": "🝖 Adjacency (Node)",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/cluster-filters/filter-node-adjacency.html",
    "relUrl": "/doc-clusters/cluster-filters/filter-node-adjacency.html"
  },"382": {
    "doc": "🝖 Edge Direction (Node)",
    "title": "🝖 Edge Direction (Node)",
    "content": "PCGEx | Cluster Filter : Edge Direction (Node) Check if adjacent node meet specific conditions . The Edge Direction filter compares the direction of connections using a dot product, providing precise control over how many directions meet the set conditions, allowing tests against both discrete and relative number of connections. Node FilterA single cluster filter definition . Table of content . | Properties | Properties . | Comparison Quality . | Dot Comparison Details | Hash Comparison Details | . | . | . The Edge Direction filter does a simple dot product comparison on each individual connections’ direction, and offer fine grained control over what qualifies as a “success”, based on how many directions passed the comparison or not. What makes it equally useful and tricky to set-up is its ability to test against either a discrete number of connection, or relative ones. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/cluster-filters/filter-node-edge-direction.html#edge-direction-node",
    "relUrl": "/doc-clusters/cluster-filters/filter-node-edge-direction.html#edge-direction-node"
  },"383": {
    "doc": "🝖 Edge Direction (Node)",
    "title": "Properties",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/cluster-filters/filter-node-edge-direction.html#properties",
    "relUrl": "/doc-clusters/cluster-filters/filter-node-edge-direction.html#properties"
  },"384": {
    "doc": "🝖 Edge Direction (Node)",
    "title": "Properties",
    "content": "| Property | Description | . | :**Settings** : |   | . | Priority | Defines the order in which this flag operation will be processed.*See Flag Nodes* | . | Comparison Quality | Defines the method used for comparison.- Dot is precise *(easily returns false)*- Hash method is approximative *(easily returns true)* | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/cluster-filters/filter-node-edge-direction.html#properties-1",
    "relUrl": "/doc-clusters/cluster-filters/filter-node-edge-direction.html#properties-1"
  },"385": {
    "doc": "🝖 Edge Direction (Node)",
    "title": "Adjacency",
    "content": "| Property | Description | . | :Settings : |   | . | Mode | The mode lets you choose how to set the flags value, as a user.- Direct is probably the most useful, as it can be set using an override pin.- Individual lets you use an array where you can set individual bits by their position (index), and whether they’re true or false.- Composite lets you set individual bits using dropdowns. | . Mode : All . This mode consolidate all the connections’ values into a single one to test against. | : Consolidation : |   | . | Individual | Test individual neighbors one by one | . | Individual | Test against averaged value of all neighbors | . | Individual | Test against the Min value of all neighbors | . | Individual | Test against the Max value of all neighbors | . | Individual | Test against the Sum value of all neighbors | . DOC TBD . Mode : Some . This mode test individual connections, but only some of them are required to pass for the entire filter to be considered a success. How that “some” is defined relies on a comparison against a threshold: how many neighbors pass the test vs. how many neighbors there are. | : Threshold Settings : |   | . | Threshold Comparison | TBD | . | Threshold Type | TBD | . | Threshold Source | TBD | . | Discrete Threshold | TBD | . | Relative Threshold | TBD | . | Threshold Attribute | TBD | . | Threshold Source | TBD | . | Rounding | TBD | . | Threshold Tolerance | TBD | . DOC TBD . | Direction Order | TBD | . | Compare Against | TBD | . | Direction Constant | TBD | . | Direction Attribute | TBD | . | Comparison | How to compare Operand A against Operand B*See Flag Nodes* | . | Transform Direction | TBD | . | Operand B (Neighbor) | TBD | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/cluster-filters/filter-node-edge-direction.html#adjacency",
    "relUrl": "/doc-clusters/cluster-filters/filter-node-edge-direction.html#adjacency"
  },"386": {
    "doc": "🝖 Edge Direction (Node)",
    "title": "Comparison Quality",
    "content": ". Dot Comparison Details . Only if Dot method is selected . | Property | Description | . | Comparison | Which comparison to use.See Numeric comparisons. | . | Dot Units | Let you choose to work either with normalized dot range (-1 / 1) or degrees.This affects how the attribute Dot value will be interpreted as well. | . | Unsigned Dot | When enabled, the comparison will occur against an absolute dot value.This is especially useful when testing against undirected lines. | . | Dot Value | The type of value used for this probe’ search radius; either a Constant value or fetched from anAttribute | . | (Dot or Degrees) Constant | Constant to compare against. | . | (Dot or Degrees) Attribute | Constant to compare against. | . | (Dot or Degrees) Tolerance | Comparison tolerance, if the selected comparison is an approximative (~) one. | . Hash Comparison Details . Only if Hash method is selected . | Property | Description | . | Hash Tolerance Value | Where to read the tolerance from. Can be a per-point Attribute, or an easily overridable Constant. | . | Hash Tolerance Attribute | Attribute to read tolerance from. | . | Hash Tolerance Constant | Constant hash tolerance value. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/cluster-filters/filter-node-edge-direction.html#comparison-quality",
    "relUrl": "/doc-clusters/cluster-filters/filter-node-edge-direction.html#comparison-quality"
  },"387": {
    "doc": "🝖 Edge Direction (Node)",
    "title": "🝖 Edge Direction (Node)",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/cluster-filters/filter-node-edge-direction.html",
    "relUrl": "/doc-clusters/cluster-filters/filter-node-edge-direction.html"
  },"388": {
    "doc": "🝖 Neighbors Count (Node)",
    "title": "🝖 Neighbors Count (Node)",
    "content": "PCGEx | Cluster Filter : Neighbors Count (Node) Check a node’ neighbors count . The Neighbors Count filter compares the number of neighbors a node has against a specified value, offering a faster alternative to writing and comparing neighbor counts as attributes. Node FilterA single cluster filter definition . Table of content . | Properties | Properties | . The Neighbors Count filter does a simple numeric comparison of it’s number of neighbors against another value. When you can, this is much faster and preferrable to writing the neighbor count to an attribute and then doing a regular numeric compare with it. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/cluster-filters/filter-node-neighbors-count.html#neighbors-count-node",
    "relUrl": "/doc-clusters/cluster-filters/filter-node-neighbors-count.html#neighbors-count-node"
  },"389": {
    "doc": "🝖 Neighbors Count (Node)",
    "title": "Properties",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/cluster-filters/filter-node-neighbors-count.html#properties",
    "relUrl": "/doc-clusters/cluster-filters/filter-node-neighbors-count.html#properties"
  },"390": {
    "doc": "🝖 Neighbors Count (Node)",
    "title": "Properties",
    "content": "| Property | Description | . | :**Settings** : |   | . | Priority | Defines the order in which this flag operation will be processed.*See Flag Nodes* | . | Comparison | TBD | . | Compare Against | TBD | . | Count (Constant) | TBD | . | Operand A (First) | TBD | . | Tolerance | Equality tolerance for near-value comparisons. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/cluster-filters/filter-node-neighbors-count.html#properties-1",
    "relUrl": "/doc-clusters/cluster-filters/filter-node-neighbors-count.html#properties-1"
  },"391": {
    "doc": "🝖 Neighbors Count (Node)",
    "title": "🝖 Neighbors Count (Node)",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/cluster-filters/filter-node-neighbors-count.html",
    "relUrl": "/doc-clusters/cluster-filters/filter-node-neighbors-count.html"
  },"392": {
    "doc": "🝖 Path Inclusion",
    "title": "🝖 Path Inclusion",
    "content": "PCGEx | Filter : Path Inclusion Checks against how a point is included in a path. - . FilterA single filter definition . Table of content . | Properties . | Check Type | . | . The Path Inclusion filter checks the spatial relationship of a point against input paths; i.e are they inside, outside, on, or a combination. Note that to simplify operations, this node create a temporary spline in memory from the input paths; althought it does not support custom tangents. Should you need custom tangents, use Create Spline with 🝖 Spline Inclusion instead. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-path-inclusion.html#path-inclusion",
    "relUrl": "/doc-filter-ecosystem/filter-path-inclusion.html#path-inclusion"
  },"393": {
    "doc": "🝖 Path Inclusion",
    "title": "Properties",
    "content": ". | Property | Description | . | Closed loop |   | . | Scope | The scope/selection of input data that are to be processed as closed paths or not.-All processes all input as selected below.-All but tagged inverts the scope based on tags.Default is, all paths are considered open, unless they are tagged with ClosedLoop. | . | Closed Loop | Whether to consider input data that are part of the scope as closed loop or not. | . | Comma Separated Tags | Tags to check for. Any match uses the inverse of the above value. | . | **Settings** | |   | . | Point Type | Point type used for the proxy spline generated by the input paths. | . | Sample Inputs | Lets you filter out input paths based on whether they’re closed loops or not. | . | Check Type | *See below.* | . | Pick | Lets you choose which path to test against. | . | Tolerance | Distance to the path within which a point is considered to be On the path. | . | Spline Scales Tolerance | If enabled, the Tolerance value will be scaled by the spline’ YZ scale’ length.*Note that this will be the path’ points YZ scale.* | . | Invert | If enabled, inverts the result of the filter. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-path-inclusion.html#properties",
    "relUrl": "/doc-filter-ecosystem/filter-path-inclusion.html#properties"
  },"394": {
    "doc": "🝖 Path Inclusion",
    "title": "Check Type",
    "content": ". | : Check Type | |   | . | | &lt;span class=\"ebit\"&gt;Is Inside&lt;/span&gt;Check if point lies inside. | . | | &lt;span class=\"ebit\"&gt;Is Inside or On&lt;/span&gt;Check if point lies inside or on. | . | | &lt;span class=\"ebit\"&gt;Is Inside and On&lt;/span&gt;Check if point lies inside and on. | . | | &lt;span class=\"ebit\"&gt;Is Outside&lt;/span&gt;Check if point lies outside. | . | | &lt;span class=\"ebit\"&gt;Is Outside or On&lt;/span&gt;Check if point lies outside or on. | . | | &lt;span class=\"ebit\"&gt;Is Outside and On&lt;/span&gt;Check if point lies outside and on. | . | | &lt;span class=\"ebit\"&gt;Is On&lt;/span&gt;Check if point lies on. | . | | &lt;span class=\"ebit\"&gt;Is not On&lt;/span&gt;Check if the point does not lies on. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-path-inclusion.html#check-type",
    "relUrl": "/doc-filter-ecosystem/filter-path-inclusion.html#check-type"
  },"395": {
    "doc": "🝖 Path Inclusion",
    "title": "🝖 Path Inclusion",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-path-inclusion.html",
    "relUrl": "/doc-filter-ecosystem/filter-path-inclusion.html"
  },"396": {
    "doc": "🝖 Random",
    "title": "🝖 Random",
    "content": "PCGEx | Filter : Random Random filter. - . FilterA single filter definition . Table of content . The Random Filter lets you do a random filtering pass. It’s a coin flip for every point! . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-random.html#random",
    "relUrl": "/doc-filter-ecosystem/filter-random.html#random"
  },"397": {
    "doc": "🝖 Random",
    "title": "🝖 Random",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-random.html",
    "relUrl": "/doc-filter-ecosystem/filter-random.html"
  },"398": {
    "doc": "🝖 Spline Inclusion",
    "title": "🝖 Spline Inclusion",
    "content": "PCGEx | Filter : Spline Inclusion Checks against how a point is included in a spline. - . FilterA single filter definition . Table of content . | Properties . | Check Type | . | . The Spline Inclusion filter checks the spatial relationship of a point against input splines; i.e are they inside, outside, on, or a combination. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-spline-inclusion.html#spline-inclusion",
    "relUrl": "/doc-filter-ecosystem/filter-spline-inclusion.html#spline-inclusion"
  },"399": {
    "doc": "🝖 Spline Inclusion",
    "title": "Properties",
    "content": ". | Property | Description | . | **Settings** | |   | . | Sample Inputs | Lets you filter out input splines based on whether they’re closed loops or not. | . | Check Type | *See below.* | . | Pick | Lets you choose which spline to test against. | . | Tolerance | Distance to the spline within which a point is considered to be On the spline. | . | Spline Scales Tolerance | If enabled, the Tolerance value will be scaled by the spline’ YZ scale’ length. | . | Invert | If enabled, inverts the result of the filter. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-spline-inclusion.html#properties",
    "relUrl": "/doc-filter-ecosystem/filter-spline-inclusion.html#properties"
  },"400": {
    "doc": "🝖 Spline Inclusion",
    "title": "Check Type",
    "content": ". | : Check Type | |   | . | | &lt;span class=\"ebit\"&gt;Is Inside&lt;/span&gt;Check if point lies inside. | . | | &lt;span class=\"ebit\"&gt;Is Inside or On&lt;/span&gt;Check if point lies inside or on. | . | | &lt;span class=\"ebit\"&gt;Is Inside and On&lt;/span&gt;Check if point lies inside and on. | . | | &lt;span class=\"ebit\"&gt;Is Outside&lt;/span&gt;Check if point lies outside. | . | | &lt;span class=\"ebit\"&gt;Is Outside or On&lt;/span&gt;Check if point lies outside or on. | . | | &lt;span class=\"ebit\"&gt;Is Outside and On&lt;/span&gt;Check if point lies outside and on. | . | | &lt;span class=\"ebit\"&gt;Is On&lt;/span&gt;Check if point lies on. | . | | &lt;span class=\"ebit\"&gt;Is not On&lt;/span&gt;Check if the point does not lies on. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-spline-inclusion.html#check-type",
    "relUrl": "/doc-filter-ecosystem/filter-spline-inclusion.html#check-type"
  },"401": {
    "doc": "🝖 Spline Inclusion",
    "title": "🝖 Spline Inclusion",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-spline-inclusion.html",
    "relUrl": "/doc-filter-ecosystem/filter-spline-inclusion.html"
  },"402": {
    "doc": "Uber Filter (Collection)",
    "title": "Uber Filter (Collection)",
    "content": "PCGEx | Uber Filter (Collection) Combine multiple filters . The Uber Filter (Collection) node utilizes all available filters to evaluate points within collections, filtering the entire collection based on the aggregated results of individual points. InPoints to be filtered FilterFilters to be evaluated InsideCollections that passed the filters OutsideCollections that didn't pass the filters. Table of content . | Properties . | Available Filters | . | . The Uber Filter (Collection) node combines various filters to assess collections of points, determining whether each collection passes based on the results of its constituent points. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-uber-filter-collection.html#uber-filter-collection",
    "relUrl": "/doc-filter-ecosystem/filter-uber-filter-collection.html#uber-filter-collection"
  },"403": {
    "doc": "Uber Filter (Collection)",
    "title": "Properties",
    "content": ". | Property | Description | . | **Settings** | |   | . | Mode | Choose how to deal with the combined results.*See below.* | . | Measure | Measure to use when using Partial filter requirements.Either Relative to the total number of points in the collection, or an absolute, Discrete value. | . | Comparison | How to compare the number of points that passed the filters against the specified threshold. | . | **Threshold** | |   | . | Dbl Threshold | Relative threshold over a 0..1 range.*0 = 0% of the points passed, 1 = 100% of the points passed.* | . | Int Threshold | Discrete threshold. | . | Tolerance | Tolerance used with approximative comparison modes. | . | Swap | Invert the result of the threshold test. | . | : Mode | |   | . | &lt;span class=\"ebit\"&gt;All&lt;/span&gt; | All points within the collection must pass the filters for the entire collection to pass. | . | &lt;span class=\"ebit\"&gt;Any&lt;/span&gt; | Any point within the collection has to pass the filters for the entire collection to pass. | . | &lt;span class=\"ebit\"&gt;Partial&lt;/span&gt; | A partial number of points must pass the filters for the entire collection to pass. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-uber-filter-collection.html#properties",
    "relUrl": "/doc-filter-ecosystem/filter-uber-filter-collection.html#properties"
  },"404": {
    "doc": "Uber Filter (Collection)",
    "title": "Available Filters",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-uber-filter-collection.html#available-filters",
    "relUrl": "/doc-filter-ecosystem/filter-uber-filter-collection.html#available-filters"
  },"405": {
    "doc": "Uber Filter (Collection)",
    "title": "🝖 AND / OR (Group)",
    "content": "Group multiple filters to set up complex AND/OR branches. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-uber-filter-collection.html#and--or-group",
    "relUrl": "/doc-filter-ecosystem/filter-uber-filter-collection.html#and--or-group"
  },"406": {
    "doc": "Uber Filter (Collection)",
    "title": "🝖 Compare Nearest (Numeric)",
    "content": "The Numeric Comparison Filter compares the arithmetic value of an attribute against the closest point from another dataset. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-uber-filter-collection.html#compare-nearest-numeric",
    "relUrl": "/doc-filter-ecosystem/filter-uber-filter-collection.html#compare-nearest-numeric"
  },"407": {
    "doc": "Uber Filter (Collection)",
    "title": "🝖 Compare (Numeric)",
    "content": "The Numeric Comparison Filter compares the arithmetic value of two attributes . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-uber-filter-collection.html#compare-numeric",
    "relUrl": "/doc-filter-ecosystem/filter-uber-filter-collection.html#compare-numeric"
  },"408": {
    "doc": "Uber Filter (Collection)",
    "title": "🝖 Compare (String)",
    "content": "Compares two string-like attributes against each other. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-uber-filter-collection.html#compare-string",
    "relUrl": "/doc-filter-ecosystem/filter-uber-filter-collection.html#compare-string"
  },"409": {
    "doc": "Uber Filter (Collection)",
    "title": "🝖 Bool",
    "content": "Performs a simple boolean comparison, converting numeric values to true (&gt; 0) or false (&lt;= 0). ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-uber-filter-collection.html#bool",
    "relUrl": "/doc-filter-ecosystem/filter-uber-filter-collection.html#bool"
  },"410": {
    "doc": "Uber Filter (Collection)",
    "title": "🝖 Within Range",
    "content": "Checks if an attribute value falls within a specified range. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-uber-filter-collection.html#within-range",
    "relUrl": "/doc-filter-ecosystem/filter-uber-filter-collection.html#within-range"
  },"411": {
    "doc": "Uber Filter (Collection)",
    "title": "🝖 Dot Product",
    "content": "Compares the dot product of two direction vectors against a third value. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-uber-filter-collection.html#dot-product",
    "relUrl": "/doc-filter-ecosystem/filter-uber-filter-collection.html#dot-product"
  },"412": {
    "doc": "Uber Filter (Collection)",
    "title": "🝖 Modulo Comparison",
    "content": "Compares the modulo of two attributes against a third operand, with configurable comparisons and tolerance. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-uber-filter-collection.html#modulo-comparison",
    "relUrl": "/doc-filter-ecosystem/filter-uber-filter-collection.html#modulo-comparison"
  },"413": {
    "doc": "Uber Filter (Collection)",
    "title": "🝖 Distance",
    "content": "Compare distance to closest target against a constant or attribute. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-uber-filter-collection.html#distance",
    "relUrl": "/doc-filter-ecosystem/filter-uber-filter-collection.html#distance"
  },"414": {
    "doc": "Uber Filter (Collection)",
    "title": "🝖 Bounds",
    "content": "Checks if a point is inside or outside the provided bounds, with options for bounds types and an epsilon adjustment. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-uber-filter-collection.html#bounds",
    "relUrl": "/doc-filter-ecosystem/filter-uber-filter-collection.html#bounds"
  },"415": {
    "doc": "Uber Filter (Collection)",
    "title": "🝖 Bitmask",
    "content": "Checks specific flags in an int64 bitmask attribute with configurable mask types, comparisons, and an option to invert results. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-uber-filter-collection.html#bitmask",
    "relUrl": "/doc-filter-ecosystem/filter-uber-filter-collection.html#bitmask"
  },"416": {
    "doc": "Uber Filter (Collection)",
    "title": "🝖 Random",
    "content": "Random filter. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-uber-filter-collection.html#random",
    "relUrl": "/doc-filter-ecosystem/filter-uber-filter-collection.html#random"
  },"417": {
    "doc": "Uber Filter (Collection)",
    "title": "🝖 Mean Value",
    "content": "The Mean Value Filter compares per-point values of an attribute against the mean statistical value of that same attribute. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-uber-filter-collection.html#mean-value",
    "relUrl": "/doc-filter-ecosystem/filter-uber-filter-collection.html#mean-value"
  },"418": {
    "doc": "Uber Filter (Collection)",
    "title": "🝖 Self Compare (Numeric)",
    "content": "Compares the numeric value at one index against the same attribute at another index. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-uber-filter-collection.html#self-compare-numeric",
    "relUrl": "/doc-filter-ecosystem/filter-uber-filter-collection.html#self-compare-numeric"
  },"419": {
    "doc": "Uber Filter (Collection)",
    "title": "🝖 Self Compare (String)",
    "content": "Compares the string value at one index against the same attribute at another index. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-uber-filter-collection.html#self-compare-string",
    "relUrl": "/doc-filter-ecosystem/filter-uber-filter-collection.html#self-compare-string"
  },"420": {
    "doc": "Uber Filter (Collection)",
    "title": "🝖 Spline Inclusion",
    "content": "Checks against how a point is included in a spline. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-uber-filter-collection.html#spline-inclusion",
    "relUrl": "/doc-filter-ecosystem/filter-uber-filter-collection.html#spline-inclusion"
  },"421": {
    "doc": "Uber Filter (Collection)",
    "title": "🝖 Path Inclusion",
    "content": "Checks against how a point is included in a path. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-uber-filter-collection.html#path-inclusion",
    "relUrl": "/doc-filter-ecosystem/filter-uber-filter-collection.html#path-inclusion"
  },"422": {
    "doc": "Uber Filter (Collection)",
    "title": "Uber Filter (Collection)",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-uber-filter-collection.html",
    "relUrl": "/doc-filter-ecosystem/filter-uber-filter-collection.html"
  },"423": {
    "doc": "Uber Filter",
    "title": "Uber Filter",
    "content": "PCGEx | Uber Filter Combine multiple filters . The Uber Filter node combines multiple filters to refine points within a dataset. You can either split the dataset based on filters results or write the result to an attribute. InPoints to be filtered FilterFilters to be evaluated InsidePoints that passed the filters OutsidePoints that didn't pass the filters. Table of content . | Properties . | Available Filters | . | . The Uber Filter node leverages any and all the filters available as part of the ecosystem to filter out points inside individual datasets. Alternatively, you can choose to only write the combined filters result as a bool attribute. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-uber-filter.html#uber-filter",
    "relUrl": "/doc-filter-ecosystem/filter-uber-filter.html#uber-filter"
  },"424": {
    "doc": "Uber Filter",
    "title": "Properties",
    "content": ". | Property | Description | . | **Settings** | |   | . | Mode | How to ouput data.*See below.* | . | Result Attribute Namebool | Name of the attribute the filter result will be written to. | . | Swap | If enabled, inverts the combined result of the filters. | . | : Mode | |   | . | &lt;span class=\"ebit\"&gt;Partition&lt;/span&gt; | Split input dataset in either Inside (filter passed) or Outside (filters failed) outputs. | . | &lt;span class=\"ebit\"&gt;Write&lt;/span&gt; | Preserve input and write the result of the filter to an attribute. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-uber-filter.html#properties",
    "relUrl": "/doc-filter-ecosystem/filter-uber-filter.html#properties"
  },"425": {
    "doc": "Uber Filter",
    "title": "Available Filters",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-uber-filter.html#available-filters",
    "relUrl": "/doc-filter-ecosystem/filter-uber-filter.html#available-filters"
  },"426": {
    "doc": "Uber Filter",
    "title": "🝖 AND / OR (Group)",
    "content": "Group multiple filters to set up complex AND/OR branches. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-uber-filter.html#and--or-group",
    "relUrl": "/doc-filter-ecosystem/filter-uber-filter.html#and--or-group"
  },"427": {
    "doc": "Uber Filter",
    "title": "🝖 Compare Nearest (Numeric)",
    "content": "The Numeric Comparison Filter compares the arithmetic value of an attribute against the closest point from another dataset. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-uber-filter.html#compare-nearest-numeric",
    "relUrl": "/doc-filter-ecosystem/filter-uber-filter.html#compare-nearest-numeric"
  },"428": {
    "doc": "Uber Filter",
    "title": "🝖 Compare (Numeric)",
    "content": "The Numeric Comparison Filter compares the arithmetic value of two attributes . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-uber-filter.html#compare-numeric",
    "relUrl": "/doc-filter-ecosystem/filter-uber-filter.html#compare-numeric"
  },"429": {
    "doc": "Uber Filter",
    "title": "🝖 Compare (String)",
    "content": "Compares two string-like attributes against each other. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-uber-filter.html#compare-string",
    "relUrl": "/doc-filter-ecosystem/filter-uber-filter.html#compare-string"
  },"430": {
    "doc": "Uber Filter",
    "title": "🝖 Bool",
    "content": "Performs a simple boolean comparison, converting numeric values to true (&gt; 0) or false (&lt;= 0). ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-uber-filter.html#bool",
    "relUrl": "/doc-filter-ecosystem/filter-uber-filter.html#bool"
  },"431": {
    "doc": "Uber Filter",
    "title": "🝖 Within Range",
    "content": "Checks if an attribute value falls within a specified range. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-uber-filter.html#within-range",
    "relUrl": "/doc-filter-ecosystem/filter-uber-filter.html#within-range"
  },"432": {
    "doc": "Uber Filter",
    "title": "🝖 Dot Product",
    "content": "Compares the dot product of two direction vectors against a third value. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-uber-filter.html#dot-product",
    "relUrl": "/doc-filter-ecosystem/filter-uber-filter.html#dot-product"
  },"433": {
    "doc": "Uber Filter",
    "title": "🝖 Modulo Comparison",
    "content": "Compares the modulo of two attributes against a third operand, with configurable comparisons and tolerance. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-uber-filter.html#modulo-comparison",
    "relUrl": "/doc-filter-ecosystem/filter-uber-filter.html#modulo-comparison"
  },"434": {
    "doc": "Uber Filter",
    "title": "🝖 Distance",
    "content": "Compare distance to closest target against a constant or attribute. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-uber-filter.html#distance",
    "relUrl": "/doc-filter-ecosystem/filter-uber-filter.html#distance"
  },"435": {
    "doc": "Uber Filter",
    "title": "🝖 Bounds",
    "content": "Checks if a point is inside or outside the provided bounds, with options for bounds types and an epsilon adjustment. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-uber-filter.html#bounds",
    "relUrl": "/doc-filter-ecosystem/filter-uber-filter.html#bounds"
  },"436": {
    "doc": "Uber Filter",
    "title": "🝖 Bitmask",
    "content": "Checks specific flags in an int64 bitmask attribute with configurable mask types, comparisons, and an option to invert results. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-uber-filter.html#bitmask",
    "relUrl": "/doc-filter-ecosystem/filter-uber-filter.html#bitmask"
  },"437": {
    "doc": "Uber Filter",
    "title": "🝖 Random",
    "content": "Random filter. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-uber-filter.html#random",
    "relUrl": "/doc-filter-ecosystem/filter-uber-filter.html#random"
  },"438": {
    "doc": "Uber Filter",
    "title": "🝖 Mean Value",
    "content": "The Mean Value Filter compares per-point values of an attribute against the mean statistical value of that same attribute. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-uber-filter.html#mean-value",
    "relUrl": "/doc-filter-ecosystem/filter-uber-filter.html#mean-value"
  },"439": {
    "doc": "Uber Filter",
    "title": "🝖 Self Compare (Numeric)",
    "content": "Compares the numeric value at one index against the same attribute at another index. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-uber-filter.html#self-compare-numeric",
    "relUrl": "/doc-filter-ecosystem/filter-uber-filter.html#self-compare-numeric"
  },"440": {
    "doc": "Uber Filter",
    "title": "🝖 Self Compare (String)",
    "content": "Compares the string value at one index against the same attribute at another index. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-uber-filter.html#self-compare-string",
    "relUrl": "/doc-filter-ecosystem/filter-uber-filter.html#self-compare-string"
  },"441": {
    "doc": "Uber Filter",
    "title": "🝖 Spline Inclusion",
    "content": "Checks against how a point is included in a spline. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-uber-filter.html#spline-inclusion",
    "relUrl": "/doc-filter-ecosystem/filter-uber-filter.html#spline-inclusion"
  },"442": {
    "doc": "Uber Filter",
    "title": "🝖 Path Inclusion",
    "content": "Checks against how a point is included in a path. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-uber-filter.html#path-inclusion",
    "relUrl": "/doc-filter-ecosystem/filter-uber-filter.html#path-inclusion"
  },"443": {
    "doc": "Uber Filter",
    "title": "Uber Filter",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-uber-filter.html",
    "relUrl": "/doc-filter-ecosystem/filter-uber-filter.html"
  },"444": {
    "doc": "🝖 Within Range",
    "title": "🝖 Within Range",
    "content": "PCGEx | Filter : Within Range Checks if an attribute value falls within a specified range. - . FilterA single filter definition . Table of content . | Properties | . The Within Range filter checks if an attribute value is within a specified constant range. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-within-range.html#within-range",
    "relUrl": "/doc-filter-ecosystem/filter-within-range.html#within-range"
  },"445": {
    "doc": "🝖 Within Range",
    "title": "Properties",
    "content": ". | Property | Description | . | **Operand A** | |   | . | Operand A | The attribute that will be checked. | . | **Range** | |   | . | Range Min | Start of the range. | . | Range Max | End of the range. | . | Inclusive | If enabled, values that are equal to the range’ min/max values will be considered *within range*. | . | Invert | If enabled, inverts the result of the filter, effectively making the filter an \"Outside Range\" check. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-within-range.html#properties",
    "relUrl": "/doc-filter-ecosystem/filter-within-range.html#properties"
  },"446": {
    "doc": "🝖 Within Range",
    "title": "🝖 Within Range",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/filter-within-range.html",
    "relUrl": "/doc-filter-ecosystem/filter-within-range.html"
  },"447": {
    "doc": "Node Flag",
    "title": "Node Flag",
    "content": "PCGEx | Cluster : Node Flag A single flag definition . The Node Flag uses a variety of filters to perform bitmask-based flag operations that can be set in three modes; Direct, Individual, or Composite, with various logical operations like AND, OR, NOT, and XOR. FilterAny number of filters. Supports both regular point filters as well as special cluster filters. FlagA single flag definition used along with a Flag Node node. Pass Bitmask(Advanced output) - Outputs the Pass State Flags as a re-usable bitmask. Fail Bitmask(Advanced output) - Outputs the Fail State Flags as a re-usable bitmask. Related . | Working with Clusters | Flag Nodes | Filter Ecosystem | . Table of content . | Properties . | State Flags . | Mode : Direct | Mode : Individual | Mode : Composite | . | Operation | Available Cluster Filters | Available Filters | . | . The Node Flag, not to be confused with Flag Nodes, performs a single per-point bitmask-based operation on an incoming value; based on any number of input filters. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/flag-nodes/flag-node.html#node-flag",
    "relUrl": "/doc-clusters/flag-nodes/flag-node.html#node-flag"
  },"448": {
    "doc": "Node Flag",
    "title": "Properties",
    "content": "| Property | Description | . | :**Settings** : |   | . | Name | If enabled, the direction of the probe will be adjusted by the current probing point’ transform.*If disabled, the direction is in world space.* | . | Priority | Fixed maximum connections for every point. | . | Pass State Flags | If enabled, will apply the specified flags to the incoming bitmask **when the filters are true.***See below for more infos on flag operation.* | . | Fail State Flags | If enabled, will apply the specified flags to the incoming bitmask **when the filters return false.***See below for more infos on flag operation.* | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/flag-nodes/flag-node.html#properties",
    "relUrl": "/doc-clusters/flag-nodes/flag-node.html#properties"
  },"449": {
    "doc": "Node Flag",
    "title": "State Flags",
    "content": "| Property | Description | . | :**Settings** : |   | . | Mode | The mode lets you choose how to set the flags value, as a user.- Direct is probably the most useful, as it can be set using an override pin.- Individual lets you use an array where you can set individual bits by their position (index), and whether they’re true or false.- Composite lets you set individual bits using dropdowns. | . Mode : Direct . This is probably the most useful &amp; straightforward mode, as it can be set using an override pin. | Bitmask | Sets the raw bitmask value, as an int64. | . | Op | Which operation to do on the selected bit using the value set below.Can be either:=, AND, OR, NOT, or XOR.*See below for more infos.* | . Mode : Individual . Individual mode lets you cherry pick which operation you want to perform on specific bits, using an array. Note that the order of the array itself is of no consequence; the Bit Index property is what matters. | : **Individual Operation** : |   | . | Bit Index | The index of the bit this operation will be applied to.Keep the ranges between 0 and 63 | . | Op | Which operation to do on the selected bit using the value set below.Can be either:=, AND, OR, NOT, or XOR.*See below for more infos.* | . | Value | If Individual is selected, this an array where each bit is an index/operation pair. | . Mode : Composite . This lets you set the full width of the int64 using a single dropdown per byte. | Op | Which operation to do on the incoming flags using the bitmask created from the dropdowns.Can be either:=, AND, OR, NOT, or XOR.*See below for more infos.* | . | 0-64 Bits | If Composite is selected, a whole bunch of dropdowns will show up. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/flag-nodes/flag-node.html#state-flags",
    "relUrl": "/doc-clusters/flag-nodes/flag-node.html#state-flags"
  },"450": {
    "doc": "Node Flag",
    "title": "Operation",
    "content": "| : **Op** : |   | . | = | Set the bit value, with no regard for its current value. | . | AND | TBD | . | OR | TBD | . | NOT | TBD | . | XOR | TBD | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/flag-nodes/flag-node.html#operation",
    "relUrl": "/doc-clusters/flag-nodes/flag-node.html#operation"
  },"451": {
    "doc": "Node Flag",
    "title": "Available Cluster Filters",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/flag-nodes/flag-node.html#available-cluster-filters",
    "relUrl": "/doc-clusters/flag-nodes/flag-node.html#available-cluster-filters"
  },"452": {
    "doc": "Node Flag",
    "title": "🝖 Adjacency (Node)",
    "content": "Check if adjacent node meet specific conditions . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/flag-nodes/flag-node.html#adjacency-node",
    "relUrl": "/doc-clusters/flag-nodes/flag-node.html#adjacency-node"
  },"453": {
    "doc": "Node Flag",
    "title": "🝖 Edge Direction (Node)",
    "content": "Check if adjacent node meet specific conditions . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/flag-nodes/flag-node.html#edge-direction-node",
    "relUrl": "/doc-clusters/flag-nodes/flag-node.html#edge-direction-node"
  },"454": {
    "doc": "Node Flag",
    "title": "🝖 Neighbors Count (Node)",
    "content": "Check a node’ neighbors count . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/flag-nodes/flag-node.html#neighbors-count-node",
    "relUrl": "/doc-clusters/flag-nodes/flag-node.html#neighbors-count-node"
  },"455": {
    "doc": "Node Flag",
    "title": "🝖 Edge Direction (Edge)",
    "content": "Check if the edge direction is within a given range. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/flag-nodes/flag-node.html#edge-direction-edge",
    "relUrl": "/doc-clusters/flag-nodes/flag-node.html#edge-direction-edge"
  },"456": {
    "doc": "Node Flag",
    "title": "🝖 Endpoints Compare (Numeric)",
    "content": "Compare the value of an attribute on each of the edge endpoint. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/flag-nodes/flag-node.html#endpoints-compare-numeric",
    "relUrl": "/doc-clusters/flag-nodes/flag-node.html#endpoints-compare-numeric"
  },"457": {
    "doc": "Node Flag",
    "title": "🝖 Endpoints Compare (String)",
    "content": "Compare the value of an attribute on each of the edge endpoint. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/flag-nodes/flag-node.html#endpoints-compare-string",
    "relUrl": "/doc-clusters/flag-nodes/flag-node.html#endpoints-compare-string"
  },"458": {
    "doc": "Node Flag",
    "title": "🝖 Neighbors Count (Edge)",
    "content": "Check a node’ neighbors count . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/flag-nodes/flag-node.html#neighbors-count-edge",
    "relUrl": "/doc-clusters/flag-nodes/flag-node.html#neighbors-count-edge"
  },"459": {
    "doc": "Node Flag",
    "title": "Available Filters",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/flag-nodes/flag-node.html#available-filters",
    "relUrl": "/doc-clusters/flag-nodes/flag-node.html#available-filters"
  },"460": {
    "doc": "Node Flag",
    "title": "🝖 AND / OR (Group)",
    "content": "Group multiple filters to set up complex AND/OR branches. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/flag-nodes/flag-node.html#and--or-group",
    "relUrl": "/doc-clusters/flag-nodes/flag-node.html#and--or-group"
  },"461": {
    "doc": "Node Flag",
    "title": "🝖 Adjacency (Node)",
    "content": "Check if adjacent node meet specific conditions . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/flag-nodes/flag-node.html#adjacency-node-1",
    "relUrl": "/doc-clusters/flag-nodes/flag-node.html#adjacency-node-1"
  },"462": {
    "doc": "Node Flag",
    "title": "🝖 Compare Nearest (Numeric)",
    "content": "The Numeric Comparison Filter compares the arithmetic value of an attribute against the closest point from another dataset. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/flag-nodes/flag-node.html#compare-nearest-numeric",
    "relUrl": "/doc-clusters/flag-nodes/flag-node.html#compare-nearest-numeric"
  },"463": {
    "doc": "Node Flag",
    "title": "🝖 Compare (Numeric)",
    "content": "The Numeric Comparison Filter compares the arithmetic value of two attributes . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/flag-nodes/flag-node.html#compare-numeric",
    "relUrl": "/doc-clusters/flag-nodes/flag-node.html#compare-numeric"
  },"464": {
    "doc": "Node Flag",
    "title": "🝖 Edge Direction (Node)",
    "content": "Check if adjacent node meet specific conditions . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/flag-nodes/flag-node.html#edge-direction-node-1",
    "relUrl": "/doc-clusters/flag-nodes/flag-node.html#edge-direction-node-1"
  },"465": {
    "doc": "Node Flag",
    "title": "🝖 Compare (String)",
    "content": "Compares two string-like attributes against each other. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/flag-nodes/flag-node.html#compare-string",
    "relUrl": "/doc-clusters/flag-nodes/flag-node.html#compare-string"
  },"466": {
    "doc": "Node Flag",
    "title": "🝖 Neighbors Count (Node)",
    "content": "Check a node’ neighbors count . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/flag-nodes/flag-node.html#neighbors-count-node-1",
    "relUrl": "/doc-clusters/flag-nodes/flag-node.html#neighbors-count-node-1"
  },"467": {
    "doc": "Node Flag",
    "title": "🝖 Bool",
    "content": "Performs a simple boolean comparison, converting numeric values to true (&gt; 0) or false (&lt;= 0). ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/flag-nodes/flag-node.html#bool",
    "relUrl": "/doc-clusters/flag-nodes/flag-node.html#bool"
  },"468": {
    "doc": "Node Flag",
    "title": "🝖 Within Range",
    "content": "Checks if an attribute value falls within a specified range. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/flag-nodes/flag-node.html#within-range",
    "relUrl": "/doc-clusters/flag-nodes/flag-node.html#within-range"
  },"469": {
    "doc": "Node Flag",
    "title": "🝖 Dot Product",
    "content": "Compares the dot product of two direction vectors against a third value. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/flag-nodes/flag-node.html#dot-product",
    "relUrl": "/doc-clusters/flag-nodes/flag-node.html#dot-product"
  },"470": {
    "doc": "Node Flag",
    "title": "🝖 Modulo Comparison",
    "content": "Compares the modulo of two attributes against a third operand, with configurable comparisons and tolerance. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/flag-nodes/flag-node.html#modulo-comparison",
    "relUrl": "/doc-clusters/flag-nodes/flag-node.html#modulo-comparison"
  },"471": {
    "doc": "Node Flag",
    "title": "🝖 Edge Direction (Edge)",
    "content": "Check if the edge direction is within a given range. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/flag-nodes/flag-node.html#edge-direction-edge-1",
    "relUrl": "/doc-clusters/flag-nodes/flag-node.html#edge-direction-edge-1"
  },"472": {
    "doc": "Node Flag",
    "title": "🝖 Endpoints Compare (Numeric)",
    "content": "Compare the value of an attribute on each of the edge endpoint. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/flag-nodes/flag-node.html#endpoints-compare-numeric-1",
    "relUrl": "/doc-clusters/flag-nodes/flag-node.html#endpoints-compare-numeric-1"
  },"473": {
    "doc": "Node Flag",
    "title": "🝖 Bounds",
    "content": "Checks if a point is inside or outside the provided bounds, with options for bounds types and an epsilon adjustment. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/flag-nodes/flag-node.html#bounds",
    "relUrl": "/doc-clusters/flag-nodes/flag-node.html#bounds"
  },"474": {
    "doc": "Node Flag",
    "title": "🝖 Distance",
    "content": "Compare distance to closest target against a constant or attribute. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/flag-nodes/flag-node.html#distance",
    "relUrl": "/doc-clusters/flag-nodes/flag-node.html#distance"
  },"475": {
    "doc": "Node Flag",
    "title": "🝖 Endpoints Compare (String)",
    "content": "Compare the value of an attribute on each of the edge endpoint. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/flag-nodes/flag-node.html#endpoints-compare-string-1",
    "relUrl": "/doc-clusters/flag-nodes/flag-node.html#endpoints-compare-string-1"
  },"476": {
    "doc": "Node Flag",
    "title": "🝖 Bitmask",
    "content": "Checks specific flags in an int64 bitmask attribute with configurable mask types, comparisons, and an option to invert results. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/flag-nodes/flag-node.html#bitmask",
    "relUrl": "/doc-clusters/flag-nodes/flag-node.html#bitmask"
  },"477": {
    "doc": "Node Flag",
    "title": "🝖 Neighbors Count (Edge)",
    "content": "Check a node’ neighbors count . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/flag-nodes/flag-node.html#neighbors-count-edge-1",
    "relUrl": "/doc-clusters/flag-nodes/flag-node.html#neighbors-count-edge-1"
  },"478": {
    "doc": "Node Flag",
    "title": "🝖 Random",
    "content": "Random filter. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/flag-nodes/flag-node.html#random",
    "relUrl": "/doc-clusters/flag-nodes/flag-node.html#random"
  },"479": {
    "doc": "Node Flag",
    "title": "🝖 Mean Value",
    "content": "The Mean Value Filter compares per-point values of an attribute against the mean statistical value of that same attribute. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/flag-nodes/flag-node.html#mean-value",
    "relUrl": "/doc-clusters/flag-nodes/flag-node.html#mean-value"
  },"480": {
    "doc": "Node Flag",
    "title": "🝖 Self Compare (Numeric)",
    "content": "Compares the numeric value at one index against the same attribute at another index. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/flag-nodes/flag-node.html#self-compare-numeric",
    "relUrl": "/doc-clusters/flag-nodes/flag-node.html#self-compare-numeric"
  },"481": {
    "doc": "Node Flag",
    "title": "🝖 Self Compare (String)",
    "content": "Compares the string value at one index against the same attribute at another index. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/flag-nodes/flag-node.html#self-compare-string",
    "relUrl": "/doc-clusters/flag-nodes/flag-node.html#self-compare-string"
  },"482": {
    "doc": "Node Flag",
    "title": "🝖 Spline Inclusion",
    "content": "Checks against how a point is included in a spline. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/flag-nodes/flag-node.html#spline-inclusion",
    "relUrl": "/doc-clusters/flag-nodes/flag-node.html#spline-inclusion"
  },"483": {
    "doc": "Node Flag",
    "title": "🝖 Path Inclusion",
    "content": "Checks against how a point is included in a path. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/flag-nodes/flag-node.html#path-inclusion",
    "relUrl": "/doc-clusters/flag-nodes/flag-node.html#path-inclusion"
  },"484": {
    "doc": "Node Flag",
    "title": "Node Flag",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/flag-nodes/flag-node.html",
    "relUrl": "/doc-clusters/flag-nodes/flag-node.html"
  },"485": {
    "doc": "Flat Projection",
    "title": "Flat Projection",
    "content": "PCGEx | Flat Projection TBD . The Flat Projection node… . InPoints that will be projected or unprojected OutPoints that have been projected or unprojected . Table of content . | Properties | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/doc-transforms/flat-projection.html#flat-projection",
    "relUrl": "/doc-misc/doc-transforms/flat-projection.html#flat-projection"
  },"486": {
    "doc": "Flat Projection",
    "title": "Properties",
    "content": ". WIP . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/doc-transforms/flat-projection.html#properties",
    "relUrl": "/doc-misc/doc-transforms/flat-projection.html#properties"
  },"487": {
    "doc": "Flat Projection",
    "title": "Flat Projection",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/doc-transforms/flat-projection.html",
    "relUrl": "/doc-misc/doc-transforms/flat-projection.html"
  },"488": {
    "doc": "Blending",
    "title": "Blending",
    "content": "PCGEx’ blendings overview . This page centralizes documentation for Blending, allowing us to keep relevant content accessible without duplicating extensive details across individual pages; as many nodes have blending capabilities. Table of content . | Properties . | Blend modes | . | . There’s a lot of node in PCGEx that offer blending settings – and while what is blended is highly contextual, they all share the same settings. Generally speaking, blending happens between at least two points, but it can sometimes be more, much more. When a node creates new points, the final point’ properties and attributes is usually the result of all other blended points – however, certain nodes blend point properties into an existing point which changes slightly the behavior of the selected blendmode. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-general/general-blending.html#blending",
    "relUrl": "/doc-general/general-blending.html#blending"
  },"489": {
    "doc": "Blending",
    "title": "Properties",
    "content": ". | Property | Description | . | Blending Filter | How to filter which attributes are going to be blended.*This only applies to attribute, not points properties*. | . | Filtered Attributes | Based on the selected filter above, this is the list of attributes that will have to match it.If the filter is inclusive (Include), only the listed attributes will be blended.If the filter is exclusive (Exclude), listed attribute won’t be blended, but every other will be. | . | Default Blending | This is the default blending applied to both point’ Attributes and Properties.*Per-attribute &amp; per-property blending can be different.* | . | Properties Overrides | Lets you select per-property override modes, if you want them to be different from the selected default. | . | Attribute Overrides | Lets you select per-attribute override modes, if you want them to be different from the selected default. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-general/general-blending.html#properties",
    "relUrl": "/doc-general/general-blending.html#properties"
  },"490": {
    "doc": "Blending",
    "title": "Blend modes",
    "content": "| : Blend Mode | |   | . | | &lt;span class=\"ebit\"&gt;None&lt;/span&gt;No blending is applied, keep the original value. | . | | &lt;span class=\"ebit\"&gt;Average&lt;/span&gt;Average all sampled values. | . | | &lt;span class=\"ebit\"&gt;Weight&lt;/span&gt;Weights based on distance to blend targets. If the results are unexpected, try ‘Lerp’ instead. | . | | &lt;span class=\"ebit\"&gt;Min&lt;/span&gt;Component-wise MIN operation.*Keeps the smallest value of all inputs, per-component.* | . | | &lt;span class=\"ebit\"&gt;Max&lt;/span&gt;Component-wise MAX operation.*Keeps the largest value of all inputs, per-component.* | . | | &lt;span class=\"ebit\"&gt;Copy&lt;/span&gt;Copy the latest incoming value, in no particular order. | . | | &lt;span class=\"ebit\"&gt;Sum&lt;/span&gt;Component-wise sum of all the inputs. | . | | &lt;span class=\"ebit\"&gt;Weighted Sum&lt;/span&gt;Component-wise weighted sum of all the inputs.*What qualify as weight depends on context*. | . | | &lt;span class=\"ebit\"&gt;Lerp&lt;/span&gt;Uses weight as lerp. If the results are unexpected, try ‘Weight’ instead.*Lerp only works properly for nodes that do a simple two-point blending.*. | . | | &lt;span class=\"ebit\"&gt;Substract&lt;/span&gt;Opposite of Sum, but substract all inputs. | . | | &lt;span class=\"ebit\"&gt;Unsigned Min&lt;/span&gt;Component-wise MIN operation on the **absolute** values, but preserve the value sign.*Keeps the smallest value of all inputs, per-component.* | . | | &lt;span class=\"ebit\"&gt;Unsigned Max&lt;/span&gt;Component-wise MAX operation on the **absolute** values, but preserve the value sign.*Keeps the smallest value of all inputs, per-component.* | . | | &lt;span class=\"ebit\"&gt;Absolute Min&lt;/span&gt;Component-wise MIN operation on the **absolute** values.*Keeps the smallest value of all inputs, per-component.* | . | | &lt;span class=\"ebit\"&gt;Absolute Max&lt;/span&gt;Component-wise MAX operation on the **absolute** values.*Keeps the smallest value of all inputs, per-component.* | . | | &lt;span class=\"ebit\"&gt;Copy (Other)&lt;/span&gt;Same as Copy, but copies the first incoming value.*Mostly only useful during attribute rolling and certain specific nodes.* | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-general/general-blending.html#blend-modes",
    "relUrl": "/doc-general/general-blending.html#blend-modes"
  },"491": {
    "doc": "Blending",
    "title": "Blending",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-general/general-blending.html",
    "relUrl": "/doc-general/general-blending.html"
  },"492": {
    "doc": "Comparisons",
    "title": "Comparisons",
    "content": "PCGEx’ comparison overview . This page lists the comparison used by a bunch of different nodes. There’s a lot of node in PCGEx that offer comparison settings – either numeric or string based. This is a summary of these; individual pages will link to this. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-general/general-comparisons.html#comparisons",
    "relUrl": "/doc-general/general-comparisons.html#comparisons"
  },"493": {
    "doc": "Comparisons",
    "title": "Numeric comparisons",
    "content": ". | Comparison | Data | . | == | Strictly equal. | . | != | Strictly not equal. | . | &gt;= | Equal or greater. | . | &lt;= | Equal or smaller. | . | &gt; | Strictly greater. | . | &lt; | Strictly smaller. | . | ~= | Nearly equal. | . | !~= | Nearly not equal. | . Approximative comparison will reveal an additional parameter, dubbed Tolerance. This represents the size of acceptable approximation for the comparison to pass. For example, when checking if 0.5 ~= 0.4 with a tolerance of 0.1 will return true. Large tolerances can be a great, cheap way to achieve results akin to a “within range” comparison! . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-general/general-comparisons.html#numeric-comparisons",
    "relUrl": "/doc-general/general-comparisons.html#numeric-comparisons"
  },"494": {
    "doc": "Comparisons",
    "title": "String comparisons",
    "content": ". | Comparison | Data | . | == | Strictly equal. | . | != | Strictly not equal. | . | == (Length) | String lengths are strictly equal. | . | != (Length) | String lengths are strictly not equal. | . | &gt;= (Length) | String length is equal or greater. | . | &lt;= (Length) | String lengths are is equal or smaller. | . | &gt; (Length) | String lengths is strictly greater. | . | &lt; (Length) | String lengths is Strictly smaller. | . | &gt; (Locale) | String locale is strictly greater.In alphabetical order. (Z is greater than A) | . | &lt; (Locale) | String locale is strictly smaller.In alphabetical order. (A is smaller than Z) | . | Contains | Check if string is contained in another one.Useful if you have solid naming conventions. | . | Starts With | Check if the string starts with another one.Useful for prefixes. | . | Ends With | Check if the string ends with another one.Useful for suffixes. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-general/general-comparisons.html#string-comparisons",
    "relUrl": "/doc-general/general-comparisons.html#string-comparisons"
  },"495": {
    "doc": "Comparisons",
    "title": "Bitmask comparisons",
    "content": ". | Comparison | Data | . | Match (any) | Value &amp; Mask != 0 (At least some flags in the mask are set) | . | Match (all) | Value &amp; Mask == Mask (All the flags in the mask are set) | . | Match (strict) | Value == Mask (Flags strictly equals mask) | . | No Match (any) | Value &amp; Mask == 0 (Flags does not contains any from mask) | . | No Match (all) | Value &amp; Mask != Mask (Flags does not contains the mask) | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-general/general-comparisons.html#bitmask-comparisons",
    "relUrl": "/doc-general/general-comparisons.html#bitmask-comparisons"
  },"496": {
    "doc": "Comparisons",
    "title": "Comparisons",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-general/general-comparisons.html",
    "relUrl": "/doc-general/general-comparisons.html"
  },"497": {
    "doc": "Basics",
    "title": "Basics",
    "content": "General concepts &amp; disambiguation . An overview of the concepts PCGEx uses, and assumption around the meaning of certain keywords. Table of content . | Points | Data / Dataset / Collection | Paths, Vtx and Edges | Clusters | Module Overrides | . Throrough this doc, you will find mention of points, Dataset, vtx, edges, clusters, paths and more. While more advanced concepts are expanded on their own page, here are a few basics: . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-general/general-concepts.html#basics",
    "relUrl": "/doc-general/general-concepts.html#basics"
  },"498": {
    "doc": "Basics",
    "title": "Points",
    "content": "Points are smallest piece of data you work with within PCG. They have a list of Static properties such as $Density, $Color, $Position, $Rotation etc. While you can change their values, you can’t remove any of them from a point. They’re its DNA. On top of static properties, point can have Dynamic attributes, are custom, user-defined properties type, names and value you control. PCGEx leverages attributes a lot, and doesn’t deal too much in properties except for blending. Some PCGEx nodes uses attributes to store internal data. These are prefixed PCGEx/. Try not do modify these unless you know exactly what you’re doing – most of them are data packed inside an int64. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-general/general-concepts.html#points",
    "relUrl": "/doc-general/general-concepts.html#points"
  },"499": {
    "doc": "Basics",
    "title": "Data / Dataset / Collection",
    "content": "Often Point Datasets, they are container for a single type of more atomic data – i.e, points. Contrary to points that share a common set of static properties, each Dataset can have its own custom list of attributes; with per-point values. Most PCGEx nodes can take multiple Dataset as input, and will process them in parallel. Some very specific nodes are processing Dataset against each others, but it’s clear when they do so. It’s important to understand that most PCGEx nodes will do their biding on individual Datasets, ignoring what’s going on with others processed in parallel : things like min/max values for example are computed per Dataset, and never against the entierety of the inputs. As a rule of thumb, PCGEx will always process Dataset in solation of the others, and output Datas in the same order as they are in the input. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-general/general-concepts.html#data--dataset--collection",
    "relUrl": "/doc-general/general-concepts.html#data--dataset--collection"
  },"500": {
    "doc": "Basics",
    "title": "Paths, Vtx and Edges",
    "content": "PCGEx uses the terms Paths, Vtx and Edges for some inputs &amp; ouputs. These are just regular Point Datasets whose name is used to convey certain assumptions. Those assumptions are covered in more details on specific sections of the doc. Namely Clusters and Paths . Keep in mind that these are just points and they can be used with any other regular node – not just PCGEx! . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-general/general-concepts.html#paths-vtx-and-edges",
    "relUrl": "/doc-general/general-concepts.html#paths-vtx-and-edges"
  },"501": {
    "doc": "Basics",
    "title": "Clusters",
    "content": "Clusters is the word PCGEx uses to mean Connected pair/groups of points. Pairs/groups are identified &amp; retrieved through tags at the moment; that will change in the future for a more robust approach. While they are still just points, make sure to check out the Clusters specific documentation! . Cluster-related nodes uses tags to store internal data. These are prefixed PCGEx/. Try not do modify these unless you know exactly what you’re doing. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-general/general-concepts.html#clusters",
    "relUrl": "/doc-general/general-concepts.html#clusters"
  },"502": {
    "doc": "Basics",
    "title": "Module Overrides",
    "content": "A few nodes require you to pick “modules” for specific behaviors, such as blending, goal picking, pathfinding search algorithm, etc. You’ll notice these modules don’t expose per-property override pins – this is a limitation of the way native PCG processes &amp; generates input pin. In order to circumvent this limitation, said nodes have an override pin prefixed Overrides : xxx Where xxx is the name of the module. This pin accepts attribute set as inputs, and will forward their values to the module. There is a couple limitations tho: . | The value is read from index 0 of the attribute set, so any subsequent row will be ignored. | The name of the attribute must match perfectly the name of the property you’re targeting. To get that name, right-click on the variable in the editor and select Copy Internal Name. Sometime the displayed name is not the internal one. | Only first-level properties are supported, as well as simple value types (e.g, the basic types supported by PCG for attributes). | FSoftObjectPath is not supported as a value and will instead be resolved. | FSoftObjectClass is not supported at all. | . If the target property is a UObject reference, the override process will try to read the override value as a path, load &amp; resolve it. You can use this to your advantage to work with more complex types such as DataAsset, or actor references. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-general/general-concepts.html#module-overrides",
    "relUrl": "/doc-general/general-concepts.html#module-overrides"
  },"503": {
    "doc": "Basics",
    "title": "Basics",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-general/general-concepts.html",
    "relUrl": "/doc-general/general-concepts.html"
  },"504": {
    "doc": "Fitting",
    "title": "Fitting",
    "content": "PCGEx’ fitting overview . This page centralizes documentation for Fitting, allowing us to keep relevant content accessible without duplicating extensive details across individual pages; as a few nodes have fitting capabilities and it’s a heavy piece of doc. Table of content . | Scale to Fit | Justification . | From | To | . | . There’s a few node in PCGEx that offer fitting settings – and while what is fitted is highly contextual, they all share the same settings. Fitting is broken down in two parts: Scale to Fit, which is responsible for scaling something against a reference point’ bounds &amp; scale, and Justification, which is responsible for the placement of the fitted something against the same reference bounds. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-general/general-fitting.html#fitting",
    "relUrl": "/doc-general/general-fitting.html#fitting"
  },"505": {
    "doc": "Fitting",
    "title": "Scale to Fit",
    "content": ". Scale the spawned asset bounds in order to fit within the host point’ bounds. | Scale to Fit Mode | Which type of scale-to-fit mode is to be applied. None disables this section, Uniform applies the same rule to each individual component, while Individual lets you pick per-component rules. | . | Scale to Fit *(value)* | If Asset is selected as a source, this is the Asset Collection that will be used for staging points. | . You can use the following rules: . | : Scale to Fit | |   | . | | &lt;span class=\"ebit\"&gt;None&lt;/span&gt;Disable the scaling rule. | . | | &lt;span class=\"ebit\"&gt;Fill&lt;/span&gt;Scale the asset so it fills the point’ bounds. | . | | &lt;span class=\"ebit\"&gt;Min&lt;/span&gt;Scale the asset so it fits snuggly within the minimum point’ bounds. | . | | &lt;span class=\"ebit\"&gt;Max&lt;/span&gt;Scale the asset so it fits snuggly within the maximum point’ bounds. | . | | &lt;span class=\"ebit\"&gt;Average&lt;/span&gt;Scale the asset so it fits the average of the point’ bounds. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-general/general-fitting.html#scale-to-fit",
    "relUrl": "/doc-general/general-fitting.html#scale-to-fit"
  },"506": {
    "doc": "Fitting",
    "title": "Justification",
    "content": ". Offset the spawned asset bounds relative to the host point’ bounds. Justification is processed per-component, after the scale-to-fit pass. | : **Per component** :| |   | . | From | The location within the **Asset** bounds that will be justified *To* the point’ bounds. *i.e, from which location in the asset do i start moving.* | . | To | The location withn the **Point** bounds to which the **Asset** bounds will be justified. *i.e, to which location in the point do i want to go.* | . | : **Consolidated custom inputs** :| |   | . | Custom from Vector Attribute | An FVector whose individual component will be used to drive From properties set to Custom.*Prefer this consolidated approach if you’re using custom values on more than one component.* | . | Custom to Vector Attribute | An FVector whose individual component will be used to drive To properties set to Custom. *Prefer this consolidated approach if you’re using custom values on more than one component.* | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-general/general-fitting.html#justification",
    "relUrl": "/doc-general/general-fitting.html#justification"
  },"507": {
    "doc": "Fitting",
    "title": "From",
    "content": "You can use the following rules for From: . | : Justify From | |   | . | | &lt;span class=\"ebit\"&gt;Center&lt;/span&gt;Uses the asset bounds’ local center as reference point. | . | | &lt;span class=\"ebit\"&gt;Min&lt;/span&gt;Uses the asset bounds’ min as reference point. | . | | &lt;span class=\"ebit\"&gt;Max&lt;/span&gt;Uses the asset bounds’ max as reference point. | . | | &lt;span class=\"ebit\"&gt;Pivot&lt;/span&gt;Uses the asset pivot as reference point, ignoring bounds. | . | | &lt;span class=\"ebit\"&gt;Custom&lt;/span&gt;Uses a lerped reference point between the asset bounds’ min &amp; max.*Value is expected to be in the range 0-1 but isn’t clamped.* | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-general/general-fitting.html#from",
    "relUrl": "/doc-general/general-fitting.html#from"
  },"508": {
    "doc": "Fitting",
    "title": "To",
    "content": "You can use the following rules for To: . | : Justify To | |   | . | | &lt;span class=\"ebit\"&gt;Same&lt;/span&gt;Auto-selects the same justification as From, but computed against the point’ bounds. | . | | &lt;span class=\"ebit\"&gt;Center&lt;/span&gt;Uses the point bounds’ local center as reference point. | . | | &lt;span class=\"ebit\"&gt;Min&lt;/span&gt;Uses the point bounds’ min as reference point. | . | | &lt;span class=\"ebit\"&gt;Max&lt;/span&gt;Uses the point bounds’ max as reference point. | . | | &lt;span class=\"ebit\"&gt;Pivot&lt;/span&gt;Uses the point bounds’ pivot, ignoring bounds. | . | | &lt;span class=\"ebit\"&gt;Custom&lt;/span&gt;Uses a lerped reference point between the asset bounds’ min &amp; max.*Value is expected to be in the range 0-1 but isn’t clamped.* | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-general/general-fitting.html#to",
    "relUrl": "/doc-general/general-fitting.html#to"
  },"509": {
    "doc": "Fitting",
    "title": "Fitting",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-general/general-fitting.html",
    "relUrl": "/doc-general/general-fitting.html"
  },"510": {
    "doc": "🝰 Heuristic Attribute",
    "title": "🝰 Heuristic Attribute",
    "content": "Attribute-driven heuristics . The Attribute heuristics uses custom point or edge value as raw score. HeuristicsA single heuristics definition . Table of content . | Properties | . Heuristics Attribute allows fine-grained and precise control over pathfinding constraints by leveraging user-defined attributes. When dealing with values, keep in mind that lower numbers are considered more desirable by the ⊚ Search algorithms. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/heuristics/heuristic-attribute.html#heuristic-attribute",
    "relUrl": "/doc-pathfinding/heuristics/heuristic-attribute.html#heuristic-attribute"
  },"511": {
    "doc": "🝰 Heuristic Attribute",
    "title": "Properties",
    "content": ". | Property | Description | . | Basics |   | . | Weight Factor | Weight of this heuristic against other concurrent heuristics.The higher the value, the more important it is during resolution. | . | Invert | Whether the score of this heuristic should be inverted.This effectively samples the score curve backwards. | . | Score Curve | Curve over which the heuristic values will be remapped. | . | **Attribute Settings**| |   | . | Source | Whether to read the attribute from Vtx or Edges | . | Attribute | The attribute that will be used as score. | . | Local Weight |   | . | Use Local Weight Multiplier | If enabled, this heuristic will be using a dynamic, per-point weight factor. | . | Local Weight Multiplier Source | Whether to read the weight from Vtx or Edges points. | . | Local Weight Multiplier Attribute | Attribute to read the local weight from. | . | Roaming |   | . | UVW Seed | Bounds-relative roaming seed point | . | UVW Goal | Bounds-relative roaming goal point | . Roaming seed/goal points are used as fallback in contexts that are using heuristics but don’t have explicit seed/goals; such as Cluster Refine‘MST or Score-based refinements. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/heuristics/heuristic-attribute.html#properties",
    "relUrl": "/doc-pathfinding/heuristics/heuristic-attribute.html#properties"
  },"512": {
    "doc": "🝰 Heuristic Attribute",
    "title": "🝰 Heuristic Attribute",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/heuristics/heuristic-attribute.html",
    "relUrl": "/doc-pathfinding/heuristics/heuristic-attribute.html"
  },"513": {
    "doc": "🝰 Azimuth",
    "title": "🝰 Azimuth",
    "content": "Favor edges directed toward the goal. The Azimuth heuristic attempt to force the path to always aim toward the goal. HeuristicsA single heuristics definition . Table of content . | Properties | . The Azimuth heuristic favors traversing edges that are directed toward the search goal. From a purely result perspective, it may look like a shortest path because it tend to produce more “straight” results going from seed to goal (if the topologies allows for it), but under the hood it’s a very different logic. This heuristics works best when combined with other more intricate ones to enforce some visual stability to the path. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/heuristics/heuristic-azimuth.html#azimuth",
    "relUrl": "/doc-pathfinding/heuristics/heuristic-azimuth.html#azimuth"
  },"514": {
    "doc": "🝰 Azimuth",
    "title": "Properties",
    "content": ". | Property | Description | . | Basics |   | . | Weight Factor | Weight of this heuristic against other concurrent heuristics.The higher the value, the more important it is during resolution. | . | Invert | Whether the score of this heuristic should be inverted.This effectively samples the score curve backwards. | . | Score Curve | Curve over which the heuristic values will be remapped. | . | Local Weight |   | . | Use Local Weight Multiplier | If enabled, this heuristic will be using a dynamic, per-point weight factor. | . | Local Weight Multiplier Source | Whether to read the weight from Vtx or Edges points. | . | Local Weight Multiplier Attribute | Attribute to read the local weight from. | . | Roaming |   | . | UVW Seed | Bounds-relative roaming seed point | . | UVW Goal | Bounds-relative roaming goal point | . Roaming seed/goal points are used as fallback in contexts that are using heuristics but don’t have explicit seed/goals; such as Cluster Refine‘MST or Score-based refinements. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/heuristics/heuristic-azimuth.html#properties",
    "relUrl": "/doc-pathfinding/heuristics/heuristic-azimuth.html#properties"
  },"515": {
    "doc": "🝰 Azimuth",
    "title": "🝰 Azimuth",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/heuristics/heuristic-azimuth.html",
    "relUrl": "/doc-pathfinding/heuristics/heuristic-azimuth.html"
  },"516": {
    "doc": "🝰 Shortest Distance",
    "title": "🝰 Shortest Distance",
    "content": "Favor shortest distance. The Shortest Distance heuristic node … . HeuristicsA single heuristics definition . Table of content . | Properties | . The Shortest Distance is the most basic heuristics of all. Scores are directly tied to edge’ length, favoring shorter distances at all times. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/heuristics/heuristic-distance.html#shortest-distance",
    "relUrl": "/doc-pathfinding/heuristics/heuristic-distance.html#shortest-distance"
  },"517": {
    "doc": "🝰 Shortest Distance",
    "title": "Properties",
    "content": ". | Property | Description | . | Basics |   | . | Weight Factor | Weight of this heuristic against other concurrent heuristics.The higher the value, the more important it is during resolution. | . | Invert | Whether the score of this heuristic should be inverted.This effectively samples the score curve backwards. | . | Score Curve | Curve over which the heuristic values will be remapped. | . | **Distance Settings**| |   | . | TBD | TBD | . | Local Weight |   | . | Use Local Weight Multiplier | If enabled, this heuristic will be using a dynamic, per-point weight factor. | . | Local Weight Multiplier Source | Whether to read the weight from Vtx or Edges points. | . | Local Weight Multiplier Attribute | Attribute to read the local weight from. | . | Roaming |   | . | UVW Seed | Bounds-relative roaming seed point | . | UVW Goal | Bounds-relative roaming goal point | . Roaming seed/goal points are used as fallback in contexts that are using heuristics but don’t have explicit seed/goals; such as Cluster Refine‘MST or Score-based refinements. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/heuristics/heuristic-distance.html#properties",
    "relUrl": "/doc-pathfinding/heuristics/heuristic-distance.html#properties"
  },"518": {
    "doc": "🝰 Shortest Distance",
    "title": "🝰 Shortest Distance",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/heuristics/heuristic-distance.html",
    "relUrl": "/doc-pathfinding/heuristics/heuristic-distance.html"
  },"519": {
    "doc": "🝰 Feedback",
    "title": "🝰 Feedback",
    "content": "Favor uncharted points &amp; edges. The Feedback heuristic add/remove score value to points &amp; edges that are “in use” by other previously computed paths. HeuristicsA single heuristics definition . Table of content . | Properties . | Global vs Local feedback | . | . The Feedback heuristic is very different from other heuristic nodes. It uses validated path within the scope of a single pathfinding node to make validated traversal more or less likely to be traversed by subsequent queries. There is two main “modes” : local &amp; global feedback. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/heuristics/heuristic-feedback.html#feedback",
    "relUrl": "/doc-pathfinding/heuristics/heuristic-feedback.html#feedback"
  },"520": {
    "doc": "🝰 Feedback",
    "title": "Properties",
    "content": ". | Property | Description | . | Basics |   | . | Weight Factor | Weight of this heuristic against other concurrent heuristics.The higher the value, the more important it is during resolution. | . | Invert | Whether the score of this heuristic should be inverted.This effectively samples the score curve backwards. | . | Score Curve | Curve over which the heuristic values will be remapped. | . | **Feedback Settings**| |   | . | Visited Point Weight Factor | Multiplier to be applied to traversed nodes. | . | Visited Edge Weight Factor | Multiplier to be applied to traversed edges. | . | Global Feedback | Whether this feedback should be *global* or *local* | . | Affect All Connected Edges | If enabled, the extra score affect all edges connected to the traversed Vtx, not just the one actually traversed. | . | Local Weight |   | . | Use Local Weight Multiplier | If enabled, this heuristic will be using a dynamic, per-point weight factor. | . | Local Weight Multiplier Source | Whether to read the weight from Vtx or Edges points. | . | Local Weight Multiplier Attribute | Attribute to read the local weight from. | . | Roaming |   | . | UVW Seed | Bounds-relative roaming seed point | . | UVW Goal | Bounds-relative roaming goal point | . Roaming seed/goal points are used as fallback in contexts that are using heuristics but don’t have explicit seed/goals; such as Cluster Refine‘MST or Score-based refinements. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/heuristics/heuristic-feedback.html#properties",
    "relUrl": "/doc-pathfinding/heuristics/heuristic-feedback.html#properties"
  },"521": {
    "doc": "🝰 Feedback",
    "title": "Global vs Local feedback",
    "content": "Global feedback is applied in the scope of the entire node: each completed query will score down the next ones. As soon as a query is resolved (a Seed is connected to a Goal), the Vtx and Edges it traverses are scored by their specified factors. If global feedback is disabled, the extra scoring is only processed for the duration of the query – as such it only works with plots. In order to be properly accounted for, global feedback requires queries to be processed one after another, greatly affecting processing time! . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/heuristics/heuristic-feedback.html#global-vs-local-feedback",
    "relUrl": "/doc-pathfinding/heuristics/heuristic-feedback.html#global-vs-local-feedback"
  },"522": {
    "doc": "🝰 Feedback",
    "title": "🝰 Feedback",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/heuristics/heuristic-feedback.html",
    "relUrl": "/doc-pathfinding/heuristics/heuristic-feedback.html"
  },"523": {
    "doc": "🝰 Inertia",
    "title": "🝰 Inertia",
    "content": "Favor active direction preservation. The Inertia heuristic uses the ongoing traversal data to try and maintain a consistent direction, as if the algorithm had “inertia”. HeuristicsA single heuristics definition . Table of content . | Properties | . The Inertia heuristic samples the search stack of the algorithm to favor the averaged direction of the last few samples, adding “inertia” to the search algorithm. Inertia can be hard to work with depending on the type of pathfinding you’re working with, and may not produce results as “smooth” as one may expect given the name. However it does a good job when combined with other heuristics to overshoot the path from its starting point. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/heuristics/heuristic-inertia.html#inertia",
    "relUrl": "/doc-pathfinding/heuristics/heuristic-inertia.html#inertia"
  },"524": {
    "doc": "🝰 Inertia",
    "title": "Properties",
    "content": ". | Property | Description | . | Basics |   | . | Weight Factor | Weight of this heuristic against other concurrent heuristics.The higher the value, the more important it is during resolution. | . | Invert | Whether the score of this heuristic should be inverted.This effectively samples the score curve backwards. | . | Score Curve | Curve over which the heuristic values will be remapped. | . | **Inertia Settings**| |   | . | Samples | THe number of samples that will be averaged from the current search location. | . | Ignore If Not Enough Samples | Whether to use the fallback weight if there’s not enough samples available. | . | **Fallback values**| |   | . | Global Inertia Score | Since inertia requires a search history, it cannot be used to compute global score some algorithms rely on (A*). The specified value will be used as fallback instead. | . | Fallback Inertia Score | This fallback score value is the one used if there is no or not enough samples. | . | Local Weight |   | . | Use Local Weight Multiplier | If enabled, this heuristic will be using a dynamic, per-point weight factor. | . | Local Weight Multiplier Source | Whether to read the weight from Vtx or Edges points. | . | Local Weight Multiplier Attribute | Attribute to read the local weight from. | . | Roaming |   | . | UVW Seed | Bounds-relative roaming seed point | . | UVW Goal | Bounds-relative roaming goal point | . Roaming seed/goal points are used as fallback in contexts that are using heuristics but don’t have explicit seed/goals; such as Cluster Refine‘MST or Score-based refinements. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/heuristics/heuristic-inertia.html#properties",
    "relUrl": "/doc-pathfinding/heuristics/heuristic-inertia.html#properties"
  },"525": {
    "doc": "🝰 Inertia",
    "title": "🝰 Inertia",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/heuristics/heuristic-inertia.html",
    "relUrl": "/doc-pathfinding/heuristics/heuristic-inertia.html"
  },"526": {
    "doc": "🝰 Least Nodes",
    "title": "🝰 Least Nodes",
    "content": "Favor traversing the least amount of nodes. The Least Nodes heuristic favor node count traversal over anything else. HeuristicsA single heuristics definition . Table of content . | Properties | . The Least Node heuristic score the number of traversed nodes with an equal, constant value, favoring paths traverse the fewest amount of node. Note that fewer nodes doesn’t means shortest paths! . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/heuristics/heuristic-node-count.html#least-nodes",
    "relUrl": "/doc-pathfinding/heuristics/heuristic-node-count.html#least-nodes"
  },"527": {
    "doc": "🝰 Least Nodes",
    "title": "Properties",
    "content": ". | Property | Description | . | Basics |   | . | Weight Factor | Weight of this heuristic against other concurrent heuristics.The higher the value, the more important it is during resolution. | . | Invert | Whether the score of this heuristic should be inverted.This effectively samples the score curve backwards. | . | Score Curve | Curve over which the heuristic values will be remapped. | . | Local Weight |   | . | Use Local Weight Multiplier | If enabled, this heuristic will be using a dynamic, per-point weight factor. | . | Local Weight Multiplier Source | Whether to read the weight from Vtx or Edges points. | . | Local Weight Multiplier Attribute | Attribute to read the local weight from. | . | Roaming |   | . | UVW Seed | Bounds-relative roaming seed point | . | UVW Goal | Bounds-relative roaming goal point | . Roaming seed/goal points are used as fallback in contexts that are using heuristics but don’t have explicit seed/goals; such as Cluster Refine‘MST or Score-based refinements. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/heuristics/heuristic-node-count.html#properties",
    "relUrl": "/doc-pathfinding/heuristics/heuristic-node-count.html#properties"
  },"528": {
    "doc": "🝰 Least Nodes",
    "title": "🝰 Least Nodes",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/heuristics/heuristic-node-count.html",
    "relUrl": "/doc-pathfinding/heuristics/heuristic-node-count.html"
  },"529": {
    "doc": "🝰 Steepness",
    "title": "🝰 Steepness",
    "content": "Favor flat trajectories. The Steepness heuristic uses the edge angle against an up vector to compute a dot product that is used to determine whether the edge should be considered flat or not. HeuristicsA single heuristics definition . Table of content . | Properties | . The Steepness heuristic favor edge directions that are perpendicular or opposite to a specified up vector. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/heuristics/heuristic-steepness.html#steepness",
    "relUrl": "/doc-pathfinding/heuristics/heuristic-steepness.html#steepness"
  },"530": {
    "doc": "🝰 Steepness",
    "title": "Properties",
    "content": ". | Property | Description | . | Basics |   | . | Weight Factor | Weight of this heuristic against other concurrent heuristics.The higher the value, the more important it is during resolution. | . | Invert | Whether the score of this heuristic should be inverted.This effectively samples the score curve backwards. | . | Score Curve | Curve over which the heuristic values will be remapped. | . | **Steepness Settings**| |   | . | Up Vector | Which direction is up. Traversed edge direction will be compared against it to measure how \"steep\" they are. | . | Absolute Steepness | Whether the steepness goes both ways. If enabled, this favor generally flat terrain; if disabled, directions that mirror the Up Vector are considered even more desirable than flat. | . | Local Weight |   | . | Use Local Weight Multiplier | If enabled, this heuristic will be using a dynamic, per-point weight factor. | . | Local Weight Multiplier Source | Whether to read the weight from Vtx or Edges points. | . | Local Weight Multiplier Attribute | Attribute to read the local weight from. | . | Roaming |   | . | UVW Seed | Bounds-relative roaming seed point | . | UVW Goal | Bounds-relative roaming goal point | . Roaming seed/goal points are used as fallback in contexts that are using heuristics but don’t have explicit seed/goals; such as Cluster Refine‘MST or Score-based refinements. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/heuristics/heuristic-steepness.html#properties",
    "relUrl": "/doc-pathfinding/heuristics/heuristic-steepness.html#properties"
  },"531": {
    "doc": "🝰 Steepness",
    "title": "🝰 Steepness",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/heuristics/heuristic-steepness.html",
    "relUrl": "/doc-pathfinding/heuristics/heuristic-steepness.html"
  },"532": {
    "doc": "How to doc",
    "title": "How to doc",
    "content": "A brief summary of how to edit this documentation . This page covers some very basics on how to setup the documentation locally, edit it, and publish changes. There’s some oddities in the way this documentation needs to be edited for things to work – I know it’s far from ideal but I’d like to keep things the way they are. I’d be glad to add additional modules to makes things prettier, tweak the CSS that kind of things; but I’m not going to migrate the documentation to another system or generator because I put way too much time and effort into this one already 😅 . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/how-to-doc.html#how-to-doc",
    "relUrl": "/how-to-doc.html#how-to-doc"
  },"533": {
    "doc": "How to doc",
    "title": "Workflow",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/how-to-doc.html#workflow",
    "relUrl": "/how-to-doc.html#workflow"
  },"534": {
    "doc": "How to doc",
    "title": "How to doc",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/how-to-doc.html",
    "relUrl": "/how-to-doc.html"
  },"535": {
    "doc": "Convex Hull 2D",
    "title": "Convex Hull 2D",
    "content": "Outputs a 2D convex hull. The Convex Hull 2D outputs the edges/graph of a 2D convex hull. Prune points to exclude non-hull vertices. Specify attributes and projection settings for customization. InPoints clouds that will be triangulated VtxEndpoints of the output Edges EdgesEdges associated with the output Vtxs PathsHull points ordered as a path . Related . | Working with Clusters | . Table of content . | Properties . | Projection Settings | Cluster Output Settings | . | . The 2D Convex Hull node capture the convex bounding shape of a set of point in two dimensions. Under-the-hood the points are first projected on a plane, and the hull is deducted from that projection. The node outputs a single cluster that contains the unordered hull &amp; its edges, as well as an actual “canon” path, whose points are ordered in clockwise order. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/hulls/hull-convex-hull-2d.html#convex-hull-2d",
    "relUrl": "/doc-clusters/hulls/hull-convex-hull-2d.html#convex-hull-2d"
  },"536": {
    "doc": "Convex Hull 2D",
    "title": "Properties",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/hulls/hull-convex-hull-2d.html#properties",
    "relUrl": "/doc-clusters/hulls/hull-convex-hull-2d.html#properties"
  },"537": {
    "doc": "Convex Hull 2D",
    "title": "Projection Settings",
    "content": ". The projection settings control how the point position is translated to a 2D space before the graph is computed; and how this projection will translate back to the original space, if relevant. | Property | Description | . | Projection Normal | Normal vector of the plane used for projection.By default, the projection plan normal is Up; so the graph is computed over the X Y plane. | . | Local Projection Normal | If enabled, uses a per-point projection vector. | . | Local Normal | Attribute ti read normal from, | . Local projection normal is very powerful but can also be very clunky to use – it’s very easy to end up with singularities that will prevent the graph from being properly computed. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/hulls/hull-convex-hull-2d.html#projection-settings",
    "relUrl": "/doc-clusters/hulls/hull-convex-hull-2d.html#projection-settings"
  },"538": {
    "doc": "Convex Hull 2D",
    "title": "Cluster Output Settings",
    "content": "See Working with Clusters - Cluster Output Settings. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/hulls/hull-convex-hull-2d.html#cluster-output-settings",
    "relUrl": "/doc-clusters/hulls/hull-convex-hull-2d.html#cluster-output-settings"
  },"539": {
    "doc": "Convex Hull 2D",
    "title": "Convex Hull 2D",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/hulls/hull-convex-hull-2d.html",
    "relUrl": "/doc-clusters/hulls/hull-convex-hull-2d.html"
  },"540": {
    "doc": "Convex Hull 3D",
    "title": "Convex Hull 3D",
    "content": "Outputs a 3D convex hull. The Convex Hull 3D outputs the edges/graph of a 3D convex hull. Prune points to exclude non-hull vertices. Specify attributes and projection settings for customization. InPoints clouds that will be triangulated VtxEndpoints of the output Edges EdgesEdges associated with the output Vtxs . Related . | Working with Clusters | . Table of content . | Properties . | Cluster Output Settings | . | . The 3D Convex Hull node capture the convex bounding shape of a set of point in three dimensions. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/hulls/hull-convex-hull-3d.html#convex-hull-3d",
    "relUrl": "/doc-clusters/hulls/hull-convex-hull-3d.html#convex-hull-3d"
  },"541": {
    "doc": "Convex Hull 3D",
    "title": "Properties",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/hulls/hull-convex-hull-3d.html#properties",
    "relUrl": "/doc-clusters/hulls/hull-convex-hull-3d.html#properties"
  },"542": {
    "doc": "Convex Hull 3D",
    "title": "Cluster Output Settings",
    "content": "See Working with Clusters - Cluster Output Settings. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/hulls/hull-convex-hull-3d.html#cluster-output-settings",
    "relUrl": "/doc-clusters/hulls/hull-convex-hull-3d.html#cluster-output-settings"
  },"543": {
    "doc": "Convex Hull 3D",
    "title": "Convex Hull 3D",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/hulls/hull-convex-hull-3d.html",
    "relUrl": "/doc-clusters/hulls/hull-convex-hull-3d.html"
  },"544": {
    "doc": "Hulls",
    "title": "Hulls",
    "content": "Convex hull algorithms . TBD . Table of content . | Available Hulls | . Hulls capture the convex bounding shape of a set of point. The current implementation is based on an underlying Delaunay Graph. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/hulls/#hulls",
    "relUrl": "/doc-clusters/hulls/#hulls"
  },"545": {
    "doc": "Hulls",
    "title": "Available Hulls",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/hulls/#available-hulls",
    "relUrl": "/doc-clusters/hulls/#available-hulls"
  },"546": {
    "doc": "Hulls",
    "title": "Convex Hull 3D",
    "content": "Outputs a 3D convex hull. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/hulls/#convex-hull-3d",
    "relUrl": "/doc-clusters/hulls/#convex-hull-3d"
  },"547": {
    "doc": "Hulls",
    "title": "Convex Hull 2D",
    "content": "Outputs a 2D convex hull. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/hulls/#convex-hull-2d",
    "relUrl": "/doc-clusters/hulls/#convex-hull-2d"
  },"548": {
    "doc": "Hulls",
    "title": "Hulls",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/hulls/",
    "relUrl": "/doc-clusters/hulls/"
  },"549": {
    "doc": "Packing Clusters",
    "title": "Packing Clusters",
    "content": "Two nodes to conveniently pack/unpack cluster data. TBD . Table of content . | Packing &amp; Unpacking Clusters | . Packing and umpacking cluster are a pair of nodes designed to “pack” a single cluster’ Vtx and Edges into a single point group. This is especially useful if you want to safe clusters as PCG Point Data Assets. If you’re here because you’re looking for a way to loop over individual cluster, while packing/unpacking will work, it’s not efficient. Prefer to loop over Edges and use Find Clusters inside the loop’ body. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/packing-clusters/#packing-clusters",
    "relUrl": "/doc-clusters/packing-clusters/#packing-clusters"
  },"550": {
    "doc": "Packing Clusters",
    "title": "Packing &amp; Unpacking Clusters",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/packing-clusters/#packing--unpacking-clusters",
    "relUrl": "/doc-clusters/packing-clusters/#packing--unpacking-clusters"
  },"551": {
    "doc": "Packing Clusters",
    "title": "Pack Clusters",
    "content": "Pack Clusters . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/packing-clusters/#pack-clusters",
    "relUrl": "/doc-clusters/packing-clusters/#pack-clusters"
  },"552": {
    "doc": "Packing Clusters",
    "title": "Unpack Clusters",
    "content": "Unpack Clusters . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/packing-clusters/#unpack-clusters",
    "relUrl": "/doc-clusters/packing-clusters/#unpack-clusters"
  },"553": {
    "doc": "Packing Clusters",
    "title": "Packing Clusters",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/packing-clusters/",
    "relUrl": "/doc-clusters/packing-clusters/"
  },"554": {
    "doc": "Properties : Vtx",
    "title": "Properties : Vtx",
    "content": "PCGEx | Cluster : Vtx Properties Compute vtx extra data . The Vtx Properties node allows you to compute and write additional data for vertices within a cluster. It utilizes external nodes to define individual property outputs. You can input multiple property nodes, ensuring unique names for each to avoid overwriting issues. VtxEndpoints of the input Edges EdgesEdges associated with the input Vtxs PropertiesIndividual 'Vtx Property' nodes VtxEndpoints of the output Edges EdgesEdges associated with the output Vtxs . Related . | . Table of content . | Property Nodes | Properties | . The Vtx Properties node lets you extract &amp; write cluster-related properties to individual Vtx points. Individual output definitions/settings use external nodes. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/properties-vtx/#properties--vtx",
    "relUrl": "/doc-clusters/properties-vtx/#properties--vtx"
  },"555": {
    "doc": "Properties : Vtx",
    "title": "Property Nodes",
    "content": "Properties input are at the core of the Vtx Properties node. You can connect as many properties node as you’d like to the Properties input. Make sure not to use duplicate output names otherwise they will overwrite each other in no guaranteed order. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/properties-vtx/#property-nodes",
    "relUrl": "/doc-clusters/properties-vtx/#property-nodes"
  },"556": {
    "doc": "Properties : Vtx",
    "title": "🝊 Special Edges",
    "content": "Gather infos from special-case edges . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/properties-vtx/#special-edges",
    "relUrl": "/doc-clusters/properties-vtx/#special-edges"
  },"557": {
    "doc": "Properties : Vtx",
    "title": "🝊 Special Neighbors",
    "content": "Gather infos from special-case neighbors . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/properties-vtx/#special-neighbors",
    "relUrl": "/doc-clusters/properties-vtx/#special-neighbors"
  },"558": {
    "doc": "Properties : Vtx",
    "title": "🝊 Edge Match",
    "content": "Find the neighbors that best match a given direction . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/properties-vtx/#edge-match",
    "relUrl": "/doc-clusters/properties-vtx/#edge-match"
  },"559": {
    "doc": "Properties : Vtx",
    "title": "Properties",
    "content": ". | Property | Description | . | :**Settings**| |   | . | Edge Count | If enabled, output the number of edges this vtx is connected to. | . | Normal | If enabled, output the averaged normal of the vtx based on all connected edges.*This output is hardly usable for highly 3-dimensional nodes.* | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/properties-vtx/#properties",
    "relUrl": "/doc-clusters/properties-vtx/#properties"
  },"560": {
    "doc": "Properties : Vtx",
    "title": "Properties : Vtx",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/properties-vtx/",
    "relUrl": "/doc-clusters/properties-vtx/"
  },"561": {
    "doc": "Clusters",
    "title": "Clusters",
    "content": "Arithmetic vtx/edge clusters generation &amp; operations . Easily generate relational structures from points . This section contains all the nodes that contribute to PCGEx’ cluster ecosystem, such as generators and utilities. Make sure to check out Working with Clusters first. It is tightly related to and Pathfinding . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/#clusters",
    "relUrl": "/doc-clusters/#clusters"
  },"562": {
    "doc": "Clusters",
    "title": "Clusters Nodes",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/#clusters-nodes",
    "relUrl": "/doc-clusters/#clusters-nodes"
  },"563": {
    "doc": "Clusters",
    "title": "Connect Points",
    "content": "Creates connections between points using various probes. · · · · ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/#connect-points",
    "relUrl": "/doc-clusters/#connect-points"
  },"564": {
    "doc": "Clusters",
    "title": "Diagrams",
    "content": "Delaunay 2D / 3D, Voronoi 2D / 3D . · · · · ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/#diagrams",
    "relUrl": "/doc-clusters/#diagrams"
  },"565": {
    "doc": "Clusters",
    "title": "Fuse Clusters",
    "content": "Fuse clusters together by finding Point/Edge and Edge/Edge intersections. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/#fuse-clusters",
    "relUrl": "/doc-clusters/#fuse-clusters"
  },"566": {
    "doc": "Clusters",
    "title": "Refine",
    "content": "One-stop node for pruning edges . · · · · · · · · · · · · · ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/#refine",
    "relUrl": "/doc-clusters/#refine"
  },"567": {
    "doc": "Clusters",
    "title": "Mesh to Clusters",
    "content": "Convert mesh/geometry topology to usable clusters. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/#mesh-to-clusters",
    "relUrl": "/doc-clusters/#mesh-to-clusters"
  },"568": {
    "doc": "Clusters",
    "title": "Properties : Edge",
    "content": "Compute edge extra data from its vertices . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/#properties--edge",
    "relUrl": "/doc-clusters/#properties--edge"
  },"569": {
    "doc": "Clusters",
    "title": "Edge Order",
    "content": "Fix the order of edge start &amp; end points . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/#edge-order",
    "relUrl": "/doc-clusters/#edge-order"
  },"570": {
    "doc": "Clusters",
    "title": "Properties : Vtx",
    "content": "Compute vtx extra data . · · · ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/#properties--vtx",
    "relUrl": "/doc-clusters/#properties--vtx"
  },"571": {
    "doc": "Clusters",
    "title": "Flag Nodes",
    "content": "Find conditional-based states to nodes within a graph . · ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/#flag-nodes",
    "relUrl": "/doc-clusters/#flag-nodes"
  },"572": {
    "doc": "Clusters",
    "title": "Cut Clusters",
    "content": "Cut clusters using paths . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/#cut-clusters",
    "relUrl": "/doc-clusters/#cut-clusters"
  },"573": {
    "doc": "Clusters",
    "title": "Copy Cluster to Points",
    "content": "Creates copies of entire clusters to a set of target points . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/#copy-cluster-to-points",
    "relUrl": "/doc-clusters/#copy-cluster-to-points"
  },"574": {
    "doc": "Clusters",
    "title": "Hulls",
    "content": "Convex hull algorithms . · · ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/#hulls",
    "relUrl": "/doc-clusters/#hulls"
  },"575": {
    "doc": "Clusters",
    "title": "Sanitize Clusters",
    "content": "Ensure clusters are clean and complete . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/#sanitize-clusters",
    "relUrl": "/doc-clusters/#sanitize-clusters"
  },"576": {
    "doc": "Clusters",
    "title": "Pick Closest Cluster",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/#pick-closest-cluster",
    "relUrl": "/doc-clusters/#pick-closest-cluster"
  },"577": {
    "doc": "Clusters",
    "title": "Relax",
    "content": "Relax points positions of a graph. · · ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/#relax",
    "relUrl": "/doc-clusters/#relax"
  },"578": {
    "doc": "Clusters",
    "title": "Find Clusters",
    "content": "Find matching cluster data. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/#find-clusters",
    "relUrl": "/doc-clusters/#find-clusters"
  },"579": {
    "doc": "Clusters",
    "title": "Partition Vertices",
    "content": "Create per-cluster Vtx datasets . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/#partition-vertices",
    "relUrl": "/doc-clusters/#partition-vertices"
  },"580": {
    "doc": "Clusters",
    "title": "Break to Paths",
    "content": "Breaks clusters edge chains into individual paths . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/#break-to-paths",
    "relUrl": "/doc-clusters/#break-to-paths"
  },"581": {
    "doc": "Clusters",
    "title": "Make Unique",
    "content": "Forward clusters with a new unique pair of tags. It’s like creating a copy, only much faster. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/#make-unique",
    "relUrl": "/doc-clusters/#make-unique"
  },"582": {
    "doc": "Clusters",
    "title": "Custom Graph",
    "content": "Build clusters using custom blueprints! . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/#custom-graph",
    "relUrl": "/doc-clusters/#custom-graph"
  },"583": {
    "doc": "Clusters",
    "title": "Connect Clusters",
    "content": "Connects clusters together. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/#connect-clusters",
    "relUrl": "/doc-clusters/#connect-clusters"
  },"584": {
    "doc": "Clusters",
    "title": "Find point on Bounds",
    "content": "Find a point in each cluster that is the closest to a bound-relative position. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/#find-point-on-bounds",
    "relUrl": "/doc-clusters/#find-point-on-bounds"
  },"585": {
    "doc": "Clusters",
    "title": "Cluster Filters",
    "content": "Cluster-specific filters . · · · · · · · ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/#cluster-filters",
    "relUrl": "/doc-clusters/#cluster-filters"
  },"586": {
    "doc": "Clusters",
    "title": "Packing Clusters",
    "content": "Two nodes to conveniently pack/unpack cluster data. · · . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/#packing-clusters",
    "relUrl": "/doc-clusters/#packing-clusters"
  },"587": {
    "doc": "Clusters",
    "title": "Node(Vtx) Filters",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/#nodevtx-filters",
    "relUrl": "/doc-clusters/#nodevtx-filters"
  },"588": {
    "doc": "Clusters",
    "title": "🝖 Adjacency (Node)",
    "content": "Check if adjacent node meet specific conditions . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/#adjacency-node",
    "relUrl": "/doc-clusters/#adjacency-node"
  },"589": {
    "doc": "Clusters",
    "title": "🝖 Edge Direction (Node)",
    "content": "Check if adjacent node meet specific conditions . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/#edge-direction-node",
    "relUrl": "/doc-clusters/#edge-direction-node"
  },"590": {
    "doc": "Clusters",
    "title": "🝖 Neighbors Count (Node)",
    "content": "Check a node’ neighbors count . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/#neighbors-count-node",
    "relUrl": "/doc-clusters/#neighbors-count-node"
  },"591": {
    "doc": "Clusters",
    "title": "Edge filters",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/#edge-filters",
    "relUrl": "/doc-clusters/#edge-filters"
  },"592": {
    "doc": "Clusters",
    "title": "🝖 Edge Direction (Edge)",
    "content": "Check if the edge direction is within a given range. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/#edge-direction-edge",
    "relUrl": "/doc-clusters/#edge-direction-edge"
  },"593": {
    "doc": "Clusters",
    "title": "🝖 Endpoints Compare (Numeric)",
    "content": "Compare the value of an attribute on each of the edge endpoint. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/#endpoints-compare-numeric",
    "relUrl": "/doc-clusters/#endpoints-compare-numeric"
  },"594": {
    "doc": "Clusters",
    "title": "🝖 Endpoints Compare (String)",
    "content": "Compare the value of an attribute on each of the edge endpoint. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/#endpoints-compare-string",
    "relUrl": "/doc-clusters/#endpoints-compare-string"
  },"595": {
    "doc": "Clusters",
    "title": "🝖 Neighbors Count (Edge)",
    "content": "Check a node’ neighbors count . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/#neighbors-count-edge",
    "relUrl": "/doc-clusters/#neighbors-count-edge"
  },"596": {
    "doc": "Clusters",
    "title": "Clusters",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/",
    "relUrl": "/doc-clusters/"
  },"597": {
    "doc": "🝰 Heuristics",
    "title": "🝰 Heuristics",
    "content": "An inventory of the available heuristics modules. Heuristics modules are primarily used by Pathfinding nodes, such as Edges Pathfinding and Plot Edges Pathfinding . Heuristics are basically some under-the-hood maths used by ⊚ Search Algorithms to gauge whether one path is better than another. Different algorithms use heuristics differently, but their values is computed consistently. Heuristic nodes support dynamic weighting – e.g, using a point or edge attribute to modulate their weight based on context. While it’s nice on paper, there is an overhead associated to it, and can deteriorate scoring quality in certain scenarios. They require some trial and error to get nice results. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/heuristics/#heuristics",
    "relUrl": "/doc-pathfinding/heuristics/#heuristics"
  },"598": {
    "doc": "🝰 Heuristics",
    "title": "Modules",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/heuristics/#modules",
    "relUrl": "/doc-pathfinding/heuristics/#modules"
  },"599": {
    "doc": "🝰 Heuristics",
    "title": "🝰 Heuristic Attribute",
    "content": "Attribute-driven heuristics . The Attribute heuristics uses custom point or edge value as raw score. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/heuristics/#heuristic-attribute",
    "relUrl": "/doc-pathfinding/heuristics/#heuristic-attribute"
  },"600": {
    "doc": "🝰 Heuristics",
    "title": "🝰 Shortest Distance",
    "content": "Favor shortest distance. The Shortest Distance heuristic node … . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/heuristics/#shortest-distance",
    "relUrl": "/doc-pathfinding/heuristics/#shortest-distance"
  },"601": {
    "doc": "🝰 Heuristics",
    "title": "🝰 Feedback",
    "content": "Favor uncharted points &amp; edges. The Feedback heuristic add/remove score value to points &amp; edges that are “in use” by other previously computed paths. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/heuristics/#feedback",
    "relUrl": "/doc-pathfinding/heuristics/#feedback"
  },"602": {
    "doc": "🝰 Heuristics",
    "title": "🝰 Inertia",
    "content": "Favor active direction preservation. The Inertia heuristic uses the ongoing traversal data to try and maintain a consistent direction, as if the algorithm had “inertia”. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/heuristics/#inertia",
    "relUrl": "/doc-pathfinding/heuristics/#inertia"
  },"603": {
    "doc": "🝰 Heuristics",
    "title": "🝰 Steepness",
    "content": "Favor flat trajectories. The Steepness heuristic uses the edge angle against an up vector to compute a dot product that is used to determine whether the edge should be considered flat or not. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/heuristics/#steepness",
    "relUrl": "/doc-pathfinding/heuristics/#steepness"
  },"604": {
    "doc": "🝰 Heuristics",
    "title": "🝰 Azimuth",
    "content": "Favor edges directed toward the goal. The Azimuth heuristic attempt to force the path to always aim toward the goal. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/heuristics/#azimuth",
    "relUrl": "/doc-pathfinding/heuristics/#azimuth"
  },"605": {
    "doc": "🝰 Heuristics",
    "title": "🝰 Least Nodes",
    "content": "Favor traversing the least amount of nodes. The Least Nodes heuristic favor node count traversal over anything else. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/heuristics/#least-nodes",
    "relUrl": "/doc-pathfinding/heuristics/#least-nodes"
  },"606": {
    "doc": "🝰 Heuristics",
    "title": "🝰 Heuristics",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/heuristics/",
    "relUrl": "/doc-pathfinding/heuristics/"
  },"607": {
    "doc": "Flag Nodes",
    "title": "Flag Nodes",
    "content": "PCGEx | Cluster : Flag Nodes Find conditional-based states to nodes within a graph . The Flag Nodes node identifies and marks complex, non-mutually exclusive states within a cluster by applying filters and conditions to bitmask attributes, allowing for fine-tuned control over node selection and flagging based on specific criteria. VtxEndpoints of the input Edges EdgesEdges associated with the input Vtxs FlagsNode flags and their associated filters VtxEndpoints of the output Edges EdgesEdges associated with the output Vtxs . Related . | Working with Clusters | Node Flag | Filter Ecosystem | . Table of content . | Order of operation | Properties . | Individual Node Flag | Available Cluster Filters | Available Regular Filters | . | . The Flag Nodes node helps you find &amp; mark complex, non-mutually exclusive states on each Vtx of a cluster. It takes any number of Node Flag and processes their associated filters &amp; conditions in order to update a bitmask attribute on individual points. It is primarily used to identify nodes within a graph that meet very specific set of criterias that are not mutually exclusive. Output attribute can then be filtered using 🝖 Bitmask, and works with the Bitmasks toolset. Bitmasks &amp; bit fields can be obscure to work with if it’s not something you’re used to. Sadly the Wikipedia article on the topic isn’t super helpful, and digging into the specifics wouldn’t be very productive either. If you have a user-friendly resources I could add to the doc, please poke me. Bitmasks fields in PCGEx are using a int64, which loosely translate as storing 63 boolean values on a single attribute. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/flag-nodes/#flag-nodes",
    "relUrl": "/doc-clusters/flag-nodes/#flag-nodes"
  },"608": {
    "doc": "Flag Nodes",
    "title": "Order of operation",
    "content": "Connected s are first sorted (ascending) using their individual Priority, and then processed in that order; using the result of the previous operation, if any. What this means is higher priorities have the ability to radically change the entire bitmask, should you chose to. It synergize very well with the Batch Actions node that lets you match &amp; set attributes using filters; such as the 🝖 Bitmask one. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/flag-nodes/#order-of-operation",
    "relUrl": "/doc-clusters/flag-nodes/#order-of-operation"
  },"609": {
    "doc": "Flag Nodes",
    "title": "Properties",
    "content": ". | Property | Description | . | :**Settings**| |   | . | Flag Attributeint64 | This is the name of the attribute the final bitmask will be written to. | . | Initial Flag | This is the flag to start operating from.*Setting this value manually isn’t recommended, instead use a Bitmask and plug it into the override pin.* | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/flag-nodes/#properties",
    "relUrl": "/doc-clusters/flag-nodes/#properties"
  },"610": {
    "doc": "Flag Nodes",
    "title": "Individual Node Flag",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/flag-nodes/#individual-node-flag",
    "relUrl": "/doc-clusters/flag-nodes/#individual-node-flag"
  },"611": {
    "doc": "Flag Nodes",
    "title": "Node Flag",
    "content": "A single flag definition . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/flag-nodes/#node-flag",
    "relUrl": "/doc-clusters/flag-nodes/#node-flag"
  },"612": {
    "doc": "Flag Nodes",
    "title": "Available Cluster Filters",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/flag-nodes/#available-cluster-filters",
    "relUrl": "/doc-clusters/flag-nodes/#available-cluster-filters"
  },"613": {
    "doc": "Flag Nodes",
    "title": "🝖 Adjacency (Node)",
    "content": "Check if adjacent node meet specific conditions . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/flag-nodes/#adjacency-node",
    "relUrl": "/doc-clusters/flag-nodes/#adjacency-node"
  },"614": {
    "doc": "Flag Nodes",
    "title": "🝖 Edge Direction (Node)",
    "content": "Check if adjacent node meet specific conditions . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/flag-nodes/#edge-direction-node",
    "relUrl": "/doc-clusters/flag-nodes/#edge-direction-node"
  },"615": {
    "doc": "Flag Nodes",
    "title": "🝖 Neighbors Count (Node)",
    "content": "Check a node’ neighbors count . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/flag-nodes/#neighbors-count-node",
    "relUrl": "/doc-clusters/flag-nodes/#neighbors-count-node"
  },"616": {
    "doc": "Flag Nodes",
    "title": "🝖 Edge Direction (Edge)",
    "content": "Check if the edge direction is within a given range. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/flag-nodes/#edge-direction-edge",
    "relUrl": "/doc-clusters/flag-nodes/#edge-direction-edge"
  },"617": {
    "doc": "Flag Nodes",
    "title": "🝖 Endpoints Compare (Numeric)",
    "content": "Compare the value of an attribute on each of the edge endpoint. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/flag-nodes/#endpoints-compare-numeric",
    "relUrl": "/doc-clusters/flag-nodes/#endpoints-compare-numeric"
  },"618": {
    "doc": "Flag Nodes",
    "title": "🝖 Endpoints Compare (String)",
    "content": "Compare the value of an attribute on each of the edge endpoint. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/flag-nodes/#endpoints-compare-string",
    "relUrl": "/doc-clusters/flag-nodes/#endpoints-compare-string"
  },"619": {
    "doc": "Flag Nodes",
    "title": "🝖 Neighbors Count (Edge)",
    "content": "Check a node’ neighbors count . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/flag-nodes/#neighbors-count-edge",
    "relUrl": "/doc-clusters/flag-nodes/#neighbors-count-edge"
  },"620": {
    "doc": "Flag Nodes",
    "title": "Available Regular Filters",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/flag-nodes/#available-regular-filters",
    "relUrl": "/doc-clusters/flag-nodes/#available-regular-filters"
  },"621": {
    "doc": "Flag Nodes",
    "title": "🝖 AND / OR (Group)",
    "content": "Group multiple filters to set up complex AND/OR branches. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/flag-nodes/#and--or-group",
    "relUrl": "/doc-clusters/flag-nodes/#and--or-group"
  },"622": {
    "doc": "Flag Nodes",
    "title": "🝖 Adjacency (Node)",
    "content": "Check if adjacent node meet specific conditions . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/flag-nodes/#adjacency-node-1",
    "relUrl": "/doc-clusters/flag-nodes/#adjacency-node-1"
  },"623": {
    "doc": "Flag Nodes",
    "title": "🝖 Compare Nearest (Numeric)",
    "content": "The Numeric Comparison Filter compares the arithmetic value of an attribute against the closest point from another dataset. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/flag-nodes/#compare-nearest-numeric",
    "relUrl": "/doc-clusters/flag-nodes/#compare-nearest-numeric"
  },"624": {
    "doc": "Flag Nodes",
    "title": "🝖 Compare (Numeric)",
    "content": "The Numeric Comparison Filter compares the arithmetic value of two attributes . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/flag-nodes/#compare-numeric",
    "relUrl": "/doc-clusters/flag-nodes/#compare-numeric"
  },"625": {
    "doc": "Flag Nodes",
    "title": "🝖 Edge Direction (Node)",
    "content": "Check if adjacent node meet specific conditions . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/flag-nodes/#edge-direction-node-1",
    "relUrl": "/doc-clusters/flag-nodes/#edge-direction-node-1"
  },"626": {
    "doc": "Flag Nodes",
    "title": "🝖 Compare (String)",
    "content": "Compares two string-like attributes against each other. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/flag-nodes/#compare-string",
    "relUrl": "/doc-clusters/flag-nodes/#compare-string"
  },"627": {
    "doc": "Flag Nodes",
    "title": "🝖 Neighbors Count (Node)",
    "content": "Check a node’ neighbors count . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/flag-nodes/#neighbors-count-node-1",
    "relUrl": "/doc-clusters/flag-nodes/#neighbors-count-node-1"
  },"628": {
    "doc": "Flag Nodes",
    "title": "🝖 Bool",
    "content": "Performs a simple boolean comparison, converting numeric values to true (&gt; 0) or false (&lt;= 0). ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/flag-nodes/#bool",
    "relUrl": "/doc-clusters/flag-nodes/#bool"
  },"629": {
    "doc": "Flag Nodes",
    "title": "🝖 Within Range",
    "content": "Checks if an attribute value falls within a specified range. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/flag-nodes/#within-range",
    "relUrl": "/doc-clusters/flag-nodes/#within-range"
  },"630": {
    "doc": "Flag Nodes",
    "title": "🝖 Dot Product",
    "content": "Compares the dot product of two direction vectors against a third value. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/flag-nodes/#dot-product",
    "relUrl": "/doc-clusters/flag-nodes/#dot-product"
  },"631": {
    "doc": "Flag Nodes",
    "title": "🝖 Modulo Comparison",
    "content": "Compares the modulo of two attributes against a third operand, with configurable comparisons and tolerance. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/flag-nodes/#modulo-comparison",
    "relUrl": "/doc-clusters/flag-nodes/#modulo-comparison"
  },"632": {
    "doc": "Flag Nodes",
    "title": "🝖 Edge Direction (Edge)",
    "content": "Check if the edge direction is within a given range. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/flag-nodes/#edge-direction-edge-1",
    "relUrl": "/doc-clusters/flag-nodes/#edge-direction-edge-1"
  },"633": {
    "doc": "Flag Nodes",
    "title": "🝖 Endpoints Compare (Numeric)",
    "content": "Compare the value of an attribute on each of the edge endpoint. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/flag-nodes/#endpoints-compare-numeric-1",
    "relUrl": "/doc-clusters/flag-nodes/#endpoints-compare-numeric-1"
  },"634": {
    "doc": "Flag Nodes",
    "title": "🝖 Bounds",
    "content": "Checks if a point is inside or outside the provided bounds, with options for bounds types and an epsilon adjustment. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/flag-nodes/#bounds",
    "relUrl": "/doc-clusters/flag-nodes/#bounds"
  },"635": {
    "doc": "Flag Nodes",
    "title": "🝖 Distance",
    "content": "Compare distance to closest target against a constant or attribute. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/flag-nodes/#distance",
    "relUrl": "/doc-clusters/flag-nodes/#distance"
  },"636": {
    "doc": "Flag Nodes",
    "title": "🝖 Endpoints Compare (String)",
    "content": "Compare the value of an attribute on each of the edge endpoint. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/flag-nodes/#endpoints-compare-string-1",
    "relUrl": "/doc-clusters/flag-nodes/#endpoints-compare-string-1"
  },"637": {
    "doc": "Flag Nodes",
    "title": "🝖 Bitmask",
    "content": "Checks specific flags in an int64 bitmask attribute with configurable mask types, comparisons, and an option to invert results. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/flag-nodes/#bitmask",
    "relUrl": "/doc-clusters/flag-nodes/#bitmask"
  },"638": {
    "doc": "Flag Nodes",
    "title": "🝖 Neighbors Count (Edge)",
    "content": "Check a node’ neighbors count . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/flag-nodes/#neighbors-count-edge-1",
    "relUrl": "/doc-clusters/flag-nodes/#neighbors-count-edge-1"
  },"639": {
    "doc": "Flag Nodes",
    "title": "🝖 Random",
    "content": "Random filter. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/flag-nodes/#random",
    "relUrl": "/doc-clusters/flag-nodes/#random"
  },"640": {
    "doc": "Flag Nodes",
    "title": "🝖 Mean Value",
    "content": "The Mean Value Filter compares per-point values of an attribute against the mean statistical value of that same attribute. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/flag-nodes/#mean-value",
    "relUrl": "/doc-clusters/flag-nodes/#mean-value"
  },"641": {
    "doc": "Flag Nodes",
    "title": "🝖 Self Compare (Numeric)",
    "content": "Compares the numeric value at one index against the same attribute at another index. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/flag-nodes/#self-compare-numeric",
    "relUrl": "/doc-clusters/flag-nodes/#self-compare-numeric"
  },"642": {
    "doc": "Flag Nodes",
    "title": "🝖 Self Compare (String)",
    "content": "Compares the string value at one index against the same attribute at another index. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/flag-nodes/#self-compare-string",
    "relUrl": "/doc-clusters/flag-nodes/#self-compare-string"
  },"643": {
    "doc": "Flag Nodes",
    "title": "🝖 Spline Inclusion",
    "content": "Checks against how a point is included in a spline. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/flag-nodes/#spline-inclusion",
    "relUrl": "/doc-clusters/flag-nodes/#spline-inclusion"
  },"644": {
    "doc": "Flag Nodes",
    "title": "🝖 Path Inclusion",
    "content": "Checks against how a point is included in a path. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/flag-nodes/#path-inclusion",
    "relUrl": "/doc-clusters/flag-nodes/#path-inclusion"
  },"645": {
    "doc": "Flag Nodes",
    "title": "Flag Nodes",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/flag-nodes/",
    "relUrl": "/doc-clusters/flag-nodes/"
  },"646": {
    "doc": "⊚ Search",
    "title": "⊚ Search",
    "content": "An inventory of the available search modules. Search algorithms are at the core of PCGEx Pathfinding nodes &amp; capabilities. They are responsible for traversing individual clusters in search for the ideal path between the seed and goal points. At the time of writing, there are only two algorithms implemented, A Start and Dijkstra. The next implementation candidates will be DFS and BFS as they yield slightly different results, althought less friendly to modifiers. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/search/#search",
    "relUrl": "/doc-pathfinding/search/#search"
  },"647": {
    "doc": "⊚ Search",
    "title": "Modules",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/search/#modules",
    "relUrl": "/doc-pathfinding/search/#modules"
  },"648": {
    "doc": "⊚ Search",
    "title": "Dijkstra",
    "content": "Dijkstra’s Algorithm . Dijkstra’s Algorithm implementation. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/search/#dijkstra",
    "relUrl": "/doc-pathfinding/search/#dijkstra"
  },"649": {
    "doc": "⊚ Search",
    "title": "A* Star",
    "content": "A* Algorithm . A* Algorithm implementation. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/search/#a-star",
    "relUrl": "/doc-pathfinding/search/#a-star"
  },"650": {
    "doc": "⊚ Search",
    "title": "⊚ Search",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/search/",
    "relUrl": "/doc-pathfinding/search/"
  },"651": {
    "doc": "Pathfinding",
    "title": "Pathfinding",
    "content": "Modules &amp; Documentation . This section is dedicated to broader pathfinding topics &amp; modules. Node specifics can be found on their dedicated node page. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/#pathfinding",
    "relUrl": "/doc-pathfinding/#pathfinding"
  },"652": {
    "doc": "Pathfinding",
    "title": "Pathfinding",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/#pathfinding",
    "relUrl": "/doc-pathfinding/#pathfinding"
  },"653": {
    "doc": "Pathfinding",
    "title": "Edges Pathfinding",
    "content": "Find paths connecting seeds to goals. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/#edges-pathfinding",
    "relUrl": "/doc-pathfinding/#edges-pathfinding"
  },"654": {
    "doc": "Pathfinding",
    "title": "Plot Edges Pathfinding",
    "content": "Find a path that goes through multiple chained points. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/#plot-edges-pathfinding",
    "relUrl": "/doc-pathfinding/#plot-edges-pathfinding"
  },"655": {
    "doc": "Pathfinding",
    "title": "How pathfinding works",
    "content": "Although details vary a bit depending on the selected ⊚ Search algorithm, the basic gist is, for each path &amp; cluster: . | A suitable Seed and Goal point (Vtx) are picked within the cluster. | The Search Algorithm will then find the best path that goes from Seed to Goal, accounting for its internal maths, relying on 🝰 Heuristics to determine whether one connection is better than another. | Once a path is found between a given Seed and its Goal, traversed points are then added to a dataset, in order from Seed (start) to Goal (end). | . Note: The Seed and Goal node are picked based on closest distance to input positions only (point bounds are ignored) . Starting from the seed, each “next step” is weighted according to the V Vertex weight and the E Edge weight that connects to it. The search returns the path found with the lowest possible weight, or score. While the selected search algorithm is important, 🝰 Heuristics are more critical to the operation, as user-defined weights can drastically change and shape the path deemed best by the search. Note: The Plot nodes variations don’t have a goal picker and instead process each point Dataset as a list of points to go through from start to finish. The first point is the initial seed, the last point is the final goal, and then a path is found that goes through each point in-between, in order. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/#how-pathfinding-works",
    "relUrl": "/doc-pathfinding/#how-pathfinding-works"
  },"656": {
    "doc": "Pathfinding",
    "title": "Pathfinding Nodes",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/#pathfinding-nodes",
    "relUrl": "/doc-pathfinding/#pathfinding-nodes"
  },"657": {
    "doc": "Pathfinding",
    "title": "Edges Pathfinding",
    "content": "Find paths connecting seeds to goals. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/#edges-pathfinding-1",
    "relUrl": "/doc-pathfinding/#edges-pathfinding-1"
  },"658": {
    "doc": "Pathfinding",
    "title": "Plot Edges Pathfinding",
    "content": "Find a path that goes through multiple chained points. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/#plot-edges-pathfinding-1",
    "relUrl": "/doc-pathfinding/#plot-edges-pathfinding-1"
  },"659": {
    "doc": "Pathfinding",
    "title": "Find Contours",
    "content": "Find edge contours &amp; outlines . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/#find-contours",
    "relUrl": "/doc-pathfinding/#find-contours"
  },"660": {
    "doc": "Pathfinding",
    "title": "Find All Cells",
    "content": "Find all cells within a cluster . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/#find-all-cells",
    "relUrl": "/doc-pathfinding/#find-all-cells"
  },"661": {
    "doc": "Pathfinding",
    "title": "Grow Paths",
    "content": "Grows paths from seeds alone. Note that there is also two hidden node that enable pathfinding using the existing navmesh: Navmesh Pathfinding and Plot Navmesh. They’re not part of the main pool because they’re very legacy. They can still be very useful if you do level blocking with a navmesh, not so much for open world. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/#grow-paths",
    "relUrl": "/doc-pathfinding/#grow-paths"
  },"662": {
    "doc": "Pathfinding",
    "title": "Available 🝰 Heuristics modules",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/#available--heuristics-modules",
    "relUrl": "/doc-pathfinding/#available--heuristics-modules"
  },"663": {
    "doc": "Pathfinding",
    "title": "🝰 Heuristic Attribute",
    "content": "Attribute-driven heuristics . The Attribute heuristics uses custom point or edge value as raw score. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/#heuristic-attribute",
    "relUrl": "/doc-pathfinding/#heuristic-attribute"
  },"664": {
    "doc": "Pathfinding",
    "title": "🝰 Shortest Distance",
    "content": "Favor shortest distance. The Shortest Distance heuristic node … . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/#shortest-distance",
    "relUrl": "/doc-pathfinding/#shortest-distance"
  },"665": {
    "doc": "Pathfinding",
    "title": "🝰 Feedback",
    "content": "Favor uncharted points &amp; edges. The Feedback heuristic add/remove score value to points &amp; edges that are “in use” by other previously computed paths. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/#feedback",
    "relUrl": "/doc-pathfinding/#feedback"
  },"666": {
    "doc": "Pathfinding",
    "title": "🝰 Inertia",
    "content": "Favor active direction preservation. The Inertia heuristic uses the ongoing traversal data to try and maintain a consistent direction, as if the algorithm had “inertia”. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/#inertia",
    "relUrl": "/doc-pathfinding/#inertia"
  },"667": {
    "doc": "Pathfinding",
    "title": "🝰 Steepness",
    "content": "Favor flat trajectories. The Steepness heuristic uses the edge angle against an up vector to compute a dot product that is used to determine whether the edge should be considered flat or not. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/#steepness",
    "relUrl": "/doc-pathfinding/#steepness"
  },"668": {
    "doc": "Pathfinding",
    "title": "🝰 Azimuth",
    "content": "Favor edges directed toward the goal. The Azimuth heuristic attempt to force the path to always aim toward the goal. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/#azimuth",
    "relUrl": "/doc-pathfinding/#azimuth"
  },"669": {
    "doc": "Pathfinding",
    "title": "🝰 Least Nodes",
    "content": "Favor traversing the least amount of nodes. The Least Nodes heuristic favor node count traversal over anything else. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/#least-nodes",
    "relUrl": "/doc-pathfinding/#least-nodes"
  },"670": {
    "doc": "Pathfinding",
    "title": "Available ⊚ Search modules",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/#available--search-modules",
    "relUrl": "/doc-pathfinding/#available--search-modules"
  },"671": {
    "doc": "Pathfinding",
    "title": "Dijkstra",
    "content": "Dijkstra’s Algorithm . Dijkstra’s Algorithm implementation. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/#dijkstra",
    "relUrl": "/doc-pathfinding/#dijkstra"
  },"672": {
    "doc": "Pathfinding",
    "title": "A* Star",
    "content": "A* Algorithm . A* Algorithm implementation. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/#a-star",
    "relUrl": "/doc-pathfinding/#a-star"
  },"673": {
    "doc": "Pathfinding",
    "title": "Pathfinding",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/",
    "relUrl": "/doc-pathfinding/"
  },"674": {
    "doc": "Relax",
    "title": "Relax",
    "content": "PCGEx | Cluster : Relax Relax points positions of a graph. The Relax node smooths a graph’s point positions by applying iterative relaxation algorithms, allowing control over the number of iterations, type of relaxation, and influence settings for fine-tuning results. VtxEndpoints of the input Edges EdgesEdges associated with the input Vtxs VtxEndpoints of the output Edges EdgesEdges associated with the output Vtxs . Related . | Working with Clusters | | Filter Ecosystem | . Table of content . | Properties . | Influence Settings | Relaxing modules | Cluster Output Settings | . | . The relax point node smoothes cluster’ topology by iteratively applying a given relaxation algorithm. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-relax/#relax",
    "relUrl": "/doc-clusters/edges-relax/#relax"
  },"675": {
    "doc": "Relax",
    "title": "Properties",
    "content": ". | Property | Description | . | :**Settings**| |   | . | Iterations | The number of time to additively apply the relaxing algorithm.Each iteration uses the previous’ iteration results. | . | Relaxing | This property lets you select which kind of relaxing you want to apply to the input clusters.**Specifics of the instanced module will be available under its inner Settings section.***See .* | . | **Influence**| |   | . | Influence | Interpolate between the original position and the final, relaxed position.- 1.0 means fully relaxed- 0.0 means the original position is preserved. | . | Local Influence | If enabled, will use a per-point attribute value as *Influence*. | . | Progressive Influence | Switchs betweeen factoring the influence after each *per-iteration* (progressive) or once all iterations have been processed.*This yields vastly different results, so don’t hesite to try it.* | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-relax/#properties",
    "relUrl": "/doc-clusters/edges-relax/#properties"
  },"676": {
    "doc": "Relax",
    "title": "Influence Settings",
    "content": ". | Property | Description | . | :Settings |   | . | Influence | Interpolate between the original position and the final, relaxed position.- 1.0 means fully relaxed- 0.0 means the original position is preserved. | . | Local Influence | When enabled, this allows you to use a per-point influence value.This is especially useful for “pinning” specific points. | . | Progressive Influence | When enabled, Influence is applied between each iteration, instead of once after all iterations have been processed.This is more expensive but yield more good looking results, especially with non-uniform local influence. | . Note that while the default Influence is clamped, the local influence is purposefully not clamped, allowing for undershooting or overshooting the influence’ interpolation between the relaxed and original position. Use carefully. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-relax/#influence-settings",
    "relUrl": "/doc-clusters/edges-relax/#influence-settings"
  },"677": {
    "doc": "Relax",
    "title": "Relaxing modules",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-relax/#relaxing-modules",
    "relUrl": "/doc-clusters/edges-relax/#relaxing-modules"
  },"678": {
    "doc": "Relax",
    "title": "☍ Laplacian",
    "content": "Laplacian / Poisson relaxation . The Laplacian relaxation … . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-relax/#laplacian",
    "relUrl": "/doc-clusters/edges-relax/#laplacian"
  },"679": {
    "doc": "Relax",
    "title": "☍ Force Directed",
    "content": "Force-directed relaxation . The Force-directed relaxation … . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-relax/#force-directed",
    "relUrl": "/doc-clusters/edges-relax/#force-directed"
  },"680": {
    "doc": "Relax",
    "title": "Cluster Output Settings",
    "content": "See Working with Clusters - Cluster Output Settings. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-relax/#cluster-output-settings",
    "relUrl": "/doc-clusters/edges-relax/#cluster-output-settings"
  },"681": {
    "doc": "Relax",
    "title": "Relax",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-relax/",
    "relUrl": "/doc-clusters/edges-relax/"
  },"682": {
    "doc": "Blend",
    "title": "Blend",
    "content": "PCGEx | Path : Blend Blend individual points between from paths’ start and end points. The Path Blend node blends attributes and properties of points between the start and end of given paths, offering customizable blending modes to smoothly transition values along the path. PathsPaths which points attributes &amp; properties will be blended PathsPaths with attributes &amp; properties blended . Table of content . | Properties . | Available Blending Modules | . | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-blend/#blend",
    "relUrl": "/doc-paths/paths-blend/#blend"
  },"683": {
    "doc": "Blend",
    "title": "Properties",
    "content": ". The index safety property controls how invalid/out of bounds input values are handled. | Safety method |   | . | Ignore | Invalid indices will be ignored and won’t be processed further. | . | Tile | Index is tiled (wrapped around) the context’ valid min/max range. | . | Clamp | Index is clamped between the context’ valid min/max range. | . | Yoyo | Index bounces back and forth between the context’ valid min/max range. | . | : **Settings**| |   | . | **Blending** | This property lets you select which kind of blending you want to apply to the input paths.*See [Available Blending Modules](#available-blending-modules).* | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-blend/#properties",
    "relUrl": "/doc-paths/paths-blend/#properties"
  },"684": {
    "doc": "Blend",
    "title": "Available Blending Modules",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-blend/#available-blending-modules",
    "relUrl": "/doc-paths/paths-blend/#available-blending-modules"
  },"685": {
    "doc": "Blend",
    "title": "⋰ Interpolate",
    "content": "Interpolates values between first and last point. Processed subpoints properties &amp; attributes will lerp between the first and last subpoints. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-blend/#interpolate",
    "relUrl": "/doc-paths/paths-blend/#interpolate"
  },"686": {
    "doc": "Blend",
    "title": "⋰ Inherit First",
    "content": "Copy the first point’ values . Processed subpoints will inherit from the first properties &amp; attributes. Nothing fancy about it. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-blend/#inherit-first",
    "relUrl": "/doc-paths/paths-blend/#inherit-first"
  },"687": {
    "doc": "Blend",
    "title": "⋰ Inherit Last",
    "content": "Copy the last point’ values . Processed subpoints will inherit from the last properties &amp; attributes. Nothing fancy about it. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-blend/#inherit-last",
    "relUrl": "/doc-paths/paths-blend/#inherit-last"
  },"688": {
    "doc": "Blend",
    "title": "Blend",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-blend/",
    "relUrl": "/doc-paths/paths-blend/"
  },"689": {
    "doc": "Orient",
    "title": "Orient",
    "content": "PCGEx | Path : Orient Orient points in relation to their neighbors . The Orient node compute individual point transforms &amp; orientation based on its next &amp; previous neighbors. PathsPaths which points will be oriented PathsPaths with updated points orientation . Table of content . | Properties . | Orientation modules | . | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-orient/#orient",
    "relUrl": "/doc-paths/paths-orient/#orient"
  },"690": {
    "doc": "Orient",
    "title": "Properties",
    "content": ". The index safety property controls how invalid/out of bounds input values are handled. | Safety method |   | . | Ignore | Invalid indices will be ignored and won’t be processed further. | . | Tile | Index is tiled (wrapped around) the context’ valid min/max range. | . | Clamp | Index is clamped between the context’ valid min/max range. | . | Yoyo | Index bounces back and forth between the context’ valid min/max range. | . | : **Settings**| |   | . | **Orientation** | This property lets you select which kind of orientation arithmetics you want to apply to the input paths.*See [Available Orientation Modules](#available-orienting-modules).* | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-orient/#properties",
    "relUrl": "/doc-paths/paths-orient/#properties"
  },"691": {
    "doc": "Orient",
    "title": "Orientation modules",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-orient/#orientation-modules",
    "relUrl": "/doc-paths/paths-orient/#orientation-modules"
  },"692": {
    "doc": "Orient",
    "title": "⋋ Look At",
    "content": "Look at next . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-orient/#look-at",
    "relUrl": "/doc-paths/paths-orient/#look-at"
  },"693": {
    "doc": "Orient",
    "title": "⋋ Weighted",
    "content": "Distance-weighted interpolation . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-orient/#weighted",
    "relUrl": "/doc-paths/paths-orient/#weighted"
  },"694": {
    "doc": "Orient",
    "title": "⋋ Average",
    "content": "Average between previous and next . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-orient/#average",
    "relUrl": "/doc-paths/paths-orient/#average"
  },"695": {
    "doc": "Orient",
    "title": "Orient",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-orient/",
    "relUrl": "/doc-paths/paths-orient/"
  },"696": {
    "doc": "Smooth",
    "title": "Smooth",
    "content": "PCGEx | Path : Smooth Smooth points properties and attributes . The Smooth node enhances path appearance. Customize closed paths, protect start and end points. Adjust global influence for overall smoothing. Use local influence to tailor per-point impact. Explore different smoothing types for varied effects. PathsPaths which points will be smoothed PathsPaths with updated points positions . Table of content . | Properties . | Smoothing modules | . | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-smooth/#smooth",
    "relUrl": "/doc-paths/paths-smooth/#smooth"
  },"697": {
    "doc": "Smooth",
    "title": "Properties",
    "content": ". The index safety property controls how invalid/out of bounds input values are handled. | Safety method |   | . | Ignore | Invalid indices will be ignored and won’t be processed further. | . | Tile | Index is tiled (wrapped around) the context’ valid min/max range. | . | Clamp | Index is clamped between the context’ valid min/max range. | . | Yoyo | Index bounces back and forth between the context’ valid min/max range. | . | : **Settings**| |   | . | Preserve Start | If enabled, the first point will be unaffected by the smoothing*Same as if its local influence was 0.* | . | Preserve End | If enabled, the last point will be unaffected by the smoothing*Same as if its local influence was 0.* | . | Influence | Global influence.This is used as a value to lerp the smoothed points properties with the unsmoothed one.- 0 = Not smoothed- 1 = Fully smoothed | . | Local Influence | If enabled, the influence property is applied per-point using the specified attribute from the point being smoothed. | . | **Smoothing** | This property lets you select which kind of smoothing you want to apply to the input paths.*See [Available Smoothing Modules](#available-smoothing-modules).* | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-smooth/#properties",
    "relUrl": "/doc-paths/paths-smooth/#properties"
  },"698": {
    "doc": "Smooth",
    "title": "Smoothing modules",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-smooth/#smoothing-modules",
    "relUrl": "/doc-paths/paths-smooth/#smoothing-modules"
  },"699": {
    "doc": "Smooth",
    "title": "Moving Average",
    "content": "Index-based moving-average sampling . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-smooth/#moving-average",
    "relUrl": "/doc-paths/paths-smooth/#moving-average"
  },"700": {
    "doc": "Smooth",
    "title": "Radius",
    "content": "Radius &amp; position-based sampling . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-smooth/#radius",
    "relUrl": "/doc-paths/paths-smooth/#radius"
  },"701": {
    "doc": "Smooth",
    "title": "Smooth",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-smooth/",
    "relUrl": "/doc-paths/paths-smooth/"
  },"702": {
    "doc": "Filter Ecosystem",
    "title": "Filter Ecosystem",
    "content": "PCGEx’ handy filter system . The Filter Ecosystem is a collection of filter factory nodes that can be leveraged by numerous PCGEx nodes in a powerful and creative ways. Table of content . | Filtering Nodes | Available Filters | Cluster-specific filters | Optimizing | . PCGEx comes with its own filter ecosystem, that is used by a lot of nodes to check if specific conditions or requirements are met on a node in order to process it. It also has two standalone, very handy nodes that lets you combine any number of filters in the same spot. PCGEx’ filter system can be slightly slower than the regular filters but saves a LOT of the extra nodes that would be required to achieve the same results. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/#filter-ecosystem",
    "relUrl": "/doc-filter-ecosystem/#filter-ecosystem"
  },"703": {
    "doc": "Filter Ecosystem",
    "title": "Filtering Nodes",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/#filtering-nodes",
    "relUrl": "/doc-filter-ecosystem/#filtering-nodes"
  },"704": {
    "doc": "Filter Ecosystem",
    "title": "Uber Filter",
    "content": "Combine multiple filters . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/#uber-filter",
    "relUrl": "/doc-filter-ecosystem/#uber-filter"
  },"705": {
    "doc": "Filter Ecosystem",
    "title": "Uber Filter (Collection)",
    "content": "Combine multiple filters . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/#uber-filter-collection",
    "relUrl": "/doc-filter-ecosystem/#uber-filter-collection"
  },"706": {
    "doc": "Filter Ecosystem",
    "title": "Available Filters",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/#available-filters",
    "relUrl": "/doc-filter-ecosystem/#available-filters"
  },"707": {
    "doc": "Filter Ecosystem",
    "title": "🝖 AND / OR (Group)",
    "content": "Group multiple filters to set up complex AND/OR branches. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/#and--or-group",
    "relUrl": "/doc-filter-ecosystem/#and--or-group"
  },"708": {
    "doc": "Filter Ecosystem",
    "title": "🝖 Compare Nearest (Numeric)",
    "content": "The Numeric Comparison Filter compares the arithmetic value of an attribute against the closest point from another dataset. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/#compare-nearest-numeric",
    "relUrl": "/doc-filter-ecosystem/#compare-nearest-numeric"
  },"709": {
    "doc": "Filter Ecosystem",
    "title": "🝖 Compare (Numeric)",
    "content": "The Numeric Comparison Filter compares the arithmetic value of two attributes . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/#compare-numeric",
    "relUrl": "/doc-filter-ecosystem/#compare-numeric"
  },"710": {
    "doc": "Filter Ecosystem",
    "title": "🝖 Compare (String)",
    "content": "Compares two string-like attributes against each other. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/#compare-string",
    "relUrl": "/doc-filter-ecosystem/#compare-string"
  },"711": {
    "doc": "Filter Ecosystem",
    "title": "🝖 Bool",
    "content": "Performs a simple boolean comparison, converting numeric values to true (&gt; 0) or false (&lt;= 0). ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/#bool",
    "relUrl": "/doc-filter-ecosystem/#bool"
  },"712": {
    "doc": "Filter Ecosystem",
    "title": "🝖 Within Range",
    "content": "Checks if an attribute value falls within a specified range. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/#within-range",
    "relUrl": "/doc-filter-ecosystem/#within-range"
  },"713": {
    "doc": "Filter Ecosystem",
    "title": "🝖 Dot Product",
    "content": "Compares the dot product of two direction vectors against a third value. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/#dot-product",
    "relUrl": "/doc-filter-ecosystem/#dot-product"
  },"714": {
    "doc": "Filter Ecosystem",
    "title": "🝖 Modulo Comparison",
    "content": "Compares the modulo of two attributes against a third operand, with configurable comparisons and tolerance. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/#modulo-comparison",
    "relUrl": "/doc-filter-ecosystem/#modulo-comparison"
  },"715": {
    "doc": "Filter Ecosystem",
    "title": "🝖 Distance",
    "content": "Compare distance to closest target against a constant or attribute. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/#distance",
    "relUrl": "/doc-filter-ecosystem/#distance"
  },"716": {
    "doc": "Filter Ecosystem",
    "title": "🝖 Bounds",
    "content": "Checks if a point is inside or outside the provided bounds, with options for bounds types and an epsilon adjustment. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/#bounds",
    "relUrl": "/doc-filter-ecosystem/#bounds"
  },"717": {
    "doc": "Filter Ecosystem",
    "title": "🝖 Bitmask",
    "content": "Checks specific flags in an int64 bitmask attribute with configurable mask types, comparisons, and an option to invert results. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/#bitmask",
    "relUrl": "/doc-filter-ecosystem/#bitmask"
  },"718": {
    "doc": "Filter Ecosystem",
    "title": "🝖 Random",
    "content": "Random filter. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/#random",
    "relUrl": "/doc-filter-ecosystem/#random"
  },"719": {
    "doc": "Filter Ecosystem",
    "title": "🝖 Mean Value",
    "content": "The Mean Value Filter compares per-point values of an attribute against the mean statistical value of that same attribute. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/#mean-value",
    "relUrl": "/doc-filter-ecosystem/#mean-value"
  },"720": {
    "doc": "Filter Ecosystem",
    "title": "🝖 Self Compare (Numeric)",
    "content": "Compares the numeric value at one index against the same attribute at another index. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/#self-compare-numeric",
    "relUrl": "/doc-filter-ecosystem/#self-compare-numeric"
  },"721": {
    "doc": "Filter Ecosystem",
    "title": "🝖 Self Compare (String)",
    "content": "Compares the string value at one index against the same attribute at another index. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/#self-compare-string",
    "relUrl": "/doc-filter-ecosystem/#self-compare-string"
  },"722": {
    "doc": "Filter Ecosystem",
    "title": "🝖 Spline Inclusion",
    "content": "Checks against how a point is included in a spline. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/#spline-inclusion",
    "relUrl": "/doc-filter-ecosystem/#spline-inclusion"
  },"723": {
    "doc": "Filter Ecosystem",
    "title": "🝖 Path Inclusion",
    "content": "Checks against how a point is included in a path. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/#path-inclusion",
    "relUrl": "/doc-filter-ecosystem/#path-inclusion"
  },"724": {
    "doc": "Filter Ecosystem",
    "title": "Cluster-specific filters",
    "content": "Some nodes support-cluster specific filters, leveraging intrinsic cluster properties that are not otherwise accessible. See Cluster Filters for more details. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/#cluster-specific-filters",
    "relUrl": "/doc-filter-ecosystem/#cluster-specific-filters"
  },"725": {
    "doc": "Filter Ecosystem",
    "title": "🝖 Adjacency (Node)",
    "content": "Check if adjacent node meet specific conditions . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/#adjacency-node",
    "relUrl": "/doc-filter-ecosystem/#adjacency-node"
  },"726": {
    "doc": "Filter Ecosystem",
    "title": "🝖 Edge Direction (Node)",
    "content": "Check if adjacent node meet specific conditions . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/#edge-direction-node",
    "relUrl": "/doc-filter-ecosystem/#edge-direction-node"
  },"727": {
    "doc": "Filter Ecosystem",
    "title": "🝖 Neighbors Count (Node)",
    "content": "Check a node’ neighbors count . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/#neighbors-count-node",
    "relUrl": "/doc-filter-ecosystem/#neighbors-count-node"
  },"728": {
    "doc": "Filter Ecosystem",
    "title": "🝖 Edge Direction (Edge)",
    "content": "Check if the edge direction is within a given range. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/#edge-direction-edge",
    "relUrl": "/doc-filter-ecosystem/#edge-direction-edge"
  },"729": {
    "doc": "Filter Ecosystem",
    "title": "🝖 Endpoints Compare (Numeric)",
    "content": "Compare the value of an attribute on each of the edge endpoint. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/#endpoints-compare-numeric",
    "relUrl": "/doc-filter-ecosystem/#endpoints-compare-numeric"
  },"730": {
    "doc": "Filter Ecosystem",
    "title": "🝖 Endpoints Compare (String)",
    "content": "Compare the value of an attribute on each of the edge endpoint. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/#endpoints-compare-string",
    "relUrl": "/doc-filter-ecosystem/#endpoints-compare-string"
  },"731": {
    "doc": "Filter Ecosystem",
    "title": "🝖 Neighbors Count (Edge)",
    "content": "Check a node’ neighbors count . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/#neighbors-count-edge",
    "relUrl": "/doc-filter-ecosystem/#neighbors-count-edge"
  },"732": {
    "doc": "Filter Ecosystem",
    "title": "Optimizing",
    "content": "The biggest overhead of filtering is fetching attribute values : testing a lot of different attributes if much more expensive that a lot of different tests on the same attributes, as PCGEx caches attribute values before testing! . All filters come with a Priority property: that property is used internally to order filters in ascending order. The default filtering behavior is to exit the test loop as soon as possible, whether it has an OR or AND behavior. Because of that, you should always order the tests that are the most likely to fail first. Not all filters are created equal, and some can be much more expensive than other to test against. Simple comparisons are cheap, but on the other end a filter like 🝖 Bounds involves various transformations to be accurate. On the other end, 🝖 Mean Value is a simple comparison but needs to first process all the available values to build statistics; hence there is no way to really compress the bulk of its cost. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/#optimizing",
    "relUrl": "/doc-filter-ecosystem/#optimizing"
  },"733": {
    "doc": "Filter Ecosystem",
    "title": "Filter Ecosystem",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-filter-ecosystem/",
    "relUrl": "/doc-filter-ecosystem/"
  },"734": {
    "doc": "Write Tangents",
    "title": "Write Tangents",
    "content": "PCGEx | Path : Write Tangents TBD . The Write Tangents node computes and assign custom tangents to path points, with options for tangent math modules, scaling, and handling closed loops. PathsPaths which points will have tangents written on Point FiltersFilter input that let you choose which points get processed. PathsPaths with updated tangents attributes . Table of content . | Properties . | Tangents modules | . | . The Write Tangents help you compute &amp; write custom tangents on your paths so you can easily build spline from them. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-write-tangents/#write-tangents",
    "relUrl": "/doc-paths/paths-write-tangents/#write-tangents"
  },"735": {
    "doc": "Write Tangents",
    "title": "Properties",
    "content": ". The index safety property controls how invalid/out of bounds input values are handled. | Safety method |   | . | Ignore | Invalid indices will be ignored and won’t be processed further. | . | Tile | Index is tiled (wrapped around) the context’ valid min/max range. | . | Clamp | Index is clamped between the context’ valid min/max range. | . | Yoyo | Index bounces back and forth between the context’ valid min/max range. | . | : **Settings**| |   | . | Arrive Name*FVector* | Attribute to write the Arrive tangent to. | . | Leave Name*FVector* | Attribute to write the Leave tangent to. | . | **Tangents Modules** | |   | . | Tangents | Lets you pick which kind of tangent maths you want to apply to the input paths.*See [Available Tangents Modules](#available-tangents-modules).* | . | Start Tangents | Lets you pick which kind of tangent maths you want to use for the **first point** of the path.*Will fall back to the default module if left empty.* | . | End Tangents | Lets you pick which kind of tangent maths you want to use for the **last point** of the path.*Will fall back to the default module if left empty.* | . | **Arrive Scale** | |   | . | Arrive Scale Type | Let you choose to scale the arrive tangents with either a Constant value or an Attribute. | . | Arrive Scale *(Constant or Attribute)* | Value used to scale the arrive tangent with.*Will be broadcasted to FVector.* | . | **Leave Scale** | |   | . | Leave Scale Type | Let you choose to scale the leave tangents with either a Constant value or an Attribute. | . | Leave Scale *(Constant or Attribute)* | Value used to scale the leave tangent with.*Will be broadcasted to FVector.* | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-write-tangents/#properties",
    "relUrl": "/doc-paths/paths-write-tangents/#properties"
  },"736": {
    "doc": "Write Tangents",
    "title": "Tangents modules",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-write-tangents/#tangents-modules",
    "relUrl": "/doc-paths/paths-write-tangents/#tangents-modules"
  },"737": {
    "doc": "Write Tangents",
    "title": "∢ Catmull-Rom",
    "content": "Neighbor-based tangents . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-write-tangents/#catmull-rom",
    "relUrl": "/doc-paths/paths-write-tangents/#catmull-rom"
  },"738": {
    "doc": "Write Tangents",
    "title": "∢ From Neighbors",
    "content": "Neighbor-based tangents . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-write-tangents/#from-neighbors",
    "relUrl": "/doc-paths/paths-write-tangents/#from-neighbors"
  },"739": {
    "doc": "Write Tangents",
    "title": "∢ From Transform",
    "content": "Transform-based tangents . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-write-tangents/#from-transform",
    "relUrl": "/doc-paths/paths-write-tangents/#from-transform"
  },"740": {
    "doc": "Write Tangents",
    "title": "∢ Zero Tangents",
    "content": "No tangents . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-write-tangents/#zero-tangents",
    "relUrl": "/doc-paths/paths-write-tangents/#zero-tangents"
  },"741": {
    "doc": "Write Tangents",
    "title": "∢ Auto Tangents",
    "content": "Neighbor-based tangents . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-write-tangents/#auto-tangents",
    "relUrl": "/doc-paths/paths-write-tangents/#auto-tangents"
  },"742": {
    "doc": "Write Tangents",
    "title": "Write Tangents",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-write-tangents/",
    "relUrl": "/doc-paths/paths-write-tangents/"
  },"743": {
    "doc": "Paths",
    "title": "Paths",
    "content": "Smooth, orient, tangents, … . Manipulate points as linearily ordered datasets . This section contains path-like data utilities. Paths are just points . Like every other PCGEx thing, Paths are really just Points Dataset – however, Path nodes assume that the input data represent a “path”, a.k.a an ordered list of point. Each point represent a “step” inside that path, from the first to last point in the Dataset. Paths nodes accept any inputs, and do not rely on any custom attributes to work.. All path nodes have Closed Loop settings to indicate whether they should be processed as closed or open paths. At the time of writing, there is no way to handler per-input closed/open state. Either all inputs are considered closed, or they are not.. This will change in the future, and will likely rely on user-defined tags to know whether a path is to be considered closed or not. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/#paths",
    "relUrl": "/doc-paths/#paths"
  },"744": {
    "doc": "Paths",
    "title": "Paths Nodes",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/#paths-nodes",
    "relUrl": "/doc-paths/#paths-nodes"
  },"745": {
    "doc": "Paths",
    "title": "Smooth",
    "content": "Smooth points properties and attributes . · · ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/#smooth",
    "relUrl": "/doc-paths/#smooth"
  },"746": {
    "doc": "Paths",
    "title": "Orient",
    "content": "Orient points in relation to their neighbors . · · · ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/#orient",
    "relUrl": "/doc-paths/#orient"
  },"747": {
    "doc": "Paths",
    "title": "Blend",
    "content": "Blend individual points between from paths’ start and end points. · · · ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/#blend",
    "relUrl": "/doc-paths/#blend"
  },"748": {
    "doc": "Paths",
    "title": "Path Spline Mesh",
    "content": "Create SplineMesh components from paths . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/#path-spline-mesh",
    "relUrl": "/doc-paths/#path-spline-mesh"
  },"749": {
    "doc": "Paths",
    "title": "Solidify Path",
    "content": "Solidify paths into “edges” . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/#solidify-path",
    "relUrl": "/doc-paths/#solidify-path"
  },"750": {
    "doc": "Paths",
    "title": "Path × Path Crossings",
    "content": "Find crossings within &amp; against other paths. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/#path--path-crossings",
    "relUrl": "/doc-paths/#path--path-crossings"
  },"751": {
    "doc": "Paths",
    "title": "Path × Bounds Intersections",
    "content": "Find intersections with points bounds. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/#path--bounds-intersections",
    "relUrl": "/doc-paths/#path--bounds-intersections"
  },"752": {
    "doc": "Paths",
    "title": "Attribute Rolling",
    "content": "Does a rolling operation over properties &amp; attributes along a path . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/#attribute-rolling",
    "relUrl": "/doc-paths/#attribute-rolling"
  },"753": {
    "doc": "Paths",
    "title": "Fuse Collinear",
    "content": "Fuse collinear points on a path . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/#fuse-collinear",
    "relUrl": "/doc-paths/#fuse-collinear"
  },"754": {
    "doc": "Paths",
    "title": "Offset",
    "content": "Offset path along a direction . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/#offset",
    "relUrl": "/doc-paths/#offset"
  },"755": {
    "doc": "Paths",
    "title": "Bevel",
    "content": "Bevel path points . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/#bevel",
    "relUrl": "/doc-paths/#bevel"
  },"756": {
    "doc": "Paths",
    "title": "Resample",
    "content": "Resample path points. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/#resample",
    "relUrl": "/doc-paths/#resample"
  },"757": {
    "doc": "Paths",
    "title": "Shift",
    "content": "Shift path point order inside the dataset. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/#shift",
    "relUrl": "/doc-paths/#shift"
  },"758": {
    "doc": "Paths",
    "title": "Path Spline Mesh (Simple)",
    "content": "Create SplineMesh components from paths . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/#path-spline-mesh-simple",
    "relUrl": "/doc-paths/#path-spline-mesh-simple"
  },"759": {
    "doc": "Paths",
    "title": "Spline to Path",
    "content": "Converts a spline into a path. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/#spline-to-path",
    "relUrl": "/doc-paths/#spline-to-path"
  },"760": {
    "doc": "Paths",
    "title": "Subdivide",
    "content": "Create sub-points between existing points . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/#subdivide",
    "relUrl": "/doc-paths/#subdivide"
  },"761": {
    "doc": "Paths",
    "title": "Create Spline",
    "content": "A Create Spline node with per-point controls &amp; tagging abilities. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/#create-spline",
    "relUrl": "/doc-paths/#create-spline"
  },"762": {
    "doc": "Paths",
    "title": "Write Paths Properties",
    "content": "Compute extra path informations . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/#write-paths-properties",
    "relUrl": "/doc-paths/#write-paths-properties"
  },"763": {
    "doc": "Paths",
    "title": "Write Tangents",
    "content": "TBD . · · · · · ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/#write-tangents",
    "relUrl": "/doc-paths/#write-tangents"
  },"764": {
    "doc": "Paths",
    "title": "Paths to Clusters",
    "content": "Convert paths to clusters. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/#paths-to-clusters",
    "relUrl": "/doc-paths/#paths-to-clusters"
  },"765": {
    "doc": "Paths",
    "title": "Paths",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/",
    "relUrl": "/doc-paths/"
  },"766": {
    "doc": "Sample Neighbors",
    "title": "Sample Neighbors",
    "content": "PCGEx | Cluster : Sample Neighbors Sample points based on edge connections . The Sample Neighbors sample data from connected neighbors inside a cluster. VtxEndpoints of the input Edges EdgesEdges associated with the input Vtxs VtxEndpoints of the output Edges EdgesEdges associated with the output Vtxs . Table of content . | Properties | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-sampling/sampling-neighbors/#sample-neighbors",
    "relUrl": "/doc-sampling/sampling-neighbors/#sample-neighbors"
  },"767": {
    "doc": "Sample Neighbors",
    "title": "Properties",
    "content": ". DOC TDB . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-sampling/sampling-neighbors/#properties",
    "relUrl": "/doc-sampling/sampling-neighbors/#properties"
  },"768": {
    "doc": "Sample Neighbors",
    "title": "Sample Neighbors",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-sampling/sampling-neighbors/",
    "relUrl": "/doc-sampling/sampling-neighbors/"
  },"769": {
    "doc": "Textures",
    "title": "Textures",
    "content": "Nodes that work with textures . TBD . Table of content . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-sampling/sampling-textures/#textures",
    "relUrl": "/doc-sampling/sampling-textures/#textures"
  },"770": {
    "doc": "Textures",
    "title": "Textures",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-sampling/sampling-textures/",
    "relUrl": "/doc-sampling/sampling-textures/"
  },"771": {
    "doc": "∷ General",
    "title": "∷ General",
    "content": "Notes &amp; informations . This section is dedicated to broader &amp; shared documentation topics. Node specifics can be found on the dedicated node page. Table of content . | Recurring settings | Nodes Categories | . When working with specific nodes, make sure to check out the home of the category they belong to as it often contains important infos pertaining to their family of nodes as a whole! . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-general/#general",
    "relUrl": "/doc-general/#general"
  },"772": {
    "doc": "∷ General",
    "title": "Basics",
    "content": "General concepts &amp; disambiguation . An overview of the concepts PCGEx uses, and assumption around the meaning of certain keywords. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-general/#basics",
    "relUrl": "/doc-general/#basics"
  },"773": {
    "doc": "∷ General",
    "title": "Plugin Settings",
    "content": "PCGEx’ Project Settings . An overview of the plugin global settings that can be tweaked through the project settings panel. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-general/#plugin-settings",
    "relUrl": "/doc-general/#plugin-settings"
  },"774": {
    "doc": "∷ General",
    "title": "PCGEx Nodes",
    "content": "Shared concepts . A summary of the informations &amp; parameters available on every PCGEx node. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-general/#pcgex-nodes",
    "relUrl": "/doc-general/#pcgex-nodes"
  },"775": {
    "doc": "∷ General",
    "title": "Working with Clusters",
    "content": "Vtx? Edges? . A summary of what “graph” means and entails in the context of PCGEx. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-general/#working-with-clusters",
    "relUrl": "/doc-general/#working-with-clusters"
  },"776": {
    "doc": "∷ General",
    "title": "Recurring settings",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-general/#recurring-settings",
    "relUrl": "/doc-general/#recurring-settings"
  },"777": {
    "doc": "∷ General",
    "title": "Comparisons",
    "content": "PCGEx’ comparison overview . This page lists the comparison used by a bunch of different nodes. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-general/#comparisons",
    "relUrl": "/doc-general/#comparisons"
  },"778": {
    "doc": "∷ General",
    "title": "Blending",
    "content": "PCGEx’ blendings overview . This page centralizes documentation for Blending, allowing us to keep relevant content accessible without duplicating extensive details across individual pages; as many nodes have blending capabilities. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-general/#blending",
    "relUrl": "/doc-general/#blending"
  },"779": {
    "doc": "∷ General",
    "title": "Fitting",
    "content": "PCGEx’ fitting overview . This page centralizes documentation for Fitting, allowing us to keep relevant content accessible without duplicating extensive details across individual pages; as a few nodes have fitting capabilities and it’s a heavy piece of doc. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-general/#fitting",
    "relUrl": "/doc-general/#fitting"
  },"780": {
    "doc": "∷ General",
    "title": "Nodes Categories",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-general/#nodes-categories",
    "relUrl": "/doc-general/#nodes-categories"
  },"781": {
    "doc": "∷ General",
    "title": "Filter Ecosystem",
    "content": "PCGEx’ handy filter system . · · · · · · · · · · · · · · · · · · · ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-general/#filter-ecosystem",
    "relUrl": "/doc-general/#filter-ecosystem"
  },"782": {
    "doc": "∷ General",
    "title": "Clusters",
    "content": "Arithmetic vtx/edge clusters generation &amp; operations . Easily generate relational structures from points . · · · · · · · · · · · · · · · · · · · · · · · · ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-general/#clusters",
    "relUrl": "/doc-general/#clusters"
  },"783": {
    "doc": "∷ General",
    "title": "Pathfinding",
    "content": "Modules &amp; Documentation . This section is dedicated to broader pathfinding topics &amp; modules. Node specifics can be found on their dedicated node page. · · · · · · · · · · ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-general/#pathfinding",
    "relUrl": "/doc-general/#pathfinding"
  },"784": {
    "doc": "∷ General",
    "title": "Paths",
    "content": "Smooth, orient, tangents, … . Manipulate points as linearily ordered datasets . · · · · · · · · · · · · · · · · · · · · ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-general/#paths",
    "relUrl": "/doc-general/#paths"
  },"785": {
    "doc": "∷ General",
    "title": "Staging",
    "content": "Data Asset &amp; Staging nodes . Prepare points for spawning meshes &amp; actors . · · · ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-general/#staging",
    "relUrl": "/doc-general/#staging"
  },"786": {
    "doc": "∷ General",
    "title": "Misc",
    "content": "All-around, generic utility nodes. · · · · · · · · · · · · · · · · · · · · · · · · · ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-general/#misc",
    "relUrl": "/doc-general/#misc"
  },"787": {
    "doc": "∷ General",
    "title": "Sampling",
    "content": "Data from nearest points, polylines, surfaces, … . Extract data from surroundings . · · · · · · · · · · · ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-general/#sampling",
    "relUrl": "/doc-general/#sampling"
  },"788": {
    "doc": "∷ General",
    "title": "Shape Ecosystem",
    "content": "Create parametric shapes from seeds . · · ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-general/#shape-ecosystem",
    "relUrl": "/doc-general/#shape-ecosystem"
  },"789": {
    "doc": "∷ General",
    "title": "∷ General",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-general/",
    "relUrl": "/doc-general/"
  },"790": {
    "doc": "Sampling",
    "title": "Sampling",
    "content": "Data from nearest points, polylines, surfaces, … . Extract data from surroundings . PCGEx comes with a collection of “sampling” nodes. They’re basically all designed to extract information &amp; data from their surroundings, one way or another – from overlaps, to line traces, to bounds or proximity. The general philosophy behind sampling nodes is to expose data, and makes no assumption about their possible usage; hence they all write new data but never modify existing ones; unless you enable blending operations on capable nodes. “Sampling” may comes out as a bit of a misnomer : contrary to vanilla PCG Sampler nodes, PCGEx’ Sampling nodes do not generate new points, and instead relies on existing points as spatial references to drive queries. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-sampling/#sampling",
    "relUrl": "/doc-sampling/#sampling"
  },"791": {
    "doc": "Sampling",
    "title": "Sampling Nodes",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-sampling/#sampling-nodes",
    "relUrl": "/doc-sampling/#sampling-nodes"
  },"792": {
    "doc": "Sampling",
    "title": "Sample Nearest Surface",
    "content": "Sample information from the nearest mesh collision . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-sampling/#sample-nearest-surface",
    "relUrl": "/doc-sampling/#sample-nearest-surface"
  },"793": {
    "doc": "Sampling",
    "title": "Sample Line Trace",
    "content": "Sample environment using line casting . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-sampling/#sample-line-trace",
    "relUrl": "/doc-sampling/#sample-line-trace"
  },"794": {
    "doc": "Sampling",
    "title": "Wait for PCG Data",
    "content": "Wait for PCG Components data to be available and grabs it. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-sampling/#wait-for-pcg-data",
    "relUrl": "/doc-sampling/#wait-for-pcg-data"
  },"795": {
    "doc": "Sampling",
    "title": "Sample Nearest Spline",
    "content": "Sample informations from the nearest spline . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-sampling/#sample-nearest-spline",
    "relUrl": "/doc-sampling/#sample-nearest-spline"
  },"796": {
    "doc": "Sampling",
    "title": "Sample Nearest Points",
    "content": "Sample points within a spherical range . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-sampling/#sample-nearest-points",
    "relUrl": "/doc-sampling/#sample-nearest-points"
  },"797": {
    "doc": "Sampling",
    "title": "Sample Nearest Bounds",
    "content": "Sample within bounds . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-sampling/#sample-nearest-bounds",
    "relUrl": "/doc-sampling/#sample-nearest-bounds"
  },"798": {
    "doc": "Sampling",
    "title": "Sample Overlap Stats",
    "content": "Compute overlap statistics between point collections . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-sampling/#sample-overlap-stats",
    "relUrl": "/doc-sampling/#sample-overlap-stats"
  },"799": {
    "doc": "Sampling",
    "title": "Textures",
    "content": "Nodes that work with textures . · · · ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-sampling/#textures",
    "relUrl": "/doc-sampling/#textures"
  },"800": {
    "doc": "Sampling",
    "title": "Sample Neighbors",
    "content": "Sample points based on edge connections . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-sampling/#sample-neighbors",
    "relUrl": "/doc-sampling/#sample-neighbors"
  },"801": {
    "doc": "Sampling",
    "title": "Pack Actor Data",
    "content": "Conveniently process actors and output data using custom blueprints . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-sampling/#pack-actor-data",
    "relUrl": "/doc-sampling/#pack-actor-data"
  },"802": {
    "doc": "Sampling",
    "title": "Sample Inside Bounds",
    "content": "Sample target points contained within bounds. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-sampling/#sample-inside-bounds",
    "relUrl": "/doc-sampling/#sample-inside-bounds"
  },"803": {
    "doc": "Sampling",
    "title": "Sampling",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-sampling/",
    "relUrl": "/doc-sampling/"
  },"804": {
    "doc": "Shape Ecosystem",
    "title": "Shape Ecosystem",
    "content": "Create parametric shapes from seeds . The Shape node is a one-stop node for all your filtering needs. Table of content . | Shape Creation Nodes | Shape Nodes | . WIP . PCGEx comes with a few parametric shapes nodes – at the time of writing this, there’s only a circle available, but that alone is already very handy. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-shapes/#shape-ecosystem",
    "relUrl": "/doc-shapes/#shape-ecosystem"
  },"805": {
    "doc": "Shape Ecosystem",
    "title": "Shape Creation Nodes",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-shapes/#shape-creation-nodes",
    "relUrl": "/doc-shapes/#shape-creation-nodes"
  },"806": {
    "doc": "Shape Ecosystem",
    "title": "Create Shapes",
    "content": "Create parametric shapes out of seed points . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-shapes/#create-shapes",
    "relUrl": "/doc-shapes/#create-shapes"
  },"807": {
    "doc": "Shape Ecosystem",
    "title": "Shape Nodes",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-shapes/#shape-nodes",
    "relUrl": "/doc-shapes/#shape-nodes"
  },"808": {
    "doc": "Shape Ecosystem",
    "title": "🜛 Circle",
    "content": "Circle, Arc, and more . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-shapes/#circle",
    "relUrl": "/doc-shapes/#circle"
  },"809": {
    "doc": "Shape Ecosystem",
    "title": "Shape Ecosystem",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-shapes/",
    "relUrl": "/doc-shapes/"
  },"810": {
    "doc": "Refine",
    "title": "Refine",
    "content": "PCGEx | Cluster : Refine One-stop node for pruning edges . The Refine node algorithmically prunes edges in a graph to enforce specific properties, allowing selection of refinement type and optional sanitization to restore edges based on predefined conditions. VtxEndpoints of the input Edges EdgesEdges associated with the input Vtxs HeuristicsHeuristic nodes, if required by the selected refinement. Edge FilterPoint filter input used by some refinements Sanitization FiltersPoint filter input used to preserve edges as a sanitization step VtxEndpoints of the output Edges EdgesEdges associated with the output Vtxs Kept EdgesEdges kept by the filter Removed EdgesEdges removed by the filter . Related . | Working with Clusters | Cut Clusters | Filter Ecosystem | . Table of content . | Properties . | Sanitization | Available Refining modules | Cluster Output Settings | . | Filters . | Available Filters | Edge-specific filters | . | . The Cluster Refine node lets you refine connections inside individual clusters, a.k.a Edge pruning. Refining only removes edges and does not create new ones. The filters determine which edge can be pruned. Any filter that doesn’t pass will ensure the edge is preserved. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/#refine",
    "relUrl": "/doc-clusters/edges-refine/#refine"
  },"811": {
    "doc": "Refine",
    "title": "Properties",
    "content": ". | Property | Description | . | :**Settings**| |   | . | Refinement | This property lets you select which kind of refinement you want to apply to the input clusters.**Specifics of the instanced module will be available under its inner Settings section, if any.** | . | Output Edges Only | If enabled, this node will output edges as raw points, without the usually associated cluster.*This can be significantly faster and less greedy depending on your need for the output edges.* | . | Restore Edges that connects to Valid Nodes | If enabled, any removed edge that connects valid nodes will be restored.*This happens after the initial refinement and before sanitization.* | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/#properties",
    "relUrl": "/doc-clusters/edges-refine/#properties"
  },"812": {
    "doc": "Refine",
    "title": "Sanitization",
    "content": "The sanitization property lets you enforce some general conditions within the graph. Note that is applied after the refinement. Note that this is not mutually exclusive with filters: sanitization happens has a post-process after the “raw” refinement is completed. | Sanitization | Description | . | None | No sanitization. | . | Shortest | If a node has no edge left, restore the shortest one. | . | Longest | If a node has no edge left, restore the longest one. | . | Filters | Use per-point filters to ensure edge preservation. | . Note that the sanitization options offer no guarantee that the initial interconnectivity will be preserved! – It’s more of a “whatever happens, keep those edges” pass. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/#sanitization",
    "relUrl": "/doc-clusters/edges-refine/#sanitization"
  },"813": {
    "doc": "Refine",
    "title": "Available Refining modules",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/#available-refining-modules",
    "relUrl": "/doc-clusters/edges-refine/#available-refining-modules"
  },"814": {
    "doc": "Refine",
    "title": "🝔 Minimum Spanning Tree",
    "content": "Modified Prim’s Minimum Spanning Tree algorithm that supports heuristics. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/#minimum-spanning-tree",
    "relUrl": "/doc-clusters/edges-refine/#minimum-spanning-tree"
  },"815": {
    "doc": "Refine",
    "title": "🝔 Refine by Filter",
    "content": "Keeps edges that pass the input filters, or vice-versa. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/#refine-by-filter",
    "relUrl": "/doc-clusters/edges-refine/#refine-by-filter"
  },"816": {
    "doc": "Refine",
    "title": "🝔 Line Trace",
    "content": "Removes edges by doing linetrace and checking for collisions. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/#line-trace",
    "relUrl": "/doc-clusters/edges-refine/#line-trace"
  },"817": {
    "doc": "Refine",
    "title": "🝔 Gabriel",
    "content": "Applies Gabrield Graph transformation . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/#gabriel",
    "relUrl": "/doc-clusters/edges-refine/#gabriel"
  },"818": {
    "doc": "Refine",
    "title": "🝔 Remove Overlap",
    "content": "Removes overlapping edges . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/#remove-overlap",
    "relUrl": "/doc-clusters/edges-refine/#remove-overlap"
  },"819": {
    "doc": "Refine",
    "title": "🝔 Keep Highest Score",
    "content": "Keeps edges with the highest heuristic scores . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/#keep-highest-score",
    "relUrl": "/doc-clusters/edges-refine/#keep-highest-score"
  },"820": {
    "doc": "Refine",
    "title": "🝔 Keep Lowest Score",
    "content": "Keeps edges with the lowest heuristic scores . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/#keep-lowest-score",
    "relUrl": "/doc-clusters/edges-refine/#keep-lowest-score"
  },"821": {
    "doc": "Refine",
    "title": "🝔 Remove Highest Score",
    "content": "Removes edges with the highest heuristic scores . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/#remove-highest-score",
    "relUrl": "/doc-clusters/edges-refine/#remove-highest-score"
  },"822": {
    "doc": "Refine",
    "title": "🝔 Remove Lowest Score",
    "content": "Removes edges with the lowest heuristic scores . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/#remove-lowest-score",
    "relUrl": "/doc-clusters/edges-refine/#remove-lowest-score"
  },"823": {
    "doc": "Refine",
    "title": "🝔 Keep Longest",
    "content": "Keeps the longest edge of each node . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/#keep-longest",
    "relUrl": "/doc-clusters/edges-refine/#keep-longest"
  },"824": {
    "doc": "Refine",
    "title": "🝔 Keep Shortest",
    "content": "Keeps the shortest edge of each node . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/#keep-shortest",
    "relUrl": "/doc-clusters/edges-refine/#keep-shortest"
  },"825": {
    "doc": "Refine",
    "title": "🝔 Remove Longest",
    "content": "Removes the longest edge of each node . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/#remove-longest",
    "relUrl": "/doc-clusters/edges-refine/#remove-longest"
  },"826": {
    "doc": "Refine",
    "title": "🝔 Remove Shortest",
    "content": "Removes the shortest edge of each node . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/#remove-shortest",
    "relUrl": "/doc-clusters/edges-refine/#remove-shortest"
  },"827": {
    "doc": "Refine",
    "title": "Cluster Output Settings",
    "content": "See Working with Clusters - Cluster Output Settings. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/#cluster-output-settings",
    "relUrl": "/doc-clusters/edges-refine/#cluster-output-settings"
  },"828": {
    "doc": "Refine",
    "title": "Filters",
    "content": "This node supports a wide variety of filters, but it’s important to keep in mind that only the edge points are processed by the filters. Both regular point filter &amp; edge filters are supported, node filter are not (because they operate on endpoints specifically, which this node doesn’t work on). Regular &amp; Sanitization filtering operate on input data, not the modified output. That means if you use filters that rely on intrinsinc properties such as neighbor count, it will be the neighbor count of the input, not the output! . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/#filters",
    "relUrl": "/doc-clusters/edges-refine/#filters"
  },"829": {
    "doc": "Refine",
    "title": "Available Filters",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/#available-filters",
    "relUrl": "/doc-clusters/edges-refine/#available-filters"
  },"830": {
    "doc": "Refine",
    "title": "🝖 AND / OR (Group)",
    "content": "Group multiple filters to set up complex AND/OR branches. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/#and--or-group",
    "relUrl": "/doc-clusters/edges-refine/#and--or-group"
  },"831": {
    "doc": "Refine",
    "title": "🝖 Compare Nearest (Numeric)",
    "content": "The Numeric Comparison Filter compares the arithmetic value of an attribute against the closest point from another dataset. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/#compare-nearest-numeric",
    "relUrl": "/doc-clusters/edges-refine/#compare-nearest-numeric"
  },"832": {
    "doc": "Refine",
    "title": "🝖 Compare (Numeric)",
    "content": "The Numeric Comparison Filter compares the arithmetic value of two attributes . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/#compare-numeric",
    "relUrl": "/doc-clusters/edges-refine/#compare-numeric"
  },"833": {
    "doc": "Refine",
    "title": "🝖 Compare (String)",
    "content": "Compares two string-like attributes against each other. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/#compare-string",
    "relUrl": "/doc-clusters/edges-refine/#compare-string"
  },"834": {
    "doc": "Refine",
    "title": "🝖 Bool",
    "content": "Performs a simple boolean comparison, converting numeric values to true (&gt; 0) or false (&lt;= 0). ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/#bool",
    "relUrl": "/doc-clusters/edges-refine/#bool"
  },"835": {
    "doc": "Refine",
    "title": "🝖 Within Range",
    "content": "Checks if an attribute value falls within a specified range. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/#within-range",
    "relUrl": "/doc-clusters/edges-refine/#within-range"
  },"836": {
    "doc": "Refine",
    "title": "🝖 Dot Product",
    "content": "Compares the dot product of two direction vectors against a third value. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/#dot-product",
    "relUrl": "/doc-clusters/edges-refine/#dot-product"
  },"837": {
    "doc": "Refine",
    "title": "🝖 Modulo Comparison",
    "content": "Compares the modulo of two attributes against a third operand, with configurable comparisons and tolerance. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/#modulo-comparison",
    "relUrl": "/doc-clusters/edges-refine/#modulo-comparison"
  },"838": {
    "doc": "Refine",
    "title": "🝖 Distance",
    "content": "Compare distance to closest target against a constant or attribute. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/#distance",
    "relUrl": "/doc-clusters/edges-refine/#distance"
  },"839": {
    "doc": "Refine",
    "title": "🝖 Bounds",
    "content": "Checks if a point is inside or outside the provided bounds, with options for bounds types and an epsilon adjustment. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/#bounds",
    "relUrl": "/doc-clusters/edges-refine/#bounds"
  },"840": {
    "doc": "Refine",
    "title": "🝖 Bitmask",
    "content": "Checks specific flags in an int64 bitmask attribute with configurable mask types, comparisons, and an option to invert results. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/#bitmask",
    "relUrl": "/doc-clusters/edges-refine/#bitmask"
  },"841": {
    "doc": "Refine",
    "title": "🝖 Random",
    "content": "Random filter. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/#random",
    "relUrl": "/doc-clusters/edges-refine/#random"
  },"842": {
    "doc": "Refine",
    "title": "🝖 Mean Value",
    "content": "The Mean Value Filter compares per-point values of an attribute against the mean statistical value of that same attribute. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/#mean-value",
    "relUrl": "/doc-clusters/edges-refine/#mean-value"
  },"843": {
    "doc": "Refine",
    "title": "🝖 Self Compare (Numeric)",
    "content": "Compares the numeric value at one index against the same attribute at another index. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/#self-compare-numeric",
    "relUrl": "/doc-clusters/edges-refine/#self-compare-numeric"
  },"844": {
    "doc": "Refine",
    "title": "🝖 Self Compare (String)",
    "content": "Compares the string value at one index against the same attribute at another index. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/#self-compare-string",
    "relUrl": "/doc-clusters/edges-refine/#self-compare-string"
  },"845": {
    "doc": "Refine",
    "title": "🝖 Spline Inclusion",
    "content": "Checks against how a point is included in a spline. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/#spline-inclusion",
    "relUrl": "/doc-clusters/edges-refine/#spline-inclusion"
  },"846": {
    "doc": "Refine",
    "title": "🝖 Path Inclusion",
    "content": "Checks against how a point is included in a path. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/#path-inclusion",
    "relUrl": "/doc-clusters/edges-refine/#path-inclusion"
  },"847": {
    "doc": "Refine",
    "title": "Edge-specific filters",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/#edge-specific-filters",
    "relUrl": "/doc-clusters/edges-refine/#edge-specific-filters"
  },"848": {
    "doc": "Refine",
    "title": "🝖 Edge Direction (Edge)",
    "content": "Check if the edge direction is within a given range. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/#edge-direction-edge",
    "relUrl": "/doc-clusters/edges-refine/#edge-direction-edge"
  },"849": {
    "doc": "Refine",
    "title": "🝖 Endpoints Compare (Numeric)",
    "content": "Compare the value of an attribute on each of the edge endpoint. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/#endpoints-compare-numeric",
    "relUrl": "/doc-clusters/edges-refine/#endpoints-compare-numeric"
  },"850": {
    "doc": "Refine",
    "title": "🝖 Endpoints Compare (String)",
    "content": "Compare the value of an attribute on each of the edge endpoint. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/#endpoints-compare-string",
    "relUrl": "/doc-clusters/edges-refine/#endpoints-compare-string"
  },"851": {
    "doc": "Refine",
    "title": "🝖 Neighbors Count (Edge)",
    "content": "Check a node’ neighbors count . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/#neighbors-count-edge",
    "relUrl": "/doc-clusters/edges-refine/#neighbors-count-edge"
  },"852": {
    "doc": "Refine",
    "title": "Refine",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/",
    "relUrl": "/doc-clusters/edges-refine/"
  },"853": {
    "doc": "Staging",
    "title": "Staging",
    "content": "Data Asset &amp; Staging nodes . Prepare points for spawning meshes &amp; actors . This section contains data asset &amp; staging utilities. Staging nodes rely on Asset Collection to associate points &amp; edit them based on asset properties, such as bounding box. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-assets/#staging",
    "relUrl": "/doc-assets/#staging"
  },"854": {
    "doc": "Staging",
    "title": "Staging Nodes",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-assets/#staging-nodes",
    "relUrl": "/doc-assets/#staging-nodes"
  },"855": {
    "doc": "Staging",
    "title": "Asset Staging",
    "content": "Prepare points before spawning. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-assets/#asset-staging",
    "relUrl": "/doc-assets/#asset-staging"
  },"856": {
    "doc": "Staging",
    "title": "Asset Collection to Set",
    "content": "Converts an asset collection to an attribute set. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-assets/#asset-collection-to-set",
    "relUrl": "/doc-assets/#asset-collection-to-set"
  },"857": {
    "doc": "Staging",
    "title": "Asset Collections",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-assets/#asset-collections",
    "relUrl": "/doc-assets/#asset-collections"
  },"858": {
    "doc": "Staging",
    "title": "🝱 Mesh Collection",
    "content": "Mesh Collection DataAsset . The Mesh Collection DataAsset is a list of Meshes with ISM/HISM Descriptors, that comes with all the Asset Collection goodies. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-assets/#mesh-collection",
    "relUrl": "/doc-assets/#mesh-collection"
  },"859": {
    "doc": "Staging",
    "title": "🝱 Actor Collection",
    "content": "Actor Collection DataAsset . The Actor Collection DataAsset is a list of Actors, that comes with all the Asset Collection goodies. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-assets/#actor-collection",
    "relUrl": "/doc-assets/#actor-collection"
  },"860": {
    "doc": "Staging",
    "title": "Staging",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-assets/",
    "relUrl": "/doc-assets/"
  },"861": {
    "doc": "PCG Extended Toolkit",
    "title": "PCGEx PCGExtendedToolkit",
    "content": "The PCG Extended Toolkit is a free (libre) plugin that extends Unreal Engine’ Procedural Content Generation pipeline, with a focus on building spatial relationships between points and path manipulation (and a boatload more things &amp; QoL).   Installation Example Project Discord . When working with specific nodes, make sure to check out the home of the category they belong to as it often contains important infos pertaining to their family of nodes as a whole! . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#pcgex-pcgextendedtoolkit",
    "relUrl": "/#pcgex-pcgextendedtoolkit"
  },"862": {
    "doc": "PCG Extended Toolkit",
    "title": "Nodes Categories",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#nodes-categories",
    "relUrl": "/#nodes-categories"
  },"863": {
    "doc": "PCG Extended Toolkit",
    "title": "Filter Ecosystem",
    "content": "PCGEx’ handy filter system . · · · · · · · · · · · · · · · · · · · ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#filter-ecosystem",
    "relUrl": "/#filter-ecosystem"
  },"864": {
    "doc": "PCG Extended Toolkit",
    "title": "Clusters",
    "content": "Arithmetic vtx/edge clusters generation &amp; operations . Easily generate relational structures from points . · · · · · · · · · · · · · · · · · · · · · · · · ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#clusters",
    "relUrl": "/#clusters"
  },"865": {
    "doc": "PCG Extended Toolkit",
    "title": "Pathfinding",
    "content": "Modules &amp; Documentation . This section is dedicated to broader pathfinding topics &amp; modules. Node specifics can be found on their dedicated node page. · · · · · · · · · · ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#pathfinding",
    "relUrl": "/#pathfinding"
  },"866": {
    "doc": "PCG Extended Toolkit",
    "title": "Paths",
    "content": "Smooth, orient, tangents, … . Manipulate points as linearily ordered datasets . · · · · · · · · · · · · · · · · · · · · ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#paths",
    "relUrl": "/#paths"
  },"867": {
    "doc": "PCG Extended Toolkit",
    "title": "Staging",
    "content": "Data Asset &amp; Staging nodes . Prepare points for spawning meshes &amp; actors . · · · ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#staging",
    "relUrl": "/#staging"
  },"868": {
    "doc": "PCG Extended Toolkit",
    "title": "Misc",
    "content": "All-around, generic utility nodes. · · · · · · · · · · · · · · · · · · · · · · · · · ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#misc",
    "relUrl": "/#misc"
  },"869": {
    "doc": "PCG Extended Toolkit",
    "title": "Sampling",
    "content": "Data from nearest points, polylines, surfaces, … . Extract data from surroundings . · · · · · · · · · · · ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#sampling",
    "relUrl": "/#sampling"
  },"870": {
    "doc": "PCG Extended Toolkit",
    "title": "Shape Ecosystem",
    "content": "Create parametric shapes from seeds . · · . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#shape-ecosystem",
    "relUrl": "/#shape-ecosystem"
  },"871": {
    "doc": "PCG Extended Toolkit",
    "title": "All Nodes",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#all-nodes",
    "relUrl": "/#all-nodes"
  },"872": {
    "doc": "PCG Extended Toolkit",
    "title": "Clusters",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#clusters",
    "relUrl": "/#clusters"
  },"873": {
    "doc": "PCG Extended Toolkit",
    "title": "Connect Points",
    "content": "Creates connections between points using various probes. · · · · ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#connect-points",
    "relUrl": "/#connect-points"
  },"874": {
    "doc": "PCG Extended Toolkit",
    "title": "Diagrams",
    "content": "Delaunay 2D / 3D, Voronoi 2D / 3D . · · · · ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#diagrams",
    "relUrl": "/#diagrams"
  },"875": {
    "doc": "PCG Extended Toolkit",
    "title": "Fuse Clusters",
    "content": "Fuse clusters together by finding Point/Edge and Edge/Edge intersections. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#fuse-clusters",
    "relUrl": "/#fuse-clusters"
  },"876": {
    "doc": "PCG Extended Toolkit",
    "title": "Refine",
    "content": "One-stop node for pruning edges . · · · · · · · · · · · · · ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#refine",
    "relUrl": "/#refine"
  },"877": {
    "doc": "PCG Extended Toolkit",
    "title": "Mesh to Clusters",
    "content": "Convert mesh/geometry topology to usable clusters. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#mesh-to-clusters",
    "relUrl": "/#mesh-to-clusters"
  },"878": {
    "doc": "PCG Extended Toolkit",
    "title": "Properties : Edge",
    "content": "Compute edge extra data from its vertices . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#properties--edge",
    "relUrl": "/#properties--edge"
  },"879": {
    "doc": "PCG Extended Toolkit",
    "title": "Edge Order",
    "content": "Fix the order of edge start &amp; end points . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#edge-order",
    "relUrl": "/#edge-order"
  },"880": {
    "doc": "PCG Extended Toolkit",
    "title": "Properties : Vtx",
    "content": "Compute vtx extra data . · · · ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#properties--vtx",
    "relUrl": "/#properties--vtx"
  },"881": {
    "doc": "PCG Extended Toolkit",
    "title": "Flag Nodes",
    "content": "Find conditional-based states to nodes within a graph . · ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#flag-nodes",
    "relUrl": "/#flag-nodes"
  },"882": {
    "doc": "PCG Extended Toolkit",
    "title": "Cut Clusters",
    "content": "Cut clusters using paths . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#cut-clusters",
    "relUrl": "/#cut-clusters"
  },"883": {
    "doc": "PCG Extended Toolkit",
    "title": "Copy Cluster to Points",
    "content": "Creates copies of entire clusters to a set of target points . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#copy-cluster-to-points",
    "relUrl": "/#copy-cluster-to-points"
  },"884": {
    "doc": "PCG Extended Toolkit",
    "title": "Hulls",
    "content": "Convex hull algorithms . · · ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#hulls",
    "relUrl": "/#hulls"
  },"885": {
    "doc": "PCG Extended Toolkit",
    "title": "Sanitize Clusters",
    "content": "Ensure clusters are clean and complete . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#sanitize-clusters",
    "relUrl": "/#sanitize-clusters"
  },"886": {
    "doc": "PCG Extended Toolkit",
    "title": "Pick Closest Cluster",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#pick-closest-cluster",
    "relUrl": "/#pick-closest-cluster"
  },"887": {
    "doc": "PCG Extended Toolkit",
    "title": "Relax",
    "content": "Relax points positions of a graph. · · ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#relax",
    "relUrl": "/#relax"
  },"888": {
    "doc": "PCG Extended Toolkit",
    "title": "Find Clusters",
    "content": "Find matching cluster data. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#find-clusters",
    "relUrl": "/#find-clusters"
  },"889": {
    "doc": "PCG Extended Toolkit",
    "title": "Partition Vertices",
    "content": "Create per-cluster Vtx datasets . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#partition-vertices",
    "relUrl": "/#partition-vertices"
  },"890": {
    "doc": "PCG Extended Toolkit",
    "title": "Break to Paths",
    "content": "Breaks clusters edge chains into individual paths . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#break-to-paths",
    "relUrl": "/#break-to-paths"
  },"891": {
    "doc": "PCG Extended Toolkit",
    "title": "Make Unique",
    "content": "Forward clusters with a new unique pair of tags. It’s like creating a copy, only much faster. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#make-unique",
    "relUrl": "/#make-unique"
  },"892": {
    "doc": "PCG Extended Toolkit",
    "title": "Custom Graph",
    "content": "Build clusters using custom blueprints! . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#custom-graph",
    "relUrl": "/#custom-graph"
  },"893": {
    "doc": "PCG Extended Toolkit",
    "title": "Connect Clusters",
    "content": "Connects clusters together. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#connect-clusters",
    "relUrl": "/#connect-clusters"
  },"894": {
    "doc": "PCG Extended Toolkit",
    "title": "Find point on Bounds",
    "content": "Find a point in each cluster that is the closest to a bound-relative position. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#find-point-on-bounds",
    "relUrl": "/#find-point-on-bounds"
  },"895": {
    "doc": "PCG Extended Toolkit",
    "title": "Cluster Filters",
    "content": "Cluster-specific filters . · · · · · · · ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#cluster-filters",
    "relUrl": "/#cluster-filters"
  },"896": {
    "doc": "PCG Extended Toolkit",
    "title": "Packing Clusters",
    "content": "Two nodes to conveniently pack/unpack cluster data. · · . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#packing-clusters",
    "relUrl": "/#packing-clusters"
  },"897": {
    "doc": "PCG Extended Toolkit",
    "title": "Pathfinding",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#pathfinding",
    "relUrl": "/#pathfinding"
  },"898": {
    "doc": "PCG Extended Toolkit",
    "title": "Edges Pathfinding",
    "content": "Find paths connecting seeds to goals. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#edges-pathfinding",
    "relUrl": "/#edges-pathfinding"
  },"899": {
    "doc": "PCG Extended Toolkit",
    "title": "Plot Edges Pathfinding",
    "content": "Find a path that goes through multiple chained points. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#plot-edges-pathfinding",
    "relUrl": "/#plot-edges-pathfinding"
  },"900": {
    "doc": "PCG Extended Toolkit",
    "title": "Find Contours",
    "content": "Find edge contours &amp; outlines . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#find-contours",
    "relUrl": "/#find-contours"
  },"901": {
    "doc": "PCG Extended Toolkit",
    "title": "Find All Cells",
    "content": "Find all cells within a cluster . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#find-all-cells",
    "relUrl": "/#find-all-cells"
  },"902": {
    "doc": "PCG Extended Toolkit",
    "title": "Grow Paths",
    "content": "Grows paths from seeds alone. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#grow-paths",
    "relUrl": "/#grow-paths"
  },"903": {
    "doc": "PCG Extended Toolkit",
    "title": "Paths",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#paths",
    "relUrl": "/#paths"
  },"904": {
    "doc": "PCG Extended Toolkit",
    "title": "Smooth",
    "content": "Smooth points properties and attributes . · · ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#smooth",
    "relUrl": "/#smooth"
  },"905": {
    "doc": "PCG Extended Toolkit",
    "title": "Orient",
    "content": "Orient points in relation to their neighbors . · · · ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#orient",
    "relUrl": "/#orient"
  },"906": {
    "doc": "PCG Extended Toolkit",
    "title": "Blend",
    "content": "Blend individual points between from paths’ start and end points. · · · ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#blend",
    "relUrl": "/#blend"
  },"907": {
    "doc": "PCG Extended Toolkit",
    "title": "Path Spline Mesh",
    "content": "Create SplineMesh components from paths . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#path-spline-mesh",
    "relUrl": "/#path-spline-mesh"
  },"908": {
    "doc": "PCG Extended Toolkit",
    "title": "Solidify Path",
    "content": "Solidify paths into “edges” . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#solidify-path",
    "relUrl": "/#solidify-path"
  },"909": {
    "doc": "PCG Extended Toolkit",
    "title": "Path × Path Crossings",
    "content": "Find crossings within &amp; against other paths. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#path--path-crossings",
    "relUrl": "/#path--path-crossings"
  },"910": {
    "doc": "PCG Extended Toolkit",
    "title": "Path × Bounds Intersections",
    "content": "Find intersections with points bounds. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#path--bounds-intersections",
    "relUrl": "/#path--bounds-intersections"
  },"911": {
    "doc": "PCG Extended Toolkit",
    "title": "Attribute Rolling",
    "content": "Does a rolling operation over properties &amp; attributes along a path . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#attribute-rolling",
    "relUrl": "/#attribute-rolling"
  },"912": {
    "doc": "PCG Extended Toolkit",
    "title": "Fuse Collinear",
    "content": "Fuse collinear points on a path . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#fuse-collinear",
    "relUrl": "/#fuse-collinear"
  },"913": {
    "doc": "PCG Extended Toolkit",
    "title": "Offset",
    "content": "Offset path along a direction . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#offset",
    "relUrl": "/#offset"
  },"914": {
    "doc": "PCG Extended Toolkit",
    "title": "Bevel",
    "content": "Bevel path points . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#bevel",
    "relUrl": "/#bevel"
  },"915": {
    "doc": "PCG Extended Toolkit",
    "title": "Resample",
    "content": "Resample path points. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#resample",
    "relUrl": "/#resample"
  },"916": {
    "doc": "PCG Extended Toolkit",
    "title": "Shift",
    "content": "Shift path point order inside the dataset. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#shift",
    "relUrl": "/#shift"
  },"917": {
    "doc": "PCG Extended Toolkit",
    "title": "Path Spline Mesh (Simple)",
    "content": "Create SplineMesh components from paths . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#path-spline-mesh-simple",
    "relUrl": "/#path-spline-mesh-simple"
  },"918": {
    "doc": "PCG Extended Toolkit",
    "title": "Spline to Path",
    "content": "Converts a spline into a path. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#spline-to-path",
    "relUrl": "/#spline-to-path"
  },"919": {
    "doc": "PCG Extended Toolkit",
    "title": "Subdivide",
    "content": "Create sub-points between existing points . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#subdivide",
    "relUrl": "/#subdivide"
  },"920": {
    "doc": "PCG Extended Toolkit",
    "title": "Create Spline",
    "content": "A Create Spline node with per-point controls &amp; tagging abilities. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#create-spline",
    "relUrl": "/#create-spline"
  },"921": {
    "doc": "PCG Extended Toolkit",
    "title": "Write Paths Properties",
    "content": "Compute extra path informations . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#write-paths-properties",
    "relUrl": "/#write-paths-properties"
  },"922": {
    "doc": "PCG Extended Toolkit",
    "title": "Write Tangents",
    "content": "TBD . · · · · · ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#write-tangents",
    "relUrl": "/#write-tangents"
  },"923": {
    "doc": "PCG Extended Toolkit",
    "title": "Paths to Clusters",
    "content": "Convert paths to clusters. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#paths-to-clusters",
    "relUrl": "/#paths-to-clusters"
  },"924": {
    "doc": "PCG Extended Toolkit",
    "title": "Staging",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#staging",
    "relUrl": "/#staging"
  },"925": {
    "doc": "PCG Extended Toolkit",
    "title": "Asset Staging",
    "content": "Prepare points before spawning. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#asset-staging",
    "relUrl": "/#asset-staging"
  },"926": {
    "doc": "PCG Extended Toolkit",
    "title": "Asset Collection to Set",
    "content": "Converts an asset collection to an attribute set. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#asset-collection-to-set",
    "relUrl": "/#asset-collection-to-set"
  },"927": {
    "doc": "PCG Extended Toolkit",
    "title": "Misc",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#misc",
    "relUrl": "/#misc"
  },"928": {
    "doc": "PCG Extended Toolkit",
    "title": "Sort Points",
    "content": "Sort points using any number of properties and attributes . · ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#sort-points",
    "relUrl": "/#sort-points"
  },"929": {
    "doc": "PCG Extended Toolkit",
    "title": "Partition by Values",
    "content": "Create complex partitions from multiple criteria . · ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#partition-by-values",
    "relUrl": "/#partition-by-values"
  },"930": {
    "doc": "PCG Extended Toolkit",
    "title": "Fuse Points",
    "content": "Proximity-based point pruning and blending. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#fuse-points",
    "relUrl": "/#fuse-points"
  },"931": {
    "doc": "PCG Extended Toolkit",
    "title": "Attribute Stats",
    "content": "Compute attribute statistics &amp; unique values . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#attribute-stats",
    "relUrl": "/#attribute-stats"
  },"932": {
    "doc": "PCG Extended Toolkit",
    "title": "Attribute To Tags",
    "content": "Transfer attribute values to collection tags . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#attribute-to-tags",
    "relUrl": "/#attribute-to-tags"
  },"933": {
    "doc": "PCG Extended Toolkit",
    "title": "Points to Bounds",
    "content": "Convert point clouds to a single bounding point . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#points-to-bounds",
    "relUrl": "/#points-to-bounds"
  },"934": {
    "doc": "PCG Extended Toolkit",
    "title": "Find point on Bounds (Any)",
    "content": "Find a point closest to a bound-relative position. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#find-point-on-bounds-any",
    "relUrl": "/#find-point-on-bounds-any"
  },"935": {
    "doc": "PCG Extended Toolkit",
    "title": "Reverse Points Order",
    "content": "Reverse current points order. Way faster than reverse index sort. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#reverse-points-order",
    "relUrl": "/#reverse-points-order"
  },"936": {
    "doc": "PCG Extended Toolkit",
    "title": "Cherry Pick Points",
    "content": "Cherry pick points using their indices. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#cherry-pick-points",
    "relUrl": "/#cherry-pick-points"
  },"937": {
    "doc": "PCG Extended Toolkit",
    "title": "Batch Actions",
    "content": "A node that batche-process individual actions . · · ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#batch-actions",
    "relUrl": "/#batch-actions"
  },"938": {
    "doc": "PCG Extended Toolkit",
    "title": "Collocation Count",
    "content": "Cherry pick points using their indices. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#collocation-count",
    "relUrl": "/#collocation-count"
  },"939": {
    "doc": "PCG Extended Toolkit",
    "title": "Destroy Actor",
    "content": "Destroys target actors created by the same PCG Component . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#destroy-actor",
    "relUrl": "/#destroy-actor"
  },"940": {
    "doc": "PCG Extended Toolkit",
    "title": "GUID",
    "content": "Get/Set GUID in a wide range of formats . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#guid",
    "relUrl": "/#guid"
  },"941": {
    "doc": "PCG Extended Toolkit",
    "title": "Iterations",
    "content": "Artificially drive loop subgraph iteration count . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#iterations",
    "relUrl": "/#iterations"
  },"942": {
    "doc": "PCG Extended Toolkit",
    "title": "Merge Points by Tags",
    "content": "Merge points based on shared tags . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#merge-points-by-tags",
    "relUrl": "/#merge-points-by-tags"
  },"943": {
    "doc": "PCG Extended Toolkit",
    "title": "Meta Cleanup",
    "content": "Keep/Remove tags &amp; attributes using string queries . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#meta-cleanup",
    "relUrl": "/#meta-cleanup"
  },"944": {
    "doc": "PCG Extended Toolkit",
    "title": "Meta Filter",
    "content": "Filter point collections based on tags &amp; attributes using string queries . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#meta-filter",
    "relUrl": "/#meta-filter"
  },"945": {
    "doc": "PCG Extended Toolkit",
    "title": "Write Index",
    "content": "Write current point index to an attribute . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#write-index",
    "relUrl": "/#write-index"
  },"946": {
    "doc": "PCG Extended Toolkit",
    "title": "Refresh Seed",
    "content": "Refreshes point seeds based on their position. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#refresh-seed",
    "relUrl": "/#refresh-seed"
  },"947": {
    "doc": "PCG Extended Toolkit",
    "title": "Discard by Points Count",
    "content": "Filter point dataset by their point count. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#discard-by-points-count",
    "relUrl": "/#discard-by-points-count"
  },"948": {
    "doc": "PCG Extended Toolkit",
    "title": "Discard by Overlap",
    "content": "Kindda like self-pruning but for collections. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#discard-by-overlap",
    "relUrl": "/#discard-by-overlap"
  },"949": {
    "doc": "PCG Extended Toolkit",
    "title": "Sampling",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#sampling",
    "relUrl": "/#sampling"
  },"950": {
    "doc": "PCG Extended Toolkit",
    "title": "Sample Nearest Surface",
    "content": "Sample information from the nearest mesh collision . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#sample-nearest-surface",
    "relUrl": "/#sample-nearest-surface"
  },"951": {
    "doc": "PCG Extended Toolkit",
    "title": "Sample Line Trace",
    "content": "Sample environment using line casting . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#sample-line-trace",
    "relUrl": "/#sample-line-trace"
  },"952": {
    "doc": "PCG Extended Toolkit",
    "title": "Wait for PCG Data",
    "content": "Wait for PCG Components data to be available and grabs it. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#wait-for-pcg-data",
    "relUrl": "/#wait-for-pcg-data"
  },"953": {
    "doc": "PCG Extended Toolkit",
    "title": "Sample Nearest Spline",
    "content": "Sample informations from the nearest spline . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#sample-nearest-spline",
    "relUrl": "/#sample-nearest-spline"
  },"954": {
    "doc": "PCG Extended Toolkit",
    "title": "Sample Nearest Points",
    "content": "Sample points within a spherical range . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#sample-nearest-points",
    "relUrl": "/#sample-nearest-points"
  },"955": {
    "doc": "PCG Extended Toolkit",
    "title": "Sample Nearest Bounds",
    "content": "Sample within bounds . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#sample-nearest-bounds",
    "relUrl": "/#sample-nearest-bounds"
  },"956": {
    "doc": "PCG Extended Toolkit",
    "title": "Sample Overlap Stats",
    "content": "Compute overlap statistics between point collections . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#sample-overlap-stats",
    "relUrl": "/#sample-overlap-stats"
  },"957": {
    "doc": "PCG Extended Toolkit",
    "title": "Textures",
    "content": "Nodes that work with textures . · · · ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#textures",
    "relUrl": "/#textures"
  },"958": {
    "doc": "PCG Extended Toolkit",
    "title": "Sample Neighbors",
    "content": "Sample points based on edge connections . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#sample-neighbors",
    "relUrl": "/#sample-neighbors"
  },"959": {
    "doc": "PCG Extended Toolkit",
    "title": "Pack Actor Data",
    "content": "Conveniently process actors and output data using custom blueprints . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#pack-actor-data",
    "relUrl": "/#pack-actor-data"
  },"960": {
    "doc": "PCG Extended Toolkit",
    "title": "Sample Inside Bounds",
    "content": "Sample target points contained within bounds. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#sample-inside-bounds",
    "relUrl": "/#sample-inside-bounds"
  },"961": {
    "doc": "PCG Extended Toolkit",
    "title": "Shape Ecosystem",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#shape-ecosystem",
    "relUrl": "/#shape-ecosystem"
  },"962": {
    "doc": "PCG Extended Toolkit",
    "title": "Create Shapes",
    "content": "Create parametric shapes out of seed points . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#create-shapes",
    "relUrl": "/#create-shapes"
  },"963": {
    "doc": "PCG Extended Toolkit",
    "title": "🜛 Circle",
    "content": "Circle, Arc, and more . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#circle",
    "relUrl": "/#circle"
  },"964": {
    "doc": "PCG Extended Toolkit",
    "title": "Filter Ecosystem",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#filter-ecosystem",
    "relUrl": "/#filter-ecosystem"
  },"965": {
    "doc": "PCG Extended Toolkit",
    "title": "Uber Filter",
    "content": "Combine multiple filters . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#uber-filter",
    "relUrl": "/#uber-filter"
  },"966": {
    "doc": "PCG Extended Toolkit",
    "title": "Uber Filter (Collection)",
    "content": "Combine multiple filters . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#uber-filter-collection",
    "relUrl": "/#uber-filter-collection"
  },"967": {
    "doc": "PCG Extended Toolkit",
    "title": "Individual Filters",
    "content": "There are here to enable ctrl+f users. You can find all about them in the Filter Ecosystem section. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#individual-filters",
    "relUrl": "/#individual-filters"
  },"968": {
    "doc": "PCG Extended Toolkit",
    "title": "🝖 AND / OR (Group)",
    "content": "Group multiple filters to set up complex AND/OR branches. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#and--or-group",
    "relUrl": "/#and--or-group"
  },"969": {
    "doc": "PCG Extended Toolkit",
    "title": "🝖 Adjacency (Node)",
    "content": "Check if adjacent node meet specific conditions . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#adjacency-node",
    "relUrl": "/#adjacency-node"
  },"970": {
    "doc": "PCG Extended Toolkit",
    "title": "🝖 Compare Nearest (Numeric)",
    "content": "The Numeric Comparison Filter compares the arithmetic value of an attribute against the closest point from another dataset. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#compare-nearest-numeric",
    "relUrl": "/#compare-nearest-numeric"
  },"971": {
    "doc": "PCG Extended Toolkit",
    "title": "🝖 Compare (Numeric)",
    "content": "The Numeric Comparison Filter compares the arithmetic value of two attributes . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#compare-numeric",
    "relUrl": "/#compare-numeric"
  },"972": {
    "doc": "PCG Extended Toolkit",
    "title": "🝖 Edge Direction (Node)",
    "content": "Check if adjacent node meet specific conditions . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#edge-direction-node",
    "relUrl": "/#edge-direction-node"
  },"973": {
    "doc": "PCG Extended Toolkit",
    "title": "🝖 Compare (String)",
    "content": "Compares two string-like attributes against each other. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#compare-string",
    "relUrl": "/#compare-string"
  },"974": {
    "doc": "PCG Extended Toolkit",
    "title": "🝖 Neighbors Count (Node)",
    "content": "Check a node’ neighbors count . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#neighbors-count-node",
    "relUrl": "/#neighbors-count-node"
  },"975": {
    "doc": "PCG Extended Toolkit",
    "title": "🝖 Bool",
    "content": "Performs a simple boolean comparison, converting numeric values to true (&gt; 0) or false (&lt;= 0). ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#bool",
    "relUrl": "/#bool"
  },"976": {
    "doc": "PCG Extended Toolkit",
    "title": "🝖 Within Range",
    "content": "Checks if an attribute value falls within a specified range. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#within-range",
    "relUrl": "/#within-range"
  },"977": {
    "doc": "PCG Extended Toolkit",
    "title": "🝖 Dot Product",
    "content": "Compares the dot product of two direction vectors against a third value. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#dot-product",
    "relUrl": "/#dot-product"
  },"978": {
    "doc": "PCG Extended Toolkit",
    "title": "🝖 Modulo Comparison",
    "content": "Compares the modulo of two attributes against a third operand, with configurable comparisons and tolerance. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#modulo-comparison",
    "relUrl": "/#modulo-comparison"
  },"979": {
    "doc": "PCG Extended Toolkit",
    "title": "🝖 Edge Direction (Edge)",
    "content": "Check if the edge direction is within a given range. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#edge-direction-edge",
    "relUrl": "/#edge-direction-edge"
  },"980": {
    "doc": "PCG Extended Toolkit",
    "title": "🝖 Endpoints Compare (Numeric)",
    "content": "Compare the value of an attribute on each of the edge endpoint. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#endpoints-compare-numeric",
    "relUrl": "/#endpoints-compare-numeric"
  },"981": {
    "doc": "PCG Extended Toolkit",
    "title": "🝖 Bounds",
    "content": "Checks if a point is inside or outside the provided bounds, with options for bounds types and an epsilon adjustment. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#bounds",
    "relUrl": "/#bounds"
  },"982": {
    "doc": "PCG Extended Toolkit",
    "title": "🝖 Distance",
    "content": "Compare distance to closest target against a constant or attribute. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#distance",
    "relUrl": "/#distance"
  },"983": {
    "doc": "PCG Extended Toolkit",
    "title": "🝖 Endpoints Compare (String)",
    "content": "Compare the value of an attribute on each of the edge endpoint. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#endpoints-compare-string",
    "relUrl": "/#endpoints-compare-string"
  },"984": {
    "doc": "PCG Extended Toolkit",
    "title": "🝖 Bitmask",
    "content": "Checks specific flags in an int64 bitmask attribute with configurable mask types, comparisons, and an option to invert results. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#bitmask",
    "relUrl": "/#bitmask"
  },"985": {
    "doc": "PCG Extended Toolkit",
    "title": "🝖 Neighbors Count (Edge)",
    "content": "Check a node’ neighbors count . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#neighbors-count-edge",
    "relUrl": "/#neighbors-count-edge"
  },"986": {
    "doc": "PCG Extended Toolkit",
    "title": "🝖 Random",
    "content": "Random filter. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#random",
    "relUrl": "/#random"
  },"987": {
    "doc": "PCG Extended Toolkit",
    "title": "🝖 Mean Value",
    "content": "The Mean Value Filter compares per-point values of an attribute against the mean statistical value of that same attribute. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#mean-value",
    "relUrl": "/#mean-value"
  },"988": {
    "doc": "PCG Extended Toolkit",
    "title": "🝖 Self Compare (Numeric)",
    "content": "Compares the numeric value at one index against the same attribute at another index. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#self-compare-numeric",
    "relUrl": "/#self-compare-numeric"
  },"989": {
    "doc": "PCG Extended Toolkit",
    "title": "🝖 Self Compare (String)",
    "content": "Compares the string value at one index against the same attribute at another index. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#self-compare-string",
    "relUrl": "/#self-compare-string"
  },"990": {
    "doc": "PCG Extended Toolkit",
    "title": "🝖 Spline Inclusion",
    "content": "Checks against how a point is included in a spline. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#spline-inclusion",
    "relUrl": "/#spline-inclusion"
  },"991": {
    "doc": "PCG Extended Toolkit",
    "title": "🝖 Path Inclusion",
    "content": "Checks against how a point is included in a path. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/#path-inclusion",
    "relUrl": "/#path-inclusion"
  },"992": {
    "doc": "PCG Extended Toolkit",
    "title": "PCG Extended Toolkit",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/",
    "relUrl": "/"
  },"993": {
    "doc": "Batch Actions",
    "title": "Batch Actions",
    "content": "PCGEx | Batch Actions A node that batche-process individual actions . The Batch Actions node is executing all its input “actions” in a single node. It’s especially handy if you want to externalize some processing, or have subgraph that offer the opportunity for additional processing. InPoints to be matchmaked ActionsActions to be processed OutIn after actions. Table of content . | Properties . | Available Actions | . | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/batch-actions/#batch-actions",
    "relUrl": "/doc-misc/batch-actions/#batch-actions"
  },"994": {
    "doc": "Batch Actions",
    "title": "Properties",
    "content": ". DOC TDB . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/batch-actions/#properties",
    "relUrl": "/doc-misc/batch-actions/#properties"
  },"995": {
    "doc": "Batch Actions",
    "title": "Available Actions",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/batch-actions/#available-actions",
    "relUrl": "/doc-misc/batch-actions/#available-actions"
  },"996": {
    "doc": "Batch Actions",
    "title": "🝐 Write Result",
    "content": "The Write Results action… . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/batch-actions/#write-result",
    "relUrl": "/doc-misc/batch-actions/#write-result"
  },"997": {
    "doc": "Batch Actions",
    "title": "🝐 Write Attributes",
    "content": "The Write Attribute action… . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/batch-actions/#write-attributes",
    "relUrl": "/doc-misc/batch-actions/#write-attributes"
  },"998": {
    "doc": "Batch Actions",
    "title": "Batch Actions",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/batch-actions/",
    "relUrl": "/doc-misc/batch-actions/"
  },"999": {
    "doc": "Bitmasks",
    "title": "Bitmasks",
    "content": "TBD . TBD . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/bitmasks/#bitmasks",
    "relUrl": "/doc-misc/bitmasks/#bitmasks"
  },"1000": {
    "doc": "Bitmasks",
    "title": "Bitmasks Nodes",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/bitmasks/#bitmasks-nodes",
    "relUrl": "/doc-misc/bitmasks/#bitmasks-nodes"
  },"1001": {
    "doc": "Bitmasks",
    "title": "Bitmask",
    "content": "A simple, single bitmask attribute. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/bitmasks/#bitmask",
    "relUrl": "/doc-misc/bitmasks/#bitmask"
  },"1002": {
    "doc": "Bitmasks",
    "title": "Bitmask Merge",
    "content": "A simple, single bitmask attribute. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/bitmasks/#bitmask-merge",
    "relUrl": "/doc-misc/bitmasks/#bitmask-merge"
  },"1003": {
    "doc": "Bitmasks",
    "title": "Bitmasks",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/bitmasks/",
    "relUrl": "/doc-misc/bitmasks/"
  },"1004": {
    "doc": "Diagrams",
    "title": "Diagrams",
    "content": "Delaunay 2D / 3D, Voronoi 2D / 3D . TBD . Classic graphs are very basic generators that can turn any random point cloud into a nicely interconnected structure. Delaunay &amp; Voronoi are two of the most popular algorithms to achieve that; as they offer the benefit of interesting &amp; useful properties. Note that the 3D version of those generators requires the points to NOT be coplanar for the maths to work – you’ll be prompted to use the 2D version otherwise. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/diagrams/#diagrams",
    "relUrl": "/doc-clusters/diagrams/#diagrams"
  },"1005": {
    "doc": "Diagrams",
    "title": "Available Diagrams",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/diagrams/#available-diagrams",
    "relUrl": "/doc-clusters/diagrams/#available-diagrams"
  },"1006": {
    "doc": "Diagrams",
    "title": "Delaunay 2D",
    "content": "Outputs a 2D Delaunay triangulation. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/diagrams/#delaunay-2d",
    "relUrl": "/doc-clusters/diagrams/#delaunay-2d"
  },"1007": {
    "doc": "Diagrams",
    "title": "Voronoi 2D",
    "content": "Outputs a 2D Voronoi graph. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/diagrams/#voronoi-2d",
    "relUrl": "/doc-clusters/diagrams/#voronoi-2d"
  },"1008": {
    "doc": "Diagrams",
    "title": "Delaunay 3D",
    "content": "Outputs a 3D Delaunay tetrahedralization. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/diagrams/#delaunay-3d",
    "relUrl": "/doc-clusters/diagrams/#delaunay-3d"
  },"1009": {
    "doc": "Diagrams",
    "title": "Voronoi 3D",
    "content": "Outputs a 3D Voronoi graph. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/diagrams/#voronoi-3d",
    "relUrl": "/doc-clusters/diagrams/#voronoi-3d"
  },"1010": {
    "doc": "Diagrams",
    "title": "Diagrams",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/diagrams/",
    "relUrl": "/doc-clusters/diagrams/"
  },"1011": {
    "doc": "🝓 Goal Pickers",
    "title": "🝓 Goal Pickers",
    "content": "An inventory of the available goal pickers modules. Heuristics modules are primarily used by Pathfinding nodes, such as Edges Pathfinding and Plot Edges Pathfinding . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/goal-pickers/#goal-pickers",
    "relUrl": "/doc-pathfinding/goal-pickers/#goal-pickers"
  },"1012": {
    "doc": "🝓 Goal Pickers",
    "title": "Modules",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/goal-pickers/#modules",
    "relUrl": "/doc-pathfinding/goal-pickers/#modules"
  },"1013": {
    "doc": "🝓 Goal Pickers",
    "title": "🝓 Default",
    "content": "Match seeds to goals at the same index. The Default picker … . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/goal-pickers/#default",
    "relUrl": "/doc-pathfinding/goal-pickers/#default"
  },"1014": {
    "doc": "🝓 Goal Pickers",
    "title": "🝓 Random",
    "content": "Match seeds to goals at a random index. The Random picker … . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/goal-pickers/#random",
    "relUrl": "/doc-pathfinding/goal-pickers/#random"
  },"1015": {
    "doc": "🝓 Goal Pickers",
    "title": "🝓 Goal from Attribute",
    "content": "Match seed with goals picked at an attribute-specified index. The Goal from Attribute picker … . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/goal-pickers/#goal-from-attribute",
    "relUrl": "/doc-pathfinding/goal-pickers/#goal-from-attribute"
  },"1016": {
    "doc": "🝓 Goal Pickers",
    "title": "🝓 Goal Pickers",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/goal-pickers/",
    "relUrl": "/doc-pathfinding/goal-pickers/"
  },"1017": {
    "doc": "Cluster Filters",
    "title": "Cluster Filters",
    "content": "Cluster-specific filters . The Cluster Filters are a sub-collection of filters that only works with certain specific cluster processing nodes, that can work with more rely on intrinsinc &amp; relational data comparisons from either vtx or edges specifically. Cluster filters are primarily designed to be used with nodes like Refine and Node Flag. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/cluster-filters/#cluster-filters",
    "relUrl": "/doc-clusters/cluster-filters/#cluster-filters"
  },"1018": {
    "doc": "Cluster Filters",
    "title": "Available Filters (Node/Vtx)",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/cluster-filters/#available-filters-nodevtx",
    "relUrl": "/doc-clusters/cluster-filters/#available-filters-nodevtx"
  },"1019": {
    "doc": "Cluster Filters",
    "title": "🝖 Adjacency (Node)",
    "content": "Check if adjacent node meet specific conditions . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/cluster-filters/#adjacency-node",
    "relUrl": "/doc-clusters/cluster-filters/#adjacency-node"
  },"1020": {
    "doc": "Cluster Filters",
    "title": "🝖 Edge Direction (Node)",
    "content": "Check if adjacent node meet specific conditions . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/cluster-filters/#edge-direction-node",
    "relUrl": "/doc-clusters/cluster-filters/#edge-direction-node"
  },"1021": {
    "doc": "Cluster Filters",
    "title": "🝖 Neighbors Count (Node)",
    "content": "Check a node’ neighbors count . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/cluster-filters/#neighbors-count-node",
    "relUrl": "/doc-clusters/cluster-filters/#neighbors-count-node"
  },"1022": {
    "doc": "Cluster Filters",
    "title": "Available Filters (Edge)",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/cluster-filters/#available-filters-edge",
    "relUrl": "/doc-clusters/cluster-filters/#available-filters-edge"
  },"1023": {
    "doc": "Cluster Filters",
    "title": "🝖 Edge Direction (Edge)",
    "content": "Check if the edge direction is within a given range. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/cluster-filters/#edge-direction-edge",
    "relUrl": "/doc-clusters/cluster-filters/#edge-direction-edge"
  },"1024": {
    "doc": "Cluster Filters",
    "title": "🝖 Endpoints Compare (Numeric)",
    "content": "Compare the value of an attribute on each of the edge endpoint. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/cluster-filters/#endpoints-compare-numeric",
    "relUrl": "/doc-clusters/cluster-filters/#endpoints-compare-numeric"
  },"1025": {
    "doc": "Cluster Filters",
    "title": "🝖 Endpoints Compare (String)",
    "content": "Compare the value of an attribute on each of the edge endpoint. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/cluster-filters/#endpoints-compare-string",
    "relUrl": "/doc-clusters/cluster-filters/#endpoints-compare-string"
  },"1026": {
    "doc": "Cluster Filters",
    "title": "🝖 Neighbors Count (Edge)",
    "content": "Check a node’ neighbors count . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/cluster-filters/#neighbors-count-edge",
    "relUrl": "/doc-clusters/cluster-filters/#neighbors-count-edge"
  },"1027": {
    "doc": "Cluster Filters",
    "title": "Cluster Filters",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/cluster-filters/",
    "relUrl": "/doc-clusters/cluster-filters/"
  },"1028": {
    "doc": "Lloyd Relax",
    "title": "Lloyd Relax",
    "content": "Two nodes to conveniently relax point data. Table of content . The *Lloyd Relax nodes are providing an implementation of the Lloyd’ Algorithm, in both 2D and 3D . Since every relaxation step involves building the Voronoi diagram of the set of points, needless to say this node is very expensive. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/lloyd-relax/#lloyd-relax",
    "relUrl": "/doc-misc/lloyd-relax/#lloyd-relax"
  },"1029": {
    "doc": "Lloyd Relax",
    "title": "2D Lloyd Relaxation",
    "content": "Applies the Lloyd Relaxation algorithm. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/lloyd-relax/#d-lloyd-relaxation",
    "relUrl": "/doc-misc/lloyd-relax/#d-lloyd-relaxation"
  },"1030": {
    "doc": "Lloyd Relax",
    "title": "3D Lloyd Relaxation",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/lloyd-relax/#d-lloyd-relaxation-1",
    "relUrl": "/doc-misc/lloyd-relax/#d-lloyd-relaxation-1"
  },"1031": {
    "doc": "Lloyd Relax",
    "title": "Lloyd Relax",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/lloyd-relax/",
    "relUrl": "/doc-misc/lloyd-relax/"
  },"1032": {
    "doc": "Misc",
    "title": "Misc",
    "content": "All-around, generic utility nodes. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/#misc",
    "relUrl": "/doc-misc/#misc"
  },"1033": {
    "doc": "Misc",
    "title": "Misc Nodes",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/#misc-nodes",
    "relUrl": "/doc-misc/#misc-nodes"
  },"1034": {
    "doc": "Misc",
    "title": "Sort Points",
    "content": "Sort points using any number of properties and attributes . · ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/#sort-points",
    "relUrl": "/doc-misc/#sort-points"
  },"1035": {
    "doc": "Misc",
    "title": "Partition by Values",
    "content": "Create complex partitions from multiple criteria . · ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/#partition-by-values",
    "relUrl": "/doc-misc/#partition-by-values"
  },"1036": {
    "doc": "Misc",
    "title": "Fuse Points",
    "content": "Proximity-based point pruning and blending. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/#fuse-points",
    "relUrl": "/doc-misc/#fuse-points"
  },"1037": {
    "doc": "Misc",
    "title": "Points to Bounds",
    "content": "Convert point clouds to a single bounding point . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/#points-to-bounds",
    "relUrl": "/doc-misc/#points-to-bounds"
  },"1038": {
    "doc": "Misc",
    "title": "Attribute To Tags",
    "content": "Transfer attribute values to collection tags . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/#attribute-to-tags",
    "relUrl": "/doc-misc/#attribute-to-tags"
  },"1039": {
    "doc": "Misc",
    "title": "Attribute Stats",
    "content": "Compute attribute statistics &amp; unique values . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/#attribute-stats",
    "relUrl": "/doc-misc/#attribute-stats"
  },"1040": {
    "doc": "Misc",
    "title": "Find point on Bounds (Any)",
    "content": "Find a point closest to a bound-relative position. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/#find-point-on-bounds-any",
    "relUrl": "/doc-misc/#find-point-on-bounds-any"
  },"1041": {
    "doc": "Misc",
    "title": "Collocation Count",
    "content": "Cherry pick points using their indices. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/#collocation-count",
    "relUrl": "/doc-misc/#collocation-count"
  },"1042": {
    "doc": "Misc",
    "title": "Destroy Actor",
    "content": "Destroys target actors created by the same PCG Component . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/#destroy-actor",
    "relUrl": "/doc-misc/#destroy-actor"
  },"1043": {
    "doc": "Misc",
    "title": "Meta Filter",
    "content": "Filter point collections based on tags &amp; attributes using string queries . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/#meta-filter",
    "relUrl": "/doc-misc/#meta-filter"
  },"1044": {
    "doc": "Misc",
    "title": "Write Index",
    "content": "Write current point index to an attribute . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/#write-index",
    "relUrl": "/doc-misc/#write-index"
  },"1045": {
    "doc": "Misc",
    "title": "Cherry Pick Points",
    "content": "Cherry pick points using their indices. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/#cherry-pick-points",
    "relUrl": "/doc-misc/#cherry-pick-points"
  },"1046": {
    "doc": "Misc",
    "title": "Reverse Points Order",
    "content": "Reverse current points order. Way faster than reverse index sort. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/#reverse-points-order",
    "relUrl": "/doc-misc/#reverse-points-order"
  },"1047": {
    "doc": "Misc",
    "title": "Batch Actions",
    "content": "A node that batche-process individual actions . · · ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/#batch-actions",
    "relUrl": "/doc-misc/#batch-actions"
  },"1048": {
    "doc": "Misc",
    "title": "GUID",
    "content": "Get/Set GUID in a wide range of formats . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/#guid",
    "relUrl": "/doc-misc/#guid"
  },"1049": {
    "doc": "Misc",
    "title": "Iterations",
    "content": "Artificially drive loop subgraph iteration count . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/#iterations",
    "relUrl": "/doc-misc/#iterations"
  },"1050": {
    "doc": "Misc",
    "title": "Merge Points by Tags",
    "content": "Merge points based on shared tags . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/#merge-points-by-tags",
    "relUrl": "/doc-misc/#merge-points-by-tags"
  },"1051": {
    "doc": "Misc",
    "title": "Meta Cleanup",
    "content": "Keep/Remove tags &amp; attributes using string queries . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/#meta-cleanup",
    "relUrl": "/doc-misc/#meta-cleanup"
  },"1052": {
    "doc": "Misc",
    "title": "Refresh Seed",
    "content": "Refreshes point seeds based on their position. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/#refresh-seed",
    "relUrl": "/doc-misc/#refresh-seed"
  },"1053": {
    "doc": "Misc",
    "title": "Discard by Points Count",
    "content": "Filter point dataset by their point count. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/#discard-by-points-count",
    "relUrl": "/doc-misc/#discard-by-points-count"
  },"1054": {
    "doc": "Misc",
    "title": "Discard by Overlap",
    "content": "Kindda like self-pruning but for collections. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/#discard-by-overlap",
    "relUrl": "/doc-misc/#discard-by-overlap"
  },"1055": {
    "doc": "Misc",
    "title": "Transforms",
    "content": "Various unusual transform … . · · · ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/#transforms",
    "relUrl": "/doc-misc/#transforms"
  },"1056": {
    "doc": "Misc",
    "title": "Lloyd Relax",
    "content": "Two nodes to conveniently relax point data. · · ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/#lloyd-relax",
    "relUrl": "/doc-misc/#lloyd-relax"
  },"1057": {
    "doc": "Misc",
    "title": "Misc",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/",
    "relUrl": "/doc-misc/"
  },"1058": {
    "doc": "Asset Collection",
    "title": "Asset Collection",
    "content": "Glorified Data Tables . Asset Collection represent collections of things (meshes, actors) that can be used with the Asset Staging node. Table of content . | Creating new collections | Rebuilding staging data | Utilitary methods | Available Collections | Entries &amp; Collections Tags | . Asset Collections are basically lists of assets that you can then use inside PCG; that all share some basic properties. They exist in different flavors, for different purposes (i.e actors vs meshes), but their main appeal over Data Table or PCG Data Asset is caching and nesting. Cached bounds data . Each entry has some basic information cached, amongst which the bounds of the referenced asset. This is especially useful as it allows nodes to access an asset bounds’ without having to load the asset in memory. It enables nodes like Asset Staging to do some interesting work on points before spawning anything in the world. Nested collections . Each entry can be another collection. This is where the Asset Collection shines, because a collection can be weighted like any other entry. PCGEx will recognize sub-collection and will keep on digging in these until an asset is found. This is particulary handy when doing random weighted selection, where you want only a subset of items to be associated to a particular weight range, and then have a new random weighted pick from inside that range. Collections can be nested without limits, offering highly granular control over weighted &amp; random distribution. Re-usability &amp; templating . Since they’re regular DataAssets, Asset Collections can easily be extended, re-used, shared amongst different settings &amp; PCG setups. Convertible . In order to support any workflow, Asset Collection to Set makes it easy to convert any PCGEx’ Asset Collection to a good ol’ attribute set, on the fly. Note: Collections currently don’t properly check for circular dependencies, so be careful or you’re in for a ride. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-assets/asset-collections/#asset-collection",
    "relUrl": "/doc-assets/asset-collections/#asset-collection"
  },"1059": {
    "doc": "Asset Collection",
    "title": "Creating new collections",
    "content": "You can create Asset Collection just like any other DataAsset: . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-assets/asset-collections/#creating-new-collections",
    "relUrl": "/doc-assets/asset-collections/#creating-new-collections"
  },"1060": {
    "doc": "Asset Collection",
    "title": "Rebuilding staging data",
    "content": "“Staging data” is basically per-item cached information. It’s pretty lightweight and consist mostly of internal stuffs; and more importantly, asset bounds. Note: Staging data is refreshed &amp; stored whenever an update is made to the collection, but won’t refresh when the referenced assets are updated. As such you will need to trigger a manual refresh from to time. You can do so using the three buttons at the top of any open Asset Collection: . | Button | Effect | . | &lt;span class=\"ebit\"&gt;Rebuild Staging&lt;/span&gt; | Rebuilds the currently open Asset Collection | . | &lt;span class=\"ebit\"&gt;Rebuild Staging (Recursive)&lt;/span&gt; | Rebuild the currently open Asset Collection, as well as any sub-collections; recursively. | . | &lt;span class=\"ebit\"&gt;Rebuild Staging (Project)&lt;/span&gt; | Rebuild ALL the project’ Asset Collection.Use carefully as assets needs to be loaded temporarily in memory in order to compute their bounds. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-assets/asset-collections/#rebuilding-staging-data",
    "relUrl": "/doc-assets/asset-collections/#rebuilding-staging-data"
  },"1061": {
    "doc": "Asset Collection",
    "title": "Utilitary methods",
    "content": "There a few utils at the bottom of the detail window that my come in handy: . | Button | Effect | . | &lt;span class=\"ebit\"&gt;Sort (Asc)&lt;/span&gt; | Sort collection by weights in ascending order. | . | &lt;span class=\"ebit\"&gt;Sort (Desc)&lt;/span&gt; | Sort collection by weights in descending order. | . | &lt;span class=\"ebit\"&gt;Index to Weight (Asc)&lt;/span&gt; | Assign entry index to entry weight | . | &lt;span class=\"ebit\"&gt;Pad Weights&lt;/span&gt; | Add 1 to all weights so it’s easier to weight down some assets | . | &lt;span class=\"ebit\"&gt;Weight = 100&lt;/span&gt; | Reset all weights to 100 | . | &lt;span class=\"ebit\"&gt;Randomize Weights&lt;/span&gt; | Assign random weights to items | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-assets/asset-collections/#utilitary-methods",
    "relUrl": "/doc-assets/asset-collections/#utilitary-methods"
  },"1062": {
    "doc": "Asset Collection",
    "title": "Available Collections",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-assets/asset-collections/#available-collections",
    "relUrl": "/doc-assets/asset-collections/#available-collections"
  },"1063": {
    "doc": "Asset Collection",
    "title": "🝱 Mesh Collection",
    "content": "Mesh Collection DataAsset . The Mesh Collection DataAsset is a list of Meshes with ISM/HISM Descriptors, that comes with all the Asset Collection goodies. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-assets/asset-collections/#mesh-collection",
    "relUrl": "/doc-assets/asset-collections/#mesh-collection"
  },"1064": {
    "doc": "Asset Collection",
    "title": "🝱 Actor Collection",
    "content": "Actor Collection DataAsset . The Actor Collection DataAsset is a list of Actors, that comes with all the Asset Collection goodies. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-assets/asset-collections/#actor-collection",
    "relUrl": "/doc-assets/asset-collections/#actor-collection"
  },"1065": {
    "doc": "Asset Collection",
    "title": "Entries &amp; Collections Tags",
    "content": ". Both entries and collections can hold tags. Some of these tags are entry-bound (i.e they exist in the context of a given collection only), and some are asset-bound (i.e they are always the same no matter where that entry is referenced). Some nodes, such as Path Spline Mesh can use &amp; add those tags to the components they generate. Since collections can be nested, and both entries and collections can have tags, you can pick’n choose which tags should be grabbed during the entry selection process: . | : Flags | |   | . | &lt;span class=\"ebit\"&gt;None&lt;/span&gt; | Tags will be ignored | . | &lt;span class=\"ebit\"&gt;Asset&lt;/span&gt; | Grab tags from the **final** picked entry. | . | &lt;span class=\"ebit\"&gt;Hierarchy&lt;/span&gt; | Grab tags from the **entries that have been traversed** to the final pick. | . | &lt;span class=\"ebit\"&gt;Collection&lt;/span&gt; | Grab tags from the **sub-collections that have been traversed** to the final pick.*This does not include the root collection.* | . | &lt;span class=\"ebit\"&gt;Root Collection&lt;/span&gt; | Grab tags from the \"root\", or main **collection**.*This does not include nested &amp; sub-collections.* | . | &lt;span class=\"ebit\"&gt;Root Asset&lt;/span&gt; | Grab tags from the \"root\", or first traversed entry.**This invalidates the &lt;span class=\"ebit\"&gt;Hierarchy&lt;/span&gt; flag.** | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-assets/asset-collections/#entries--collections-tags",
    "relUrl": "/doc-assets/asset-collections/#entries--collections-tags"
  },"1066": {
    "doc": "Asset Collection",
    "title": "Asset Collection",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-assets/asset-collections/",
    "relUrl": "/doc-assets/asset-collections/"
  },"1067": {
    "doc": "Connect Points",
    "title": "Connect Points",
    "content": "PCGEx | Connect Points Creates connections between points using various probes. The Connect Points node creates connections between points in clusters based on user-defined probes, allowing control over how points generate and receive connections, with options for preventing overlap and projecting points for more accurate results. PointsPoints that will be connected togethers ProbeProbes used to build connections GeneratorsFilters used to determine which points are allowed to generate connections ConnectablesFilters used to determine which points are allowed to receive connections VtxEndpoints of the output Edges EdgesEdges associated with the output Vtxs . Related . | Working with Clusters | Custom Graph | Filter Ecosystem | . Table of content . | Properties . | Generators &amp; Connectables | Available Probes | Available Filters | Cluster Output Settings | . | . The connect point node allows you to create connected clusters using different probes. Each point will go through each probe’ rules to find neighboring points to connect to. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/connect-points/#connect-points",
    "relUrl": "/doc-clusters/connect-points/#connect-points"
  },"1068": {
    "doc": "Connect Points",
    "title": "Properties",
    "content": ". | Property | Description | . | Coincidence Prevention Tolerance | When enabled, the node will prevent multiple connections from happening in the same direction, within that tolerance.*This avoids the creation of overlapping edges when testing in near-collinear situations.* | . | Project Points | If enabled, points will be projected on a plane under-the-hood before looking for connections.*This is especially desirable when working with landscapes* | . | Projection normal | The normal of the plane to project points to, if enabled.*Unless you’re doing very custom stuff, the default value is usually fine as it project points as if \"seen from top view\"* | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/connect-points/#properties",
    "relUrl": "/doc-clusters/connect-points/#properties"
  },"1069": {
    "doc": "Connect Points",
    "title": "Generators &amp; Connectables",
    "content": "These two inputs accept any of filters available as part of the Filter Ecosystem. | Generators are points that will use the probes to find neighbors they can connect to. | Connectables are points that will be seen by the probes. | . Using these filters if optional ! . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/connect-points/#generators--connectables",
    "relUrl": "/doc-clusters/connect-points/#generators--connectables"
  },"1070": {
    "doc": "Connect Points",
    "title": "Available Probes",
    "content": "Probes are at the core of the Connect Points node. You can connect as many probes as you’d like to the Probes input. No matter how many probes you use, this node will NEVER generate duplicate edges; so feel free to experiment. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/connect-points/#available-probes",
    "relUrl": "/doc-clusters/connect-points/#available-probes"
  },"1071": {
    "doc": "Connect Points",
    "title": "🝆 Closest",
    "content": "Connects to the closest point within a given radius . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/connect-points/#closest",
    "relUrl": "/doc-clusters/connect-points/#closest"
  },"1072": {
    "doc": "Connect Points",
    "title": "🝆 Direction",
    "content": "Connects to the closest point in a given direction . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/connect-points/#direction",
    "relUrl": "/doc-clusters/connect-points/#direction"
  },"1073": {
    "doc": "Connect Points",
    "title": "🝆 Index",
    "content": "Connects to a point at a given index . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/connect-points/#index",
    "relUrl": "/doc-clusters/connect-points/#index"
  },"1074": {
    "doc": "Connect Points",
    "title": "🝆 Anisotropic",
    "content": "Find connections in 16 directions . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/connect-points/#anisotropic",
    "relUrl": "/doc-clusters/connect-points/#anisotropic"
  },"1075": {
    "doc": "Connect Points",
    "title": "Available Filters",
    "content": "You can use the regular filters for Generators &amp; Connectables : . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/connect-points/#available-filters",
    "relUrl": "/doc-clusters/connect-points/#available-filters"
  },"1076": {
    "doc": "Connect Points",
    "title": "🝖 AND / OR (Group)",
    "content": "Group multiple filters to set up complex AND/OR branches. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/connect-points/#and--or-group",
    "relUrl": "/doc-clusters/connect-points/#and--or-group"
  },"1077": {
    "doc": "Connect Points",
    "title": "🝖 Adjacency (Node)",
    "content": "Check if adjacent node meet specific conditions . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/connect-points/#adjacency-node",
    "relUrl": "/doc-clusters/connect-points/#adjacency-node"
  },"1078": {
    "doc": "Connect Points",
    "title": "🝖 Compare Nearest (Numeric)",
    "content": "The Numeric Comparison Filter compares the arithmetic value of an attribute against the closest point from another dataset. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/connect-points/#compare-nearest-numeric",
    "relUrl": "/doc-clusters/connect-points/#compare-nearest-numeric"
  },"1079": {
    "doc": "Connect Points",
    "title": "🝖 Compare (Numeric)",
    "content": "The Numeric Comparison Filter compares the arithmetic value of two attributes . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/connect-points/#compare-numeric",
    "relUrl": "/doc-clusters/connect-points/#compare-numeric"
  },"1080": {
    "doc": "Connect Points",
    "title": "🝖 Edge Direction (Node)",
    "content": "Check if adjacent node meet specific conditions . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/connect-points/#edge-direction-node",
    "relUrl": "/doc-clusters/connect-points/#edge-direction-node"
  },"1081": {
    "doc": "Connect Points",
    "title": "🝖 Compare (String)",
    "content": "Compares two string-like attributes against each other. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/connect-points/#compare-string",
    "relUrl": "/doc-clusters/connect-points/#compare-string"
  },"1082": {
    "doc": "Connect Points",
    "title": "🝖 Neighbors Count (Node)",
    "content": "Check a node’ neighbors count . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/connect-points/#neighbors-count-node",
    "relUrl": "/doc-clusters/connect-points/#neighbors-count-node"
  },"1083": {
    "doc": "Connect Points",
    "title": "🝖 Bool",
    "content": "Performs a simple boolean comparison, converting numeric values to true (&gt; 0) or false (&lt;= 0). ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/connect-points/#bool",
    "relUrl": "/doc-clusters/connect-points/#bool"
  },"1084": {
    "doc": "Connect Points",
    "title": "🝖 Within Range",
    "content": "Checks if an attribute value falls within a specified range. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/connect-points/#within-range",
    "relUrl": "/doc-clusters/connect-points/#within-range"
  },"1085": {
    "doc": "Connect Points",
    "title": "🝖 Dot Product",
    "content": "Compares the dot product of two direction vectors against a third value. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/connect-points/#dot-product",
    "relUrl": "/doc-clusters/connect-points/#dot-product"
  },"1086": {
    "doc": "Connect Points",
    "title": "🝖 Modulo Comparison",
    "content": "Compares the modulo of two attributes against a third operand, with configurable comparisons and tolerance. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/connect-points/#modulo-comparison",
    "relUrl": "/doc-clusters/connect-points/#modulo-comparison"
  },"1087": {
    "doc": "Connect Points",
    "title": "🝖 Edge Direction (Edge)",
    "content": "Check if the edge direction is within a given range. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/connect-points/#edge-direction-edge",
    "relUrl": "/doc-clusters/connect-points/#edge-direction-edge"
  },"1088": {
    "doc": "Connect Points",
    "title": "🝖 Endpoints Compare (Numeric)",
    "content": "Compare the value of an attribute on each of the edge endpoint. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/connect-points/#endpoints-compare-numeric",
    "relUrl": "/doc-clusters/connect-points/#endpoints-compare-numeric"
  },"1089": {
    "doc": "Connect Points",
    "title": "🝖 Bounds",
    "content": "Checks if a point is inside or outside the provided bounds, with options for bounds types and an epsilon adjustment. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/connect-points/#bounds",
    "relUrl": "/doc-clusters/connect-points/#bounds"
  },"1090": {
    "doc": "Connect Points",
    "title": "🝖 Distance",
    "content": "Compare distance to closest target against a constant or attribute. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/connect-points/#distance",
    "relUrl": "/doc-clusters/connect-points/#distance"
  },"1091": {
    "doc": "Connect Points",
    "title": "🝖 Endpoints Compare (String)",
    "content": "Compare the value of an attribute on each of the edge endpoint. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/connect-points/#endpoints-compare-string",
    "relUrl": "/doc-clusters/connect-points/#endpoints-compare-string"
  },"1092": {
    "doc": "Connect Points",
    "title": "🝖 Bitmask",
    "content": "Checks specific flags in an int64 bitmask attribute with configurable mask types, comparisons, and an option to invert results. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/connect-points/#bitmask",
    "relUrl": "/doc-clusters/connect-points/#bitmask"
  },"1093": {
    "doc": "Connect Points",
    "title": "🝖 Neighbors Count (Edge)",
    "content": "Check a node’ neighbors count . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/connect-points/#neighbors-count-edge",
    "relUrl": "/doc-clusters/connect-points/#neighbors-count-edge"
  },"1094": {
    "doc": "Connect Points",
    "title": "🝖 Random",
    "content": "Random filter. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/connect-points/#random",
    "relUrl": "/doc-clusters/connect-points/#random"
  },"1095": {
    "doc": "Connect Points",
    "title": "🝖 Mean Value",
    "content": "The Mean Value Filter compares per-point values of an attribute against the mean statistical value of that same attribute. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/connect-points/#mean-value",
    "relUrl": "/doc-clusters/connect-points/#mean-value"
  },"1096": {
    "doc": "Connect Points",
    "title": "🝖 Self Compare (Numeric)",
    "content": "Compares the numeric value at one index against the same attribute at another index. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/connect-points/#self-compare-numeric",
    "relUrl": "/doc-clusters/connect-points/#self-compare-numeric"
  },"1097": {
    "doc": "Connect Points",
    "title": "🝖 Self Compare (String)",
    "content": "Compares the string value at one index against the same attribute at another index. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/connect-points/#self-compare-string",
    "relUrl": "/doc-clusters/connect-points/#self-compare-string"
  },"1098": {
    "doc": "Connect Points",
    "title": "🝖 Spline Inclusion",
    "content": "Checks against how a point is included in a spline. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/connect-points/#spline-inclusion",
    "relUrl": "/doc-clusters/connect-points/#spline-inclusion"
  },"1099": {
    "doc": "Connect Points",
    "title": "🝖 Path Inclusion",
    "content": "Checks against how a point is included in a path. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/connect-points/#path-inclusion",
    "relUrl": "/doc-clusters/connect-points/#path-inclusion"
  },"1100": {
    "doc": "Connect Points",
    "title": "Cluster Output Settings",
    "content": "See Working with Clusters - Cluster Output Settings. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/connect-points/#cluster-output-settings",
    "relUrl": "/doc-clusters/connect-points/#cluster-output-settings"
  },"1101": {
    "doc": "Connect Points",
    "title": "Connect Points",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/connect-points/",
    "relUrl": "/doc-clusters/connect-points/"
  },"1102": {
    "doc": "Transforms",
    "title": "Transforms",
    "content": "Various unusual transform … . Manipulate point positions &amp; transforms . This section contains transform utilities. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/doc-transforms/#transforms",
    "relUrl": "/doc-misc/doc-transforms/#transforms"
  },"1103": {
    "doc": "Transforms",
    "title": "Transform Nodes",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/doc-transforms/#transform-nodes",
    "relUrl": "/doc-misc/doc-transforms/#transform-nodes"
  },"1104": {
    "doc": "Transforms",
    "title": "Flat Projection",
    "content": "TBD . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/doc-transforms/#flat-projection",
    "relUrl": "/doc-misc/doc-transforms/#flat-projection"
  },"1105": {
    "doc": "Transforms",
    "title": "Move Pivot",
    "content": "TBD . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/doc-transforms/#move-pivot",
    "relUrl": "/doc-misc/doc-transforms/#move-pivot"
  },"1106": {
    "doc": "Transforms",
    "title": "Bounds to Points",
    "content": "Not to confuse with Points to Bounds . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/doc-transforms/#bounds-to-points",
    "relUrl": "/doc-misc/doc-transforms/#bounds-to-points"
  },"1107": {
    "doc": "Transforms",
    "title": "Transforms",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/doc-transforms/",
    "relUrl": "/doc-misc/doc-transforms/"
  },"1108": {
    "doc": "Sort Points",
    "title": "Sort Points",
    "content": "Sort points using any number of properties and attributes . The Sort Points node organize points based on rules. Key elements include sorting direction (ascending/descending) and rules defined in a specific order. Each rule compares a selected attribute with a tolerance for equality. Note the warning on comparing values, emphasizing the default use of the first component for multi-component types. InPoints to sort Sorting RulesSorting rules to be processed. They will be sorted by their individual priorities. OutSorted points . Table of content . | Properties . | Rules ordering | Sorting Rule | . | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/sort-points/#sort-points",
    "relUrl": "/doc-misc/sort-points/#sort-points"
  },"1109": {
    "doc": "Sort Points",
    "title": "Properties",
    "content": ". | Property | Description | . | :**Settings**| |   | . | Sort Direction | The output sorting direction – Ascending *(small values first)* or Descending *(high values first)*. | . | **Rules** | A list of ordered individual rules used for sorting the points. | . Rules ordering . Rules are compared in the same order as in the property panel, starting at index 0. The sorting goes through each rules until it finds a valid comparison (non-equal values) – for each point. Sorting Rule . | Property | Description | . | Selector | An attribute or property to compare. See . | . | Tolerance | Equality tolerance used when comparing two values. | . | Invert Rule | Switches from the default &lt; comparison to &gt;. | . When selecting a value to compare, keep in mind that it will be broadcasted to a double type. This means that if you don’t specify which component to use on multi-component type (Vectors, Transforms, etc), it will default to the first one (X). ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/sort-points/#properties",
    "relUrl": "/doc-misc/sort-points/#properties"
  },"1110": {
    "doc": "Sort Points",
    "title": "Sort Points",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/sort-points/",
    "relUrl": "/doc-misc/sort-points/"
  },"1111": {
    "doc": "Partition by Values",
    "title": "Partition by Values",
    "content": "Create complex partitions from multiple criteria . The Partition by Values node offer enhanced control over sub-group creation using multiple criteria, with rules specifying attributes for partitioning and optional pre-processing. InPoints to break into partition Partition RulesPartition rules to be processed OutPartitioned points. If split output is enabled, outputs one point data per partition. Table of content . | Properties . | Partition Rule | Why upscale? | How partition Index works . | Raw partition value | Index partition | . | Key Sum | . | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/partition-by-values/#partition-by-values",
    "relUrl": "/doc-misc/partition-by-values/#partition-by-values"
  },"1112": {
    "doc": "Partition by Values",
    "title": "Properties",
    "content": ". | Property | Description | . | :**Settings**| |   | . | Split Output | Whether to output individual partitions or simply write the unique partition key to an attribute. | . | **Rules** | A list of ordered individual rules used for sorting the points. | . | Key Sum | Outputs the sum of all partition keys to a int64 attribute.**This value is unlikely to be unique, but can come in handy for filtering purposes.**See [Key Sum](#key-sum) | . Partition Rule . | Property | Description | . | Enabled | Whether that rule is enabled or not. *Helpful for trial and error without removing the configuration from the array.* | . | Selector | An attribute or property that will be used for partitioning. See . | . | Filter Size | The size of the partition in relation the attribute or property uses.*Higher values means fewer larger partitions; smaller values means more smaller partitions.* | . | **Input pre-processing**| |   | . | Upscale | A scale factor to apply to the selected attribute value before partitioning.*This is especially useful when working with smaller range of values like Density.*See [Why upscale?](#why-upscale). | . | Offset | An offset value added to the selected attribute value before partitioning.**Offset is added to the Upscaled value.***This allow to shift separation ‘lines’ when using spatial values for partitioning.* | . | **Partition Key Attribute**| |   | . | **Key** Attribute Name | Whether that rule is enabled or not. *Helpful for trial and error without removing the configuration from the array.* | . | Use Partition Index as Key | Whether to use the partition Index as a key *(starting at 0, up to N partitions)* or the default output *(actual under-the-hood value used to distinguish unique buckets)*.See [How partition Index works](#how-partition-index-works). | . | **Partition Tagging***Only if Split Output is enabled*| |   | . | &lt;span class=\"etag\"&gt;Tag Prefix Name&lt;/span&gt; | Tag the data with the partition key, using the format Prefix::PartitionKey or Prefix::PartitionIndex | . | Tag Use Partition Index as Key | Whether to use the partition Index as a key.See [How partition Index works](#how-partition-index-works). | . When selecting a value to compare, keep in mind that it will be broadcasted to a double type. This means that if you don’t specify which component to use on multi-component type (Vectors, Transforms, etc), it will default to the first one (X). ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/partition-by-values/#properties",
    "relUrl": "/doc-misc/partition-by-values/#properties"
  },"1113": {
    "doc": "Partition by Values",
    "title": "Why upscale?",
    "content": "Under the hood, the Partition by Values broadcast and transform the reference values to a int64 used as a unique ID for individual partition. Because of that, any value in the -1..1 range (such as Density, Steepness etc) will be rounded to the nearest integer. Upscaling fixes this problem. For example, without upscaling, [0.1, 0.25, 0.01] will be partitioned as [0, 0, 0]; so a unique 0-id’d partition. On the other end, the same set [0.1, 0.25, 0.01] upscaled by a factor of 100 will be partitioned as [10, 25, 1]; so 3 separated partitions. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/partition-by-values/#why-upscale",
    "relUrl": "/doc-misc/partition-by-values/#why-upscale"
  },"1114": {
    "doc": "Partition by Values",
    "title": "How partition Index works",
    "content": "The for each partition, the corresponding attribute value is basically upscaled, offsetted and rounded down. This operation is repeated for each partition rule, and points are then distributed into buckets which all have the same partition keys. You can either output this “key” value as-is, or use the partition index. That index correspond to the partition order when all keys are sorted by ascending order. Using a single partition rule based on $Position.X, using a filter size of 10. On the left is the detail panel, on the right is a screencap of the value debugger for that rule . Raw partition value . Index partition . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/partition-by-values/#how-partition-index-works",
    "relUrl": "/doc-misc/partition-by-values/#how-partition-index-works"
  },"1115": {
    "doc": "Partition by Values",
    "title": "Key Sum",
    "content": "The Key Sum attribute value will be, well, the sum of all unique partitions keys. It’s useful in very specific scenarios, such as when partitioning based on booleans values, in order to filter partitions. Say you have three separate boolean (or 0-1) attributes, with a partition rule set up for each of these attributes; with Use Partition Index as Key enabled. Each partition will either have a 0 or 1 unique key, with a maximum of 9 partitions created (0 0 0, 1 0 0, 0 1 0 etc.). You will only have 4 different Key Sum: 0, 1, 2 and 3, which you can use as sort-of weak flag system: . | 0 0 0 = 0 | 1 0 0 = 1 | 0 1 0 = 1 | 0 0 1 = 1 | 1 1 0 = 2 | 0 1 1 = 2 | 1 0 1 = 2 | 1 1 1 = 3 | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/partition-by-values/#key-sum",
    "relUrl": "/doc-misc/partition-by-values/#key-sum"
  },"1116": {
    "doc": "Partition by Values",
    "title": "Partition by Values",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/partition-by-values/",
    "relUrl": "/doc-misc/partition-by-values/"
  },"1117": {
    "doc": "∷ Installation",
    "title": "∷ Installation",
    "content": "How to install . The best way is to clone the repo as a submodule; though you can also download pre-packaged versions. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/installation.html#installation",
    "relUrl": "/installation.html#installation"
  },"1118": {
    "doc": "∷ Installation",
    "title": "FAB Plugin",
    "content": "The easiest way to install PCGEx is to get it from FAB. (it’s free!) . PCGEx on FAB . The FAB release matches the FAB- branches on github, due to the submission &amp; validation process they will always be out of date compared to github’ latest. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/installation.html#fab-plugin",
    "relUrl": "/installation.html#fab-plugin"
  },"1119": {
    "doc": "∷ Installation",
    "title": "Build from Source",
    "content": "  Github . If building from source, make sure your project &amp; computer is set-up for C++ dev. See Epic Documentation on the topic. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/installation.html#build-from-source",
    "relUrl": "/installation.html#build-from-source"
  },"1120": {
    "doc": "∷ Installation",
    "title": "Cloning &amp; Build using Git",
    "content": "The best way is to clone the repository to a submodule; that way you can contribute pull requests if you want. &gt; cd YourProject &gt; git submodule add https://github.com/Nebukam/PCGExtendedToolkit Plugins/PCGExtendedToolkit &gt; git add ../.gitmodules &gt; git commit . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/installation.html#cloning--build-using-git",
    "relUrl": "/installation.html#cloning--build-using-git"
  },"1121": {
    "doc": "∷ Installation",
    "title": "Install from the Source’ ZIP",
    "content": "  Download from Github (.zip) . Alternatively you can download the ZIP of this repo and place it in YourProject/Plugins/PCGExtendedToolkit . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/installation.html#install-from-the-source-zip",
    "relUrl": "/installation.html#install-from-the-source-zip"
  },"1122": {
    "doc": "∷ Installation",
    "title": "Finding Nodes",
    "content": "Once the plugin is installed and compiled, nodes are available in any PCG Graph along with vanilla nodes. You can either find them in the explorer on the left, or in the list when right-clicking any empty space in the graph. All PCGEx nodes are prefixed with PCGEx | – which is a bit annoying at first, but quickly comes in handy to ensure nodes are clearly identifiable. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/installation.html#finding-nodes",
    "relUrl": "/installation.html#finding-nodes"
  },"1123": {
    "doc": "∷ Installation",
    "title": "∷ Installation",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/installation.html",
    "relUrl": "/installation.html"
  },"1124": {
    "doc": "Attribute Stats",
    "title": "Attribute Stats",
    "content": "PCGEx | Attribute Stats Compute attribute statistics &amp; unique values . The Attribute Stats node … . InPoints to process for attributes OutProcessed point with an added identifier tag to easily map to stats Attribute StatsPer-attribute stats. One row per input point dataset Unique ValuesPer-attribute, per-dataset unique values. Table of content . | Properties | . WIP . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/misc-attribute-stats.html#attribute-stats",
    "relUrl": "/doc-misc/misc-attribute-stats.html#attribute-stats"
  },"1125": {
    "doc": "Attribute Stats",
    "title": "Properties",
    "content": ". WIP / TBD . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/misc-attribute-stats.html#properties",
    "relUrl": "/doc-misc/misc-attribute-stats.html#properties"
  },"1126": {
    "doc": "Attribute Stats",
    "title": "Attribute Stats",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/misc-attribute-stats.html",
    "relUrl": "/doc-misc/misc-attribute-stats.html"
  },"1127": {
    "doc": "Attribute To Tags",
    "title": "Attribute To Tags",
    "content": "PCGEx | Attribute To Tags Transfer attribute values to collection tags . The Attribute To Tag node … . InCollections to be tagged Tags SourceCollections to be used as sources for tag values OutTagged data . Table of content . | Properties | . WIP . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/misc-attribute-to-tags.html#attribute-to-tags",
    "relUrl": "/doc-misc/misc-attribute-to-tags.html#attribute-to-tags"
  },"1128": {
    "doc": "Attribute To Tags",
    "title": "Properties",
    "content": ". WIP / TBD . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/misc-attribute-to-tags.html#properties",
    "relUrl": "/doc-misc/misc-attribute-to-tags.html#properties"
  },"1129": {
    "doc": "Attribute To Tags",
    "title": "Attribute To Tags",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/misc-attribute-to-tags.html",
    "relUrl": "/doc-misc/misc-attribute-to-tags.html"
  },"1130": {
    "doc": "Bitmask Merge",
    "title": "Bitmask Merge",
    "content": "PCGEx | Bitmask Merge A simple, single bitmask attribute. The Bitmask node … . Table of content . | Properties | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/bitmasks/misc-bitmask-merge.html#bitmask-merge",
    "relUrl": "/doc-misc/bitmasks/misc-bitmask-merge.html#bitmask-merge"
  },"1131": {
    "doc": "Bitmask Merge",
    "title": "Properties",
    "content": ". DOC TDB . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/bitmasks/misc-bitmask-merge.html#properties",
    "relUrl": "/doc-misc/bitmasks/misc-bitmask-merge.html#properties"
  },"1132": {
    "doc": "Bitmask Merge",
    "title": "Bitmask Merge",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/bitmasks/misc-bitmask-merge.html",
    "relUrl": "/doc-misc/bitmasks/misc-bitmask-merge.html"
  },"1133": {
    "doc": "Bitmask",
    "title": "Bitmask",
    "content": "PCGEx | Bitmask A simple, single bitmask attribute. The Bitmask node … . Table of content . | Properties | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/bitmasks/misc-bitmask.html#bitmask",
    "relUrl": "/doc-misc/bitmasks/misc-bitmask.html#bitmask"
  },"1134": {
    "doc": "Bitmask",
    "title": "Properties",
    "content": ". DOC TDB . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/bitmasks/misc-bitmask.html#properties",
    "relUrl": "/doc-misc/bitmasks/misc-bitmask.html#properties"
  },"1135": {
    "doc": "Bitmask",
    "title": "Bitmask",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/bitmasks/misc-bitmask.html",
    "relUrl": "/doc-misc/bitmasks/misc-bitmask.html"
  },"1136": {
    "doc": "Cherry Pick Points",
    "title": "Cherry Pick Points",
    "content": "PCGEx | Cherry Pick Points Cherry pick points using their indices. The Cherry Pick Points node … . Table of content . | Properties | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/misc-cherry-pick.html#cherry-pick-points",
    "relUrl": "/doc-misc/misc-cherry-pick.html#cherry-pick-points"
  },"1137": {
    "doc": "Cherry Pick Points",
    "title": "Properties",
    "content": ". DOC TDB . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/misc-cherry-pick.html#properties",
    "relUrl": "/doc-misc/misc-cherry-pick.html#properties"
  },"1138": {
    "doc": "Cherry Pick Points",
    "title": "Cherry Pick Points",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/misc-cherry-pick.html",
    "relUrl": "/doc-misc/misc-cherry-pick.html"
  },"1139": {
    "doc": "Collocation Count",
    "title": "Collocation Count",
    "content": "PCGEx | Collocation Count Cherry pick points using their indices. The Cherry Pick Points node … . Table of content . | Properties | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/misc-collocation-count.html#collocation-count",
    "relUrl": "/doc-misc/misc-collocation-count.html#collocation-count"
  },"1140": {
    "doc": "Collocation Count",
    "title": "Properties",
    "content": ". DOC TDB . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/misc-collocation-count.html#properties",
    "relUrl": "/doc-misc/misc-collocation-count.html#properties"
  },"1141": {
    "doc": "Collocation Count",
    "title": "Collocation Count",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/misc-collocation-count.html",
    "relUrl": "/doc-misc/misc-collocation-count.html"
  },"1142": {
    "doc": "Destroy Actor",
    "title": "Destroy Actor",
    "content": "PCGEx | Destroy Actor Destroys target actors created by the same PCG Component . The Destroy Actor node… . Table of content . | Properties | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/misc-destroy-actor.html#destroy-actor",
    "relUrl": "/doc-misc/misc-destroy-actor.html#destroy-actor"
  },"1143": {
    "doc": "Destroy Actor",
    "title": "Properties",
    "content": ". TBD . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/misc-destroy-actor.html#properties",
    "relUrl": "/doc-misc/misc-destroy-actor.html#properties"
  },"1144": {
    "doc": "Destroy Actor",
    "title": "Destroy Actor",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/misc-destroy-actor.html",
    "relUrl": "/doc-misc/misc-destroy-actor.html"
  },"1145": {
    "doc": "Discard by Points Count",
    "title": "Discard by Points Count",
    "content": "PCGEx | Discard By Points Count Filter point dataset by their point count. The Discard Points by Count node filters point datasets by minimum and maximum point counts, potentially removing entire datasets if they fall outside the defined range, which may also prevent further nodes from processing any data. Table of content . | Properties | . Note that this node may output no data at all, depending on its settings – in which case subsequent nodes in the graph will be culled. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/misc-discard-points-by-count.html#discard-by-points-count",
    "relUrl": "/doc-misc/misc-discard-points-by-count.html#discard-by-points-count"
  },"1146": {
    "doc": "Discard by Points Count",
    "title": "Properties",
    "content": ". | Property | Description | . | :**Settings**| |   | . | Min Point Count | If enabled, does not output data with a point count smaller than the specified amount. | . | Max Point Count | If enabled, does not output data with a point count larger than the specified amount. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/misc-discard-points-by-count.html#properties",
    "relUrl": "/doc-misc/misc-discard-points-by-count.html#properties"
  },"1147": {
    "doc": "Discard by Points Count",
    "title": "Discard by Points Count",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/misc-discard-points-by-count.html",
    "relUrl": "/doc-misc/misc-discard-points-by-count.html"
  },"1148": {
    "doc": "Discard by Overlap",
    "title": "Discard by Overlap",
    "content": "PCGEx | Discard By Overlap Kindda like self-pruning but for collections. The Discard Points by Overlap node … . Table of content . | Properties | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/misc-discard-points-by-overlap.html#discard-by-overlap",
    "relUrl": "/doc-misc/misc-discard-points-by-overlap.html#discard-by-overlap"
  },"1149": {
    "doc": "Discard by Overlap",
    "title": "Properties",
    "content": ". DOC TDB . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/misc-discard-points-by-overlap.html#properties",
    "relUrl": "/doc-misc/misc-discard-points-by-overlap.html#properties"
  },"1150": {
    "doc": "Discard by Overlap",
    "title": "Discard by Overlap",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/misc-discard-points-by-overlap.html",
    "relUrl": "/doc-misc/misc-discard-points-by-overlap.html"
  },"1151": {
    "doc": "Draw Attributes",
    "title": "Draw Attributes",
    "content": "PCGEx | Draw Attributes Draw lines and points from attributes . This node is used in 100% of the screenshots of this documentation. InPoints to read &amp; draw attributes from OutUnaltered inputs . Table of content . | Individual Debug Settings | Expressions . | Direction | Connection (Position) | Connection (Point Index) | Point | Boolean | . | . Each Draw Attribute node can display any number of things by fetching values from whatever point data is plugged into the input pin; in the order in which they are set up. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/debug/misc-draw-attributes.html#draw-attributes",
    "relUrl": "/doc-misc/debug/misc-draw-attributes.html#draw-attributes"
  },"1152": {
    "doc": "Draw Attributes",
    "title": "Individual Debug Settings",
    "content": "| Property | Description | . | :**Settings**| |   | . | Enabled | Whether these settings are enabled or not. Allows to quickly turn a debug display on/off without deleting the entire entry. | . | Selector | The attribute or property to draw. | . | Expressed As | The type of shape/form that will be used to express the selected attribute or property. | . | **Expression Settings**| |   | . | – | Depending on the selected expression, different settings are available. See[Expressions](#expressions). | . | **Thickness &amp; Size**| |   | . | Thickness | The thickness of the debug line, when drawing a line. | . | Size | How the Size is interpreted depends on the chosen expression. See[Expressions](#expressions). | . | Local Size Attribute | When enabled, allows you to use a local attribute as a Size.*If enabled, the fixed Size attribute becomes a multiplier to the local attribute.* | . | **Color**| |   | . | Color | The debug color. | . | Local Color Attribute | When enabled, allows you to use a local attribute instead of the default Color property. | . | Color Is Linear | Specifies whether the Local Color attribute is linear (0-1 based) or hex (0-255).*If disabled, the attribute or property value will be divided by 255 internally.* | . | Depth Priority | Debug draw depth priority. -1 : draw on top of everything.0 : Regular depth sorting.1 : Draw behind everything. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/debug/misc-draw-attributes.html#individual-debug-settings",
    "relUrl": "/doc-misc/debug/misc-draw-attributes.html#individual-debug-settings"
  },"1153": {
    "doc": "Draw Attributes",
    "title": "Expressions",
    "content": "As of writing time, there are a few expression available: . | Direction | Connection (Position) | Connection (Point index) | Point | Boolean | Label | . Direction . | **Extra Properties**| |   | . | Normalize Before Sizing | If enabled, the incoming vector will be normalized before it is resized and drawn. | . Connection (Position) . Draws a line between the current point’ location and the selected attribute or property as a world space position. | **Extra Properties**| |   | . | As an offset | If enabled, the incoming vector will be used as an offset from the current point location. | . Connection (Point Index) . Draws a line between the current point’ location and another point within the same group as a world space position. The selected attribute or property is used as the index for the point to use as target position. | **Extra Properties**| |   | . | As an offset | If enabled, the incoming vector will be used as an offset from the current point location. | . Note: this is a legacy tool for drawing edges, if using clusters, use instead. Point . | **Extra Properties**| |   | . | As an offset | If enabled, the incoming vector will be used as an offset from the current point location. | . Boolean . Boolean is similar to Point, except it is drawn at the point’ location in space. The debug color is selected based on the input value: If the value is &lt;= 0 the base color will be picked; otherwise Secondary Color is used. | **Extra Properties**| |   | . | Secondary Color | The color to be used for values &gt; 0. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/debug/misc-draw-attributes.html#expressions",
    "relUrl": "/doc-misc/debug/misc-draw-attributes.html#expressions"
  },"1154": {
    "doc": "Draw Attributes",
    "title": "Draw Attributes",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/debug/misc-draw-attributes.html",
    "relUrl": "/doc-misc/debug/misc-draw-attributes.html"
  },"1155": {
    "doc": "Find point on Bounds (Any)",
    "title": "Find point on Bounds (Any)",
    "content": "PCGEx | Find point on Bounds Find a point closest to a bound-relative position. The Find point on Bounds node … . Table of content . | Properties | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/misc-find-points-on-bounds.html#find-point-on-bounds-any",
    "relUrl": "/doc-misc/misc-find-points-on-bounds.html#find-point-on-bounds-any"
  },"1156": {
    "doc": "Find point on Bounds (Any)",
    "title": "Properties",
    "content": ". WIP / TBD . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/misc-find-points-on-bounds.html#properties",
    "relUrl": "/doc-misc/misc-find-points-on-bounds.html#properties"
  },"1157": {
    "doc": "Find point on Bounds (Any)",
    "title": "Find point on Bounds (Any)",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/misc-find-points-on-bounds.html",
    "relUrl": "/doc-misc/misc-find-points-on-bounds.html"
  },"1158": {
    "doc": "Flush Debug",
    "title": "Flush Debug",
    "content": "PCGEx | Flush Debug Flushes persistent debug lines . Flush persistent debug lines, to be used at the start of a PCG graph. See Debug . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/debug/misc-flush-debug.html#flush-debug",
    "relUrl": "/doc-misc/debug/misc-flush-debug.html#flush-debug"
  },"1159": {
    "doc": "Flush Debug",
    "title": "Flush Debug",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/debug/misc-flush-debug.html",
    "relUrl": "/doc-misc/debug/misc-flush-debug.html"
  },"1160": {
    "doc": "Fuse Points",
    "title": "Fuse Points",
    "content": "PCGEx | Fuse Points Proximity-based point pruning and blending. The Fuse Points reduces the number of point within a group by merging points that are within a set radius of each others; and allows you to control how the resulting properties and attributes are blended. Table of content . | Properties | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/misc-fuse-points.html#fuse-points",
    "relUrl": "/doc-misc/misc-fuse-points.html#fuse-points"
  },"1161": {
    "doc": "Fuse Points",
    "title": "Properties",
    "content": ". | Property | Description | . | :**Settings**| |   | . | Component Wise Radius | Whether to use a component-wise radius or a spherical one.When component-wise is enabled, distance is checked individually on X, Y and Z axis in world-space. | . | Radius | Radius within which multiple points are to be fused into a single one. | . | Preserve Order | If enabled, fused points will be sorted to maintain their original order. | . | **Blending Settings** | Control how removed points’ properties and attributes are blended into the point they are fused to.See Blending | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/misc-fuse-points.html#properties",
    "relUrl": "/doc-misc/misc-fuse-points.html#properties"
  },"1162": {
    "doc": "Fuse Points",
    "title": "Fuse Points",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/misc-fuse-points.html",
    "relUrl": "/doc-misc/misc-fuse-points.html"
  },"1163": {
    "doc": "GUID",
    "title": "GUID",
    "content": "PCGEx | WriteGUID Get/Set GUID in a wide range of formats . The GUID node pair can generate GUID for points based on multiple combinable flags . Table of content . | Properties | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/misc-guid.html#guid",
    "relUrl": "/doc-misc/misc-guid.html#guid"
  },"1164": {
    "doc": "GUID",
    "title": "Properties",
    "content": ". TBD/WIP . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/misc-guid.html#properties",
    "relUrl": "/doc-misc/misc-guid.html#properties"
  },"1165": {
    "doc": "GUID",
    "title": "GUID",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/misc-guid.html",
    "relUrl": "/doc-misc/misc-guid.html"
  },"1166": {
    "doc": "Iterations",
    "title": "Iterations",
    "content": "PCGEx | Iterations Artificially drive loop subgraph iteration count . The Iterations node outputs a number of collections that can be used to drive a Loop subgraph’ iterations count, without the need for more shenaningans. IterationsA single lightweight, dummy data object . Table of content . | Properties | . Iterations is the Loop Count parameter that doesn’t exist. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/misc-iterations.html#iterations",
    "relUrl": "/doc-misc/misc-iterations.html#iterations"
  },"1167": {
    "doc": "Iterations",
    "title": "Properties",
    "content": ". | Property | Description | . | :**Settings**| |   | . | Type | Type of data collection generated.*This is only useful to avoid the need for an additional filter node if you already set up your loop pins a certain way.* | . | Iterations | Number of individual entries to output. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/misc-iterations.html#properties",
    "relUrl": "/doc-misc/misc-iterations.html#properties"
  },"1168": {
    "doc": "Iterations",
    "title": "Iterations",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/misc-iterations.html",
    "relUrl": "/doc-misc/misc-iterations.html"
  },"1169": {
    "doc": "2D Lloyd Relaxation",
    "title": "2D Lloyd Relaxation",
    "content": "PCGEx | Lloyd Relax 2D Applies the Lloyd Relaxation algorithm. The 2D Lloyd Relaxation node applies any number of Lloyd relaxation passes, in 2D space. Table of content . | Properties | . See Lloyd Relaxation on Wikipedia. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/lloyd-relax/misc-lloyd-relax-2d.html#d-lloyd-relaxation",
    "relUrl": "/doc-misc/lloyd-relax/misc-lloyd-relax-2d.html#d-lloyd-relaxation"
  },"1170": {
    "doc": "2D Lloyd Relaxation",
    "title": "Properties",
    "content": ". | Property | Description | . | :**Settings**| |   | . | Output Normalized Index | If enabled, the index will be written as a double *(instead of int32)*, as a normalized value in the range [0..1]. | . | Output Attribute Name | Name of the attribute to write the point index to. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/lloyd-relax/misc-lloyd-relax-2d.html#properties",
    "relUrl": "/doc-misc/lloyd-relax/misc-lloyd-relax-2d.html#properties"
  },"1171": {
    "doc": "2D Lloyd Relaxation",
    "title": "2D Lloyd Relaxation",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/lloyd-relax/misc-lloyd-relax-2d.html",
    "relUrl": "/doc-misc/lloyd-relax/misc-lloyd-relax-2d.html"
  },"1172": {
    "doc": "3D Lloyd Relaxation",
    "title": "3D Lloyd Relaxation",
    "content": "PCGEx | Lloyd Relax 3D . Applies any number of Lloyd relaxation passes, in 3D space. Table of content . | Properties | . See Lloyd Relaxation on Wikipedia. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/lloyd-relax/misc-lloyd-relax-3d.html#d-lloyd-relaxation",
    "relUrl": "/doc-misc/lloyd-relax/misc-lloyd-relax-3d.html#d-lloyd-relaxation"
  },"1173": {
    "doc": "3D Lloyd Relaxation",
    "title": "Properties",
    "content": ". | Property | Description | . | :**Settings**| |   | . | Output Normalized Index | If enabled, the index will be written as a double *(instead of int32)*, as a normalized value in the range [0..1]. | . | Output Attribute Name | Name of the attribute to write the point index to. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/lloyd-relax/misc-lloyd-relax-3d.html#properties",
    "relUrl": "/doc-misc/lloyd-relax/misc-lloyd-relax-3d.html#properties"
  },"1174": {
    "doc": "3D Lloyd Relaxation",
    "title": "3D Lloyd Relaxation",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/lloyd-relax/misc-lloyd-relax-3d.html",
    "relUrl": "/doc-misc/lloyd-relax/misc-lloyd-relax-3d.html"
  },"1175": {
    "doc": "Merge Points by Tags",
    "title": "Merge Points by Tags",
    "content": "PCGEx | Merge Points by Tag Merge points based on shared tags . The Merge Points by Tags node … . Table of content . | Properties | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/misc-merge-points-by-tags.html#merge-points-by-tags",
    "relUrl": "/doc-misc/misc-merge-points-by-tags.html#merge-points-by-tags"
  },"1176": {
    "doc": "Merge Points by Tags",
    "title": "Properties",
    "content": ". DOC TDB . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/misc-merge-points-by-tags.html#properties",
    "relUrl": "/doc-misc/misc-merge-points-by-tags.html#properties"
  },"1177": {
    "doc": "Merge Points by Tags",
    "title": "Merge Points by Tags",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/misc-merge-points-by-tags.html",
    "relUrl": "/doc-misc/misc-merge-points-by-tags.html"
  },"1178": {
    "doc": "Meta Cleanup",
    "title": "Meta Cleanup",
    "content": "PCGEx | Meta Cleanup Keep/Remove tags &amp; attributes using string queries . The Meta Filter node … . Table of content . | Properties | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/misc-meta-cleanup.html#meta-cleanup",
    "relUrl": "/doc-misc/misc-meta-cleanup.html#meta-cleanup"
  },"1179": {
    "doc": "Meta Cleanup",
    "title": "Properties",
    "content": ". DOC TDB . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/misc-meta-cleanup.html#properties",
    "relUrl": "/doc-misc/misc-meta-cleanup.html#properties"
  },"1180": {
    "doc": "Meta Cleanup",
    "title": "Meta Cleanup",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/misc-meta-cleanup.html",
    "relUrl": "/doc-misc/misc-meta-cleanup.html"
  },"1181": {
    "doc": "Meta Filter",
    "title": "Meta Filter",
    "content": "PCGEx | Meta Cleanup Filter point collections based on tags &amp; attributes using string queries . The Meta Filter node … . Table of content . | Properties | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/misc-meta-filter.html#meta-filter",
    "relUrl": "/doc-misc/misc-meta-filter.html#meta-filter"
  },"1182": {
    "doc": "Meta Filter",
    "title": "Properties",
    "content": ". DOC TDB . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/misc-meta-filter.html#properties",
    "relUrl": "/doc-misc/misc-meta-filter.html#properties"
  },"1183": {
    "doc": "Meta Filter",
    "title": "Meta Filter",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/misc-meta-filter.html",
    "relUrl": "/doc-misc/misc-meta-filter.html"
  },"1184": {
    "doc": "Points to Bounds",
    "title": "Points to Bounds",
    "content": "PCGEx | Points to Bounds Convert point clouds to a single bounding point . The Points to Bounds node … . Table of content . | Properties | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/misc-points-to-bounds.html#points-to-bounds",
    "relUrl": "/doc-misc/misc-points-to-bounds.html#points-to-bounds"
  },"1185": {
    "doc": "Points to Bounds",
    "title": "Properties",
    "content": ". Points to bound has no dedicated properties and is pretty straighforward to use. It embeds a data blender module, which you can read more about in the specific Blending section. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/misc-points-to-bounds.html#properties",
    "relUrl": "/doc-misc/misc-points-to-bounds.html#properties"
  },"1186": {
    "doc": "Points to Bounds",
    "title": "Points to Bounds",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/misc-points-to-bounds.html",
    "relUrl": "/doc-misc/misc-points-to-bounds.html"
  },"1187": {
    "doc": "Refresh Seed",
    "title": "Refresh Seed",
    "content": "PCGEx | Refresh Seed Refreshes point seeds based on their position. The Refresh Seed node … . Table of content . | Properties | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/misc-refresh-seed.html#refresh-seed",
    "relUrl": "/doc-misc/misc-refresh-seed.html#refresh-seed"
  },"1188": {
    "doc": "Refresh Seed",
    "title": "Properties",
    "content": ". | Property | Description | . | :**Settings**| |   | . | Base | A value added to the seed calculation to offset the output value. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/misc-refresh-seed.html#properties",
    "relUrl": "/doc-misc/misc-refresh-seed.html#properties"
  },"1189": {
    "doc": "Refresh Seed",
    "title": "Refresh Seed",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/misc-refresh-seed.html",
    "relUrl": "/doc-misc/misc-refresh-seed.html"
  },"1190": {
    "doc": "Reverse Points Order",
    "title": "Reverse Points Order",
    "content": "PCGEx | Reverse Points Order Reverse current points order. Way faster than reverse index sort. The Reverse Points Order node … . Table of content . | Properties | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/misc-reverse-point-order.html#reverse-points-order",
    "relUrl": "/doc-misc/misc-reverse-point-order.html#reverse-points-order"
  },"1191": {
    "doc": "Reverse Points Order",
    "title": "Properties",
    "content": ". DOC TDB . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/misc-reverse-point-order.html#properties",
    "relUrl": "/doc-misc/misc-reverse-point-order.html#properties"
  },"1192": {
    "doc": "Reverse Points Order",
    "title": "Reverse Points Order",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/misc-reverse-point-order.html",
    "relUrl": "/doc-misc/misc-reverse-point-order.html"
  },"1193": {
    "doc": "Write Index",
    "title": "Write Index",
    "content": "PCGEx | Write Index Write current point index to an attribute . The Write Index node write point index as an attribute, either discrete or normalized. Don’t laugh, this is actually much more useful that you’d think. Table of content . | Properties | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/misc-write-index.html#write-index",
    "relUrl": "/doc-misc/misc-write-index.html#write-index"
  },"1194": {
    "doc": "Write Index",
    "title": "Properties",
    "content": ". | Property | Description | . | :**Settings**| |   | . | Output Normalized Index | If enabled, the index will be written as a double *(instead of int32)*, as a normalized value in the range [0..1]. | . | Output Attribute Name | Name of the attribute to write the point index to. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/misc-write-index.html#properties",
    "relUrl": "/doc-misc/misc-write-index.html#properties"
  },"1195": {
    "doc": "Write Index",
    "title": "Write Index",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/misc-write-index.html",
    "relUrl": "/doc-misc/misc-write-index.html"
  },"1196": {
    "doc": "Move Pivot",
    "title": "Move Pivot",
    "content": "PCGEx | Move Pivot TBD . The Move Pivot node… . InPoints which pivot will be modified relative to their bounds OutPoints with moved pivot . Table of content . | Properties | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/doc-transforms/move-pivot.html#move-pivot",
    "relUrl": "/doc-misc/doc-transforms/move-pivot.html#move-pivot"
  },"1197": {
    "doc": "Move Pivot",
    "title": "Properties",
    "content": ". WIP . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/doc-transforms/move-pivot.html#properties",
    "relUrl": "/doc-misc/doc-transforms/move-pivot.html#properties"
  },"1198": {
    "doc": "Move Pivot",
    "title": "Move Pivot",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/doc-transforms/move-pivot.html",
    "relUrl": "/doc-misc/doc-transforms/move-pivot.html"
  },"1199": {
    "doc": "🝢 Neighbors Attributes",
    "title": "🝢 Neighbors Attributes",
    "content": "A specific rule for one or multiple neighbor attributes sampling. TBD . SamplerA single sampler definition . Table of content . | Properties | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-sampling/sampling-neighbors/neighbor-sample-attributes.html#neighbors-attributes",
    "relUrl": "/doc-sampling/sampling-neighbors/neighbor-sample-attributes.html#neighbors-attributes"
  },"1200": {
    "doc": "🝢 Neighbors Attributes",
    "title": "Properties",
    "content": ". DOC TDB . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-sampling/sampling-neighbors/neighbor-sample-attributes.html#properties",
    "relUrl": "/doc-sampling/sampling-neighbors/neighbor-sample-attributes.html#properties"
  },"1201": {
    "doc": "🝢 Neighbors Attributes",
    "title": "🝢 Neighbors Attributes",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-sampling/sampling-neighbors/neighbor-sample-attributes.html",
    "relUrl": "/doc-sampling/sampling-neighbors/neighbor-sample-attributes.html"
  },"1202": {
    "doc": "🝢 Neighbors Properties",
    "title": "🝢 Neighbors Properties",
    "content": "A specific rule for one or multiple neighbor properties sampling . TBD . SamplerA single sampler definition . Table of content . | Properties | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-sampling/sampling-neighbors/neighbor-sample-propertiers.html#neighbors-properties",
    "relUrl": "/doc-sampling/sampling-neighbors/neighbor-sample-propertiers.html#neighbors-properties"
  },"1203": {
    "doc": "🝢 Neighbors Properties",
    "title": "Properties",
    "content": ". DOC TDB . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-sampling/sampling-neighbors/neighbor-sample-propertiers.html#properties",
    "relUrl": "/doc-sampling/sampling-neighbors/neighbor-sample-propertiers.html#properties"
  },"1204": {
    "doc": "🝢 Neighbors Properties",
    "title": "🝢 Neighbors Properties",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-sampling/sampling-neighbors/neighbor-sample-propertiers.html",
    "relUrl": "/doc-sampling/sampling-neighbors/neighbor-sample-propertiers.html"
  },"1205": {
    "doc": "⋋ Average",
    "title": "⋋ Average",
    "content": "Average between previous and next . Table of content . | Properties | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-orient/orient-average.html#average",
    "relUrl": "/doc-paths/paths-orient/orient-average.html#average"
  },"1206": {
    "doc": "⋋ Average",
    "title": "Properties",
    "content": ". | Property | Description | . | :**Settings**| |   | . | Orient Axis | The transform’ axis that will be *oriented*. | . | Up Axis | The Up axis used for the orientation maths. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-orient/orient-average.html#properties",
    "relUrl": "/doc-paths/paths-orient/orient-average.html#properties"
  },"1207": {
    "doc": "⋋ Average",
    "title": "⋋ Average",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-orient/orient-average.html",
    "relUrl": "/doc-paths/paths-orient/orient-average.html"
  },"1208": {
    "doc": "⋋ Look At",
    "title": "⋋ Look At",
    "content": "Look at next . Table of content . | Properties . | LookAt Target | . | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-orient/orient-lookat.html#look-at",
    "relUrl": "/doc-paths/paths-orient/orient-lookat.html#look-at"
  },"1209": {
    "doc": "⋋ Look At",
    "title": "Properties",
    "content": ". | Property | Description | . | :**Settings**| |   | . | LookAt | Select what the point should look at.*See [LookAt Target](#lookat-target).* | . | Look at Selector | The attribute to fetch as a LookAt target if LookAt == Attribute. | . | Attribute as Offset | If enabled, the attribute specified above will be used as a translation offset from the point location, as opposed to a world space position. | . | **Orientation**| |   | . | Orient Axis | The transform’ axis that will be *oriented*. | . | Up Axis | The Up axis used for the orientation maths. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-orient/orient-lookat.html#properties",
    "relUrl": "/doc-paths/paths-orient/orient-lookat.html#properties"
  },"1210": {
    "doc": "⋋ Look At",
    "title": "LookAt Target",
    "content": "There are three possibilities: . | Look At Next : orientation will be computed so the point is oriented toward its next neighbor. | Look At Previous : orientation will be computed so the point is oriented toward its previous neighbor. | Attribute : orientation will be computed so the point looks at the world space position stored in a local attribute. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-orient/orient-lookat.html#lookat-target",
    "relUrl": "/doc-paths/paths-orient/orient-lookat.html#lookat-target"
  },"1211": {
    "doc": "⋋ Look At",
    "title": "⋋ Look At",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-orient/orient-lookat.html",
    "relUrl": "/doc-paths/paths-orient/orient-lookat.html"
  },"1212": {
    "doc": "⋋ Weighted",
    "title": "⋋ Weighted",
    "content": "Distance-weighted interpolation . Table of content . | Properties | . Weighted orientation balances the orientation of the point between the previous and next point based on perpendicular distance. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-orient/orient-weighted.html#weighted",
    "relUrl": "/doc-paths/paths-orient/orient-weighted.html#weighted"
  },"1213": {
    "doc": "⋋ Weighted",
    "title": "Properties",
    "content": ". | Property | Description | . | :**Settings**| |   | . | Inverse Weight | Reverse the orientation weight.*Weight to next will be used for previous, and vice-versa.* | . | **Orienting**| |   | . | Orient Axis | The transform’ axis that will be *oriented*. | . | Up Axis | The Up axis used for the orientation maths. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-orient/orient-weighted.html#properties",
    "relUrl": "/doc-paths/paths-orient/orient-weighted.html#properties"
  },"1214": {
    "doc": "⋋ Weighted",
    "title": "⋋ Weighted",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-orient/orient-weighted.html",
    "relUrl": "/doc-paths/paths-orient/orient-weighted.html"
  },"1215": {
    "doc": "🝗 Partition Rule",
    "title": "🝗 Partition Rule",
    "content": "PCGEx | Rule : Partition An individual partition rule . TBD . Partition RuleA single partition rule . Table of content . | Properties | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/partition-by-values/partition-rule.html#partition-rule",
    "relUrl": "/doc-misc/partition-by-values/partition-rule.html#partition-rule"
  },"1216": {
    "doc": "🝗 Partition Rule",
    "title": "Properties",
    "content": ". DOC TDB . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/partition-by-values/partition-rule.html#properties",
    "relUrl": "/doc-misc/partition-by-values/partition-rule.html#properties"
  },"1217": {
    "doc": "🝗 Partition Rule",
    "title": "🝗 Partition Rule",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/partition-by-values/partition-rule.html",
    "relUrl": "/doc-misc/partition-by-values/partition-rule.html"
  },"1218": {
    "doc": "Plot Edges Pathfinding",
    "title": "Plot Edges Pathfinding",
    "content": "PCGEx | Pathfinding : Plot Edges Find a path that goes through multiple chained points. The Plot Edges Pathfinding mode … . VtxEndpoints of the input Edges EdgesEdges associated with the input Vtxs PlotsPlot points in the form of points collections. HeuristicsHeuristics nodes that will be used by the pathfinding search algorithm PathsA single path per plot collection input . Related . | Pathfinding | . Table of content . | Properties . | Available ⊚ Search modules | Available 🝰 Heuristics modules | . | . The Plot Edges Pathfinding node takes multiple input dataset as “plot” and finds a path that connects each point in a given plot, in order. It’s very straightforward to use, and should generally be preferred over its Edges Pathfinding alternative. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/pathfinding-edges-plot.html#plot-edges-pathfinding",
    "relUrl": "/doc-pathfinding/pathfinding-edges-plot.html#plot-edges-pathfinding"
  },"1219": {
    "doc": "Plot Edges Pathfinding",
    "title": "Properties",
    "content": ". | Property | Description | . | **Plot inclusiong**| |   | . | Add Seed to Path | Prepends the *seed position* at the beginning of the output path.*This will create a point with the position of the seed.* | . | Add Goal to Path | Appends the *goal position* at the end of the output path.*This will create a point with the position of the goal.* | . | Add Plot Points to Path | Include plot points positions as part of the output path.*Does not includes seed or goal points.* | . | Closed Loop | Whether the plots should generate closed paths.If enabled, the last plot point will create a path that wraps with the first plot point. | . | Path Composition | Whether the output paths are made from Vtx or Edges points. | . | **Picking**| |   | . | Seed Picking | Lets you control how the seed node (Vtx) will be picked based on the provided seed position. | . | Goal Picking | Lets you control how the goal node (Vtx) will be picked based on the provided goal position. | . | **Search Algorithm** | Let you pick which ⊚ Search algorithm to use to resolve pathfinding. | . Seed/Goal picking is resolved for each pair of point in a given plot. | **Misc**| |   | . | Use Octree Search | Whether or not to search for closest node using an octree. Depending on your dataset, enabling this may be either much faster, or much slower.*I highly recommend enabling it if you resolve a lot of paths at the same time, but as a rule of thumb just profile it with/without and pick what works best in your setup.* | . | Omit Complete Path on Failed Plot | If enabled, a single seed/goal pair fail will invalidate the full plotted path. *If disabled, failed segments will ungracefully connect plot points with a straight line.* | . | : **Tagging** | |   | . | &lt;span class=\"etag\"&gt;Is Closed Loop Tag&lt;/span&gt; | If enabled, will tag closed loop paths data with the specified tag. | . | &lt;span class=\"etag\"&gt;Is Open Path Tag&lt;/span&gt; | If enabled, will tag open paths data with the specified tag. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/pathfinding-edges-plot.html#properties",
    "relUrl": "/doc-pathfinding/pathfinding-edges-plot.html#properties"
  },"1220": {
    "doc": "Plot Edges Pathfinding",
    "title": "Available ⊚ Search modules",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/pathfinding-edges-plot.html#available--search-modules",
    "relUrl": "/doc-pathfinding/pathfinding-edges-plot.html#available--search-modules"
  },"1221": {
    "doc": "Plot Edges Pathfinding",
    "title": "Dijkstra",
    "content": "Dijkstra’s Algorithm . Dijkstra’s Algorithm implementation. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/pathfinding-edges-plot.html#dijkstra",
    "relUrl": "/doc-pathfinding/pathfinding-edges-plot.html#dijkstra"
  },"1222": {
    "doc": "Plot Edges Pathfinding",
    "title": "A* Star",
    "content": "A* Algorithm . A* Algorithm implementation. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/pathfinding-edges-plot.html#a-star",
    "relUrl": "/doc-pathfinding/pathfinding-edges-plot.html#a-star"
  },"1223": {
    "doc": "Plot Edges Pathfinding",
    "title": "Available 🝰 Heuristics modules",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/pathfinding-edges-plot.html#available--heuristics-modules",
    "relUrl": "/doc-pathfinding/pathfinding-edges-plot.html#available--heuristics-modules"
  },"1224": {
    "doc": "Plot Edges Pathfinding",
    "title": "🝰 Heuristic Attribute",
    "content": "Attribute-driven heuristics . The Attribute heuristics uses custom point or edge value as raw score. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/pathfinding-edges-plot.html#heuristic-attribute",
    "relUrl": "/doc-pathfinding/pathfinding-edges-plot.html#heuristic-attribute"
  },"1225": {
    "doc": "Plot Edges Pathfinding",
    "title": "🝰 Shortest Distance",
    "content": "Favor shortest distance. The Shortest Distance heuristic node … . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/pathfinding-edges-plot.html#shortest-distance",
    "relUrl": "/doc-pathfinding/pathfinding-edges-plot.html#shortest-distance"
  },"1226": {
    "doc": "Plot Edges Pathfinding",
    "title": "🝰 Feedback",
    "content": "Favor uncharted points &amp; edges. The Feedback heuristic add/remove score value to points &amp; edges that are “in use” by other previously computed paths. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/pathfinding-edges-plot.html#feedback",
    "relUrl": "/doc-pathfinding/pathfinding-edges-plot.html#feedback"
  },"1227": {
    "doc": "Plot Edges Pathfinding",
    "title": "🝰 Inertia",
    "content": "Favor active direction preservation. The Inertia heuristic uses the ongoing traversal data to try and maintain a consistent direction, as if the algorithm had “inertia”. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/pathfinding-edges-plot.html#inertia",
    "relUrl": "/doc-pathfinding/pathfinding-edges-plot.html#inertia"
  },"1228": {
    "doc": "Plot Edges Pathfinding",
    "title": "🝰 Steepness",
    "content": "Favor flat trajectories. The Steepness heuristic uses the edge angle against an up vector to compute a dot product that is used to determine whether the edge should be considered flat or not. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/pathfinding-edges-plot.html#steepness",
    "relUrl": "/doc-pathfinding/pathfinding-edges-plot.html#steepness"
  },"1229": {
    "doc": "Plot Edges Pathfinding",
    "title": "🝰 Azimuth",
    "content": "Favor edges directed toward the goal. The Azimuth heuristic attempt to force the path to always aim toward the goal. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/pathfinding-edges-plot.html#azimuth",
    "relUrl": "/doc-pathfinding/pathfinding-edges-plot.html#azimuth"
  },"1230": {
    "doc": "Plot Edges Pathfinding",
    "title": "🝰 Least Nodes",
    "content": "Favor traversing the least amount of nodes. The Least Nodes heuristic favor node count traversal over anything else. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/pathfinding-edges-plot.html#least-nodes",
    "relUrl": "/doc-pathfinding/pathfinding-edges-plot.html#least-nodes"
  },"1231": {
    "doc": "Plot Edges Pathfinding",
    "title": "Plot Edges Pathfinding",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/pathfinding-edges-plot.html",
    "relUrl": "/doc-pathfinding/pathfinding-edges-plot.html"
  },"1232": {
    "doc": "Edges Pathfinding",
    "title": "Edges Pathfinding",
    "content": "PCGEx | Pathfinding : Edges Find paths connecting seeds to goals. The Edges Pathfinding mode … . VtxEndpoints of the input Edges EdgesEdges associated with the input Vtxs SeedsSeed points GoalsGoal points Heuristics🝰 Heuristics nodes that will be used by the pathfinding search algorithm PathsA point collection per path found . Related . | Pathfinding | . Table of content . | Properties | Modules . | Available 🝓 Goal Pickers modules | Available 🝰 Heuristics modules | Available ⊚ Search modules | . | . The Edges Pathfinding node connects goal points to seed points. Contrary to the Plot Edges Pathfinding, this node uses an external module (Goal Picker) to match seeds and goal, and cannot generate closed paths; it only supports A to B (many of them as well). ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/pathfinding-edges.html#edges-pathfinding",
    "relUrl": "/doc-pathfinding/pathfinding-edges.html#edges-pathfinding"
  },"1233": {
    "doc": "Edges Pathfinding",
    "title": "Properties",
    "content": ". | Property | Description | . | **Goal Picker** | The module that will be used to interpret and manipulate goals and seeds inputs.*Each module has individual settings and documentation – See [Available Goal Pickers](#available–goal-pickers-modules).* | . | Property | Description | . | : **Plot inclusiong**| |   | . | Add Seed to Path | Prepends the *seed position* at the beginning of the output path.*This will create a point with the position of the seed.* | . | Add Goal to Path | Appends the *goal position* at the end of the output path.*This will create a point with the position of the goal.* | . | Path Composition | Whether the output paths are made from Vtx or Edges points. | . | : **Picking**| |   | . | Seed Picking | Lets you control how the seed node (Vtx) will be picked based on the provided seed position. | . | Goal Picking | Lets you control how the goal node (Vtx) will be picked based on the provided goal position. | . | **Search Algorithm** | Let you pick which ⊚ Search algorithm to use to resolve pathfinding. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/pathfinding-edges.html#properties",
    "relUrl": "/doc-pathfinding/pathfinding-edges.html#properties"
  },"1234": {
    "doc": "Edges Pathfinding",
    "title": "Modules",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/pathfinding-edges.html#modules",
    "relUrl": "/doc-pathfinding/pathfinding-edges.html#modules"
  },"1235": {
    "doc": "Edges Pathfinding",
    "title": "Available 🝓 Goal Pickers modules",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/pathfinding-edges.html#available--goal-pickers-modules",
    "relUrl": "/doc-pathfinding/pathfinding-edges.html#available--goal-pickers-modules"
  },"1236": {
    "doc": "Edges Pathfinding",
    "title": "🝓 Default",
    "content": "Match seeds to goals at the same index. The Default picker … . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/pathfinding-edges.html#default",
    "relUrl": "/doc-pathfinding/pathfinding-edges.html#default"
  },"1237": {
    "doc": "Edges Pathfinding",
    "title": "🝓 Random",
    "content": "Match seeds to goals at a random index. The Random picker … . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/pathfinding-edges.html#random",
    "relUrl": "/doc-pathfinding/pathfinding-edges.html#random"
  },"1238": {
    "doc": "Edges Pathfinding",
    "title": "🝓 Goal from Attribute",
    "content": "Match seed with goals picked at an attribute-specified index. The Goal from Attribute picker … . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/pathfinding-edges.html#goal-from-attribute",
    "relUrl": "/doc-pathfinding/pathfinding-edges.html#goal-from-attribute"
  },"1239": {
    "doc": "Edges Pathfinding",
    "title": "Available 🝰 Heuristics modules",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/pathfinding-edges.html#available--heuristics-modules",
    "relUrl": "/doc-pathfinding/pathfinding-edges.html#available--heuristics-modules"
  },"1240": {
    "doc": "Edges Pathfinding",
    "title": "🝰 Heuristic Attribute",
    "content": "Attribute-driven heuristics . The Attribute heuristics uses custom point or edge value as raw score. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/pathfinding-edges.html#heuristic-attribute",
    "relUrl": "/doc-pathfinding/pathfinding-edges.html#heuristic-attribute"
  },"1241": {
    "doc": "Edges Pathfinding",
    "title": "🝰 Shortest Distance",
    "content": "Favor shortest distance. The Shortest Distance heuristic node … . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/pathfinding-edges.html#shortest-distance",
    "relUrl": "/doc-pathfinding/pathfinding-edges.html#shortest-distance"
  },"1242": {
    "doc": "Edges Pathfinding",
    "title": "🝰 Feedback",
    "content": "Favor uncharted points &amp; edges. The Feedback heuristic add/remove score value to points &amp; edges that are “in use” by other previously computed paths. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/pathfinding-edges.html#feedback",
    "relUrl": "/doc-pathfinding/pathfinding-edges.html#feedback"
  },"1243": {
    "doc": "Edges Pathfinding",
    "title": "🝰 Inertia",
    "content": "Favor active direction preservation. The Inertia heuristic uses the ongoing traversal data to try and maintain a consistent direction, as if the algorithm had “inertia”. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/pathfinding-edges.html#inertia",
    "relUrl": "/doc-pathfinding/pathfinding-edges.html#inertia"
  },"1244": {
    "doc": "Edges Pathfinding",
    "title": "🝰 Steepness",
    "content": "Favor flat trajectories. The Steepness heuristic uses the edge angle against an up vector to compute a dot product that is used to determine whether the edge should be considered flat or not. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/pathfinding-edges.html#steepness",
    "relUrl": "/doc-pathfinding/pathfinding-edges.html#steepness"
  },"1245": {
    "doc": "Edges Pathfinding",
    "title": "🝰 Azimuth",
    "content": "Favor edges directed toward the goal. The Azimuth heuristic attempt to force the path to always aim toward the goal. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/pathfinding-edges.html#azimuth",
    "relUrl": "/doc-pathfinding/pathfinding-edges.html#azimuth"
  },"1246": {
    "doc": "Edges Pathfinding",
    "title": "🝰 Least Nodes",
    "content": "Favor traversing the least amount of nodes. The Least Nodes heuristic favor node count traversal over anything else. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/pathfinding-edges.html#least-nodes",
    "relUrl": "/doc-pathfinding/pathfinding-edges.html#least-nodes"
  },"1247": {
    "doc": "Edges Pathfinding",
    "title": "Available ⊚ Search modules",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/pathfinding-edges.html#available--search-modules",
    "relUrl": "/doc-pathfinding/pathfinding-edges.html#available--search-modules"
  },"1248": {
    "doc": "Edges Pathfinding",
    "title": "Dijkstra",
    "content": "Dijkstra’s Algorithm . Dijkstra’s Algorithm implementation. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/pathfinding-edges.html#dijkstra",
    "relUrl": "/doc-pathfinding/pathfinding-edges.html#dijkstra"
  },"1249": {
    "doc": "Edges Pathfinding",
    "title": "A* Star",
    "content": "A* Algorithm . A* Algorithm implementation. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/pathfinding-edges.html#a-star",
    "relUrl": "/doc-pathfinding/pathfinding-edges.html#a-star"
  },"1250": {
    "doc": "Edges Pathfinding",
    "title": "Edges Pathfinding",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/pathfinding-edges.html",
    "relUrl": "/doc-pathfinding/pathfinding-edges.html"
  },"1251": {
    "doc": "Find All Cells",
    "title": "Find All Cells",
    "content": "Find all cells within a cluster . The Find All Cells node finds all closed cells for a cluster. VtxEndpoints of the input Edges EdgesEdges associated with the input Vtxs PathsOne or multiple paths per seed points . Table of content . | Properties . | Projection Settings | Seed Attributes to Path Tags | Seed Forwarding | . | . The Find All Cells node attempts to find all the available contours (cells) inside a cluster, and provides a lot of options to filter out undesirable ones. It’s a different, powerful alternative to Find Contours, that doesn’t require seeds and instead uses a sure-fire way internally to find contours. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/pathfinding-find-all-cells.html#find-all-cells",
    "relUrl": "/doc-pathfinding/pathfinding-find-all-cells.html#find-all-cells"
  },"1252": {
    "doc": "Find All Cells",
    "title": "Properties",
    "content": ". | Property | Description | . | :**Settings**| |   | . | Seed Picking | Lets you control how the seed node (Vtx) will be picked based on the provided seed position. | . | Duplicate Deadend points | Whether or not to duplicate dead end points. Useful if you plan on offsetting the generated contours. | . | : **Output**| |   | . | Output Type | Filter which contours will be considered valid; either Convex only, Concave only, or Both. | . | Dedupe Paths | If enabled, ensure that no two contours are the same.*This is important because if your have poor seeds, they may generate the same contours.* | . | Keep Only Graceful Contours | Whether to keep only contours that closed gracefully; *i.e connect to their start node* | . | Keep Contours with Deadends | Whether to keep contour that include dead ends wrapping. | . | Output Filtered Seeds | Whether to keep contour that include dead ends wrapping. | . | : **Pruning**| |   | . | Min Point Count | If enabled, does not output paths with a point count smaller than the specified amount. | . | Max Point Count | If enabled, does not output paths with a point count larger than the specified amount. | . | **Projection Settings** | *See below* | . | : **Tagging** | |   | . | &lt;span class=\"etag\"&gt;Concave Tag&lt;/span&gt; | If enabled, will tag concave paths data with the specified tag. | . | &lt;span class=\"etag\"&gt;Convex Tag&lt;/span&gt; | If enabled, will tag convex paths data with the specified tag. | . | &lt;span class=\"etag\"&gt;Is Closed Loop Tag&lt;/span&gt; | If enabled, will tag closed loop paths data with the specified tag. | . | &lt;span class=\"etag\"&gt;Is Open Path Tag&lt;/span&gt; | If enabled, will tag open paths data with the specified tag. | . | &lt;span class=\"eout\"&gt;DeadEnd Flag&lt;/span&gt;bool | If enabled, will flag path points generated from dead end edges. | . | : **Forwarding** | |   | . | Seed Attributes to Path Tags | Let you pick and choose Seed point attributes and turn them to tags added to their associated output contours.*See below.* | . | Seed Forwarding | Let you pick and choose which Seed attributes are transferred to path points.*See below.* | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/pathfinding-find-all-cells.html#properties",
    "relUrl": "/doc-pathfinding/pathfinding-find-all-cells.html#properties"
  },"1253": {
    "doc": "Find All Cells",
    "title": "Projection Settings",
    "content": ". The projection settings control how the point position is translated to a 2D space before the graph is computed; and how this projection will translate back to the original space, if relevant. | Property | Description | . | Projection Normal | Normal vector of the plane used for projection.By default, the projection plan normal is Up; so the graph is computed over the X Y plane. | . | Local Projection Normal | If enabled, uses a per-point projection vector. | . | Local Normal | Attribute ti read normal from, | . Local projection normal is very powerful but can also be very clunky to use – it’s very easy to end up with singularities that will prevent the graph from being properly computed. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/pathfinding-find-all-cells.html#projection-settings",
    "relUrl": "/doc-pathfinding/pathfinding-find-all-cells.html#projection-settings"
  },"1254": {
    "doc": "Find All Cells",
    "title": "Seed Attributes to Path Tags",
    "content": ". “Forwarding” settings lets you pick-and-choose which attributes &amp; tags carry over from some data to another. | Property | Description | . | Enabled | Whether attribute forwarding is enabled or not. | . | Preserve Attributes Default Value | If enabled, the node will attempt to create attributes on the data in a way that preserve the original, underlying default value of the attribute.This can be critical in order to identify which data originally belonged to which, as well as properly initializing flags to a desirable default. | . Note that the filters look for a single valid match amongst the list; you cannot create and/or conditions. Filter Details . | Property | Description | . | Filter Mode | Chooses how the filter operates.- All let everything pass.- Exclude filters out the result of the filter.- Include only allows the items that pass the filters. | . | Matches | Lets you define a list of checks pairs: a string value, and a Match Mode. | . | Comma Separated Names | Easy to override, lets you specify a list of comma-separated names.The only caveat is that you can only pick a unique match mode used for each entry. | . | Comma Separated Names Filter | Which filter will be used along the Comma Separated Names. | . | Preserve PCGEx Data | Most of the time you’ll want to leave it to its default value. It ensures PCGEx/ prefixed data are not captured by the filter. | . Filter Modes . | Mode | Description | . | Equals | Checks for strict equality of the filtered value and the associated string. | . | Contains | Checks if the filtered value contains the associated string. | . | Starts With | Checks if the filtered value is prefixed with the associated string. | . | Ends With | Checks if the filtered value is suffixed with the associated string. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/pathfinding-find-all-cells.html#seed-attributes-to-path-tags",
    "relUrl": "/doc-pathfinding/pathfinding-find-all-cells.html#seed-attributes-to-path-tags"
  },"1255": {
    "doc": "Find All Cells",
    "title": "Seed Forwarding",
    "content": ". “Forwarding” settings lets you pick-and-choose which attributes &amp; tags carry over from some data to another. | Property | Description | . | Enabled | Whether attribute forwarding is enabled or not. | . | Preserve Attributes Default Value | If enabled, the node will attempt to create attributes on the data in a way that preserve the original, underlying default value of the attribute.This can be critical in order to identify which data originally belonged to which, as well as properly initializing flags to a desirable default. | . Note that the filters look for a single valid match amongst the list; you cannot create and/or conditions. Filter Details . | Property | Description | . | Filter Mode | Chooses how the filter operates.- All let everything pass.- Exclude filters out the result of the filter.- Include only allows the items that pass the filters. | . | Matches | Lets you define a list of checks pairs: a string value, and a Match Mode. | . | Comma Separated Names | Easy to override, lets you specify a list of comma-separated names.The only caveat is that you can only pick a unique match mode used for each entry. | . | Comma Separated Names Filter | Which filter will be used along the Comma Separated Names. | . | Preserve PCGEx Data | Most of the time you’ll want to leave it to its default value. It ensures PCGEx/ prefixed data are not captured by the filter. | . Filter Modes . | Mode | Description | . | Equals | Checks for strict equality of the filtered value and the associated string. | . | Contains | Checks if the filtered value contains the associated string. | . | Starts With | Checks if the filtered value is prefixed with the associated string. | . | Ends With | Checks if the filtered value is suffixed with the associated string. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/pathfinding-find-all-cells.html#seed-forwarding",
    "relUrl": "/doc-pathfinding/pathfinding-find-all-cells.html#seed-forwarding"
  },"1256": {
    "doc": "Find All Cells",
    "title": "Find All Cells",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/pathfinding-find-all-cells.html",
    "relUrl": "/doc-pathfinding/pathfinding-find-all-cells.html"
  },"1257": {
    "doc": "Find Contours",
    "title": "Find Contours",
    "content": "Find edge contours &amp; outlines . The Find Contours node finds hole/outlines contours in a graph, using points as proximity seeds. VtxEndpoints of the input Edges EdgesEdges associated with the input Vtxs SeedSeed points used to find contours based on proximity PathsOne or multiple paths per seed points . Table of content . | Properties . | Projection Settings | Seed Attributes to Path Tags | Seed Forwarding | . | . The Find Contour node attempts to find the contours of connected edges using a seed as a starting search point. It works by projecting the cluster on a plane and doing a clockwise search of the next best angle. This is not a bulletproof approach but it works very well on projectable clusters with no overlapping edges. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/pathfinding-find-contours.html#find-contours",
    "relUrl": "/doc-pathfinding/pathfinding-find-contours.html#find-contours"
  },"1258": {
    "doc": "Find Contours",
    "title": "Properties",
    "content": ". | Property | Description | . | :**Settings**| |   | . | Seed Picking | Lets you control how the seed node (Vtx) will be picked based on the provided seed position. | . | Duplicate Deadend points | Whether or not to duplicate dead end points. Useful if you plan on offsetting the generated contours. | . | : **Output**| |   | . | Output Type | Filter which contours will be considered valid; either Convex only, Concave only, or Both. | . | Dedupe Paths | If enabled, ensure that no two contours are the same.*This is important because if your have poor seeds, they may generate the same contours.* | . | Keep Only Graceful Contours | Whether to keep only contours that closed gracefully; *i.e connect to their start node* | . | Keep Contours with Deadends | Whether to keep contour that include dead ends wrapping. | . | Output Filtered Seeds | Whether to keep contour that include dead ends wrapping. | . | : **Pruning**| |   | . | Min Point Count | If enabled, does not output paths with a point count smaller than the specified amount. | . | Max Point Count | If enabled, does not output paths with a point count larger than the specified amount. | . | **Projection Settings** | *See below* | . | : **Tagging** | |   | . | &lt;span class=\"etag\"&gt;Concave Tag&lt;/span&gt; | If enabled, will tag concave paths data with the specified tag. | . | &lt;span class=\"etag\"&gt;Convex Tag&lt;/span&gt; | If enabled, will tag convex paths data with the specified tag. | . | &lt;span class=\"etag\"&gt;Is Closed Loop Tag&lt;/span&gt; | If enabled, will tag closed loop paths data with the specified tag. | . | &lt;span class=\"etag\"&gt;Is Open Path Tag&lt;/span&gt; | If enabled, will tag open paths data with the specified tag. | . | &lt;span class=\"eout\"&gt;DeadEnd Flag&lt;/span&gt;bool | If enabled, will flag path points generated from dead end edges. | . | : **Forwarding** | |   | . | Seed Attributes to Path Tags | Let you pick and choose Seed point attributes and turn them to tags added to their associated output contours.*See below.* | . | Seed Forwarding | Let you pick and choose which Seed attributes are transferred to path points.*See below.* | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/pathfinding-find-contours.html#properties",
    "relUrl": "/doc-pathfinding/pathfinding-find-contours.html#properties"
  },"1259": {
    "doc": "Find Contours",
    "title": "Projection Settings",
    "content": ". The projection settings control how the point position is translated to a 2D space before the graph is computed; and how this projection will translate back to the original space, if relevant. | Property | Description | . | Projection Normal | Normal vector of the plane used for projection.By default, the projection plan normal is Up; so the graph is computed over the X Y plane. | . | Local Projection Normal | If enabled, uses a per-point projection vector. | . | Local Normal | Attribute ti read normal from, | . Local projection normal is very powerful but can also be very clunky to use – it’s very easy to end up with singularities that will prevent the graph from being properly computed. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/pathfinding-find-contours.html#projection-settings",
    "relUrl": "/doc-pathfinding/pathfinding-find-contours.html#projection-settings"
  },"1260": {
    "doc": "Find Contours",
    "title": "Seed Attributes to Path Tags",
    "content": ". “Forwarding” settings lets you pick-and-choose which attributes &amp; tags carry over from some data to another. | Property | Description | . | Enabled | Whether attribute forwarding is enabled or not. | . | Preserve Attributes Default Value | If enabled, the node will attempt to create attributes on the data in a way that preserve the original, underlying default value of the attribute.This can be critical in order to identify which data originally belonged to which, as well as properly initializing flags to a desirable default. | . Note that the filters look for a single valid match amongst the list; you cannot create and/or conditions. Filter Details . | Property | Description | . | Filter Mode | Chooses how the filter operates.- All let everything pass.- Exclude filters out the result of the filter.- Include only allows the items that pass the filters. | . | Matches | Lets you define a list of checks pairs: a string value, and a Match Mode. | . | Comma Separated Names | Easy to override, lets you specify a list of comma-separated names.The only caveat is that you can only pick a unique match mode used for each entry. | . | Comma Separated Names Filter | Which filter will be used along the Comma Separated Names. | . | Preserve PCGEx Data | Most of the time you’ll want to leave it to its default value. It ensures PCGEx/ prefixed data are not captured by the filter. | . Filter Modes . | Mode | Description | . | Equals | Checks for strict equality of the filtered value and the associated string. | . | Contains | Checks if the filtered value contains the associated string. | . | Starts With | Checks if the filtered value is prefixed with the associated string. | . | Ends With | Checks if the filtered value is suffixed with the associated string. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/pathfinding-find-contours.html#seed-attributes-to-path-tags",
    "relUrl": "/doc-pathfinding/pathfinding-find-contours.html#seed-attributes-to-path-tags"
  },"1261": {
    "doc": "Find Contours",
    "title": "Seed Forwarding",
    "content": ". “Forwarding” settings lets you pick-and-choose which attributes &amp; tags carry over from some data to another. | Property | Description | . | Enabled | Whether attribute forwarding is enabled or not. | . | Preserve Attributes Default Value | If enabled, the node will attempt to create attributes on the data in a way that preserve the original, underlying default value of the attribute.This can be critical in order to identify which data originally belonged to which, as well as properly initializing flags to a desirable default. | . Note that the filters look for a single valid match amongst the list; you cannot create and/or conditions. Filter Details . | Property | Description | . | Filter Mode | Chooses how the filter operates.- All let everything pass.- Exclude filters out the result of the filter.- Include only allows the items that pass the filters. | . | Matches | Lets you define a list of checks pairs: a string value, and a Match Mode. | . | Comma Separated Names | Easy to override, lets you specify a list of comma-separated names.The only caveat is that you can only pick a unique match mode used for each entry. | . | Comma Separated Names Filter | Which filter will be used along the Comma Separated Names. | . | Preserve PCGEx Data | Most of the time you’ll want to leave it to its default value. It ensures PCGEx/ prefixed data are not captured by the filter. | . Filter Modes . | Mode | Description | . | Equals | Checks for strict equality of the filtered value and the associated string. | . | Contains | Checks if the filtered value contains the associated string. | . | Starts With | Checks if the filtered value is prefixed with the associated string. | . | Ends With | Checks if the filtered value is suffixed with the associated string. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/pathfinding-find-contours.html#seed-forwarding",
    "relUrl": "/doc-pathfinding/pathfinding-find-contours.html#seed-forwarding"
  },"1262": {
    "doc": "Find Contours",
    "title": "Find Contours",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/pathfinding-find-contours.html",
    "relUrl": "/doc-pathfinding/pathfinding-find-contours.html"
  },"1263": {
    "doc": "Grow Paths",
    "title": "Grow Paths",
    "content": "PCGEx | Pathfinding : Grow Paths Grows paths from seeds alone. The Grow Paths node randomly grows paths inside a cluster, using seeds and multiple contraints &amp; heuristics. VtxEndpoints of the input Edges EdgesEdges associated with the input Vtxs SeedsSeed points Heuristics🝰 Heuristics nodes that will be used by the pathfinding search algorithm PathsA point collection per path found . Related . | Pathfinding | . Table of content . The Grow Path node is still heavily WIP. It’s an old node that wasn’t properly updated after a major heuristic refactor, and doesn’t handle them really well. It can still produce interesting results, but it’s very hard to control. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/pathfinding-grow-paths.html#grow-paths",
    "relUrl": "/doc-pathfinding/pathfinding-grow-paths.html#grow-paths"
  },"1264": {
    "doc": "Grow Paths",
    "title": "Grow Paths",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/pathfinding-grow-paths.html",
    "relUrl": "/doc-pathfinding/pathfinding-grow-paths.html"
  },"1265": {
    "doc": "Plot Navmesh",
    "title": "Plot Navmesh",
    "content": "Sample the navmesh to find a path that goes through multiple chained points. The Plot Navmesh node samples a navmesh to create paths that pass through multiple linked points, with options to include seed, goal, and plot points in the path, as well as settings to simplify or blend path data; it requires a pre-built and loaded navmesh to function correctly. PlotsPlot points in the form of points collections. PathsA single path per plot collection input . Related . | Blending | . Table of content . | Properties | . Important: Currently, the navigation data used by the node is the one returned by GetDefaultNavDataInstance(); hence it requires a navmesh to be built and loaded at the time of execution. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/pathfinding-navmesh-plot.html#plot-navmesh",
    "relUrl": "/doc-pathfinding/pathfinding-navmesh-plot.html#plot-navmesh"
  },"1266": {
    "doc": "Plot Navmesh",
    "title": "Properties",
    "content": ". | Property | Description | . | :**Settings**| |   | . | Add Seed to Path | Prepends the *seed position* at the beginning of the output path.*This will create a point with the position of the seed.* | . | Add Goal to Path | Appends the *goal position* at the end of the output path.*This will create a point with the position of the goal.* | . | Add Plot Points to Path | Include plot points positions as part of the output path. | . | Require Naviguable End Location | Ensures the picked goal is close enough to an naviguable location, otherwise doesn’t generate a path. | . | **Post-processing**| |   | . | Fuse Distance | Fuse points in the sampled path that are too close together.*The navigation system may sometimes generate intricate paths which points that are very close to each other, which may or may not be suitable for your usecase. This settings gives you a bit of control over that.* | . | **Blending** | Controls how data is blended on the path points between the Seed and Goal point.*See Blending.* | . Remaining properties are Unreal’ navigation system query specifics. Despite using the right API, they seem to be ignored for the most part, which is something I need to look into. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/pathfinding-navmesh-plot.html#properties",
    "relUrl": "/doc-pathfinding/pathfinding-navmesh-plot.html#properties"
  },"1267": {
    "doc": "Plot Navmesh",
    "title": "Plot Navmesh",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/pathfinding-navmesh-plot.html",
    "relUrl": "/doc-pathfinding/pathfinding-navmesh-plot.html"
  },"1268": {
    "doc": "Navmesh Pathfinding",
    "title": "Navmesh Pathfinding",
    "content": "Sample the navmesh to find paths . The Navmesh node … . SeedsSeed points GoalsGoal points PathsA point collection per path found . Table of content . | Properties | . Important: Currently, the navigation data used by the node is the one returned by GetDefaultNavDataInstance(); hence it requires a navmesh to be built and loaded at the time of execution. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/pathfinding-navmesh.html#navmesh-pathfinding",
    "relUrl": "/doc-pathfinding/pathfinding-navmesh.html#navmesh-pathfinding"
  },"1269": {
    "doc": "Navmesh Pathfinding",
    "title": "Properties",
    "content": ". | Property | Description | . | :**Settings**| |   | . | Add Seed to Path | Prepends the *seed position* at the beginning of the output path.*This will create a point with the position of the seed.* | . | Add Goal to Path | Appends the *goal position* at the end of the output path.*This will create a point with the position of the goal.* | . | Require Naviguable End Location | Ensures the picked goal is close enough to an naviguable location, otherwise doesn’t generate a path. | . | **Post-processing**| |   | . | Fuse Distance | Fuse points in the sampled path that are too close together.*The navigation system may sometimes generate intricate paths which points that are very close to each other, which may or may not be suitable for your usecase. This settings gives you a bit of control over that.* | . | **Blending** | Controls how data is blended on the path points between the Seed and Goal point.*See Blending.* | . Remaining properties are Unreal’ navigation system query specifics. Despite using the right API, they seem to be ignored for the most part, which is something I need to look into. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/pathfinding-navmesh.html#properties",
    "relUrl": "/doc-pathfinding/pathfinding-navmesh.html#properties"
  },"1270": {
    "doc": "Navmesh Pathfinding",
    "title": "Navmesh Pathfinding",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/pathfinding-navmesh.html",
    "relUrl": "/doc-pathfinding/pathfinding-navmesh.html"
  },"1271": {
    "doc": "Attribute Rolling",
    "title": "Attribute Rolling",
    "content": "PCGEx | Path : Attribute Rolling Does a rolling operation over properties &amp; attributes along a path . The Attribute Rolling nodes allows to do “rolling” operations, where the base value of each operation is the result of the previous one. PathsPaths which points will be bevelled Trigger ConditionsOptional filters used to determine whether a point will be bevelled or not PathsBevelled paths . Table of content . | Properties | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-attribute-rolling.html#attribute-rolling",
    "relUrl": "/doc-paths/paths-attribute-rolling.html#attribute-rolling"
  },"1272": {
    "doc": "Attribute Rolling",
    "title": "Properties",
    "content": ". DOC TDB . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-attribute-rolling.html#properties",
    "relUrl": "/doc-paths/paths-attribute-rolling.html#properties"
  },"1273": {
    "doc": "Attribute Rolling",
    "title": "Attribute Rolling",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-attribute-rolling.html",
    "relUrl": "/doc-paths/paths-attribute-rolling.html"
  },"1274": {
    "doc": "Bevel",
    "title": "Bevel",
    "content": "PCGEx | Path : Bevel Bevel path points . The Fuse Collinear node removes points that are collinear, with control over thresholds. It can also optionally fuse points based on their proximity. PathsPaths which points will be bevelled Bevel ConditionsOptional filters used to determine whether a point will be bevelled or not ProfileCustom profile path PathsBevelled paths . Table of content . | Properties | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-bevel.html#bevel",
    "relUrl": "/doc-paths/paths-bevel.html#bevel"
  },"1275": {
    "doc": "Bevel",
    "title": "Properties",
    "content": ". DOC TDB . | Mode |   | . | | **None**Outputs canon Delaunay sites. | . | | **Merge Sites**The output site is the average of all the canon Delaunay sites that are abstracted by the Urquhart pass. | . | | **Merge Edges**The output site is the average of all the edges removed by the Urquhart pass. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-bevel.html#properties",
    "relUrl": "/doc-paths/paths-bevel.html#properties"
  },"1276": {
    "doc": "Bevel",
    "title": "Bevel",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-bevel.html",
    "relUrl": "/doc-paths/paths-bevel.html"
  },"1277": {
    "doc": "Path × Bounds Intersections",
    "title": "Path × Bounds Intersections",
    "content": "PCGEx | Path × Bounds Intersection Find intersections with points bounds. The Path × Bounds Intersection node … . PathsPaths which points will be checked BoundsPoints which bounds will be used as intersection source PathsPaths with additional points &amp; informations . Table of content . | Properties | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-bounds-intersections.html#path--bounds-intersections",
    "relUrl": "/doc-paths/paths-bounds-intersections.html#path--bounds-intersections"
  },"1278": {
    "doc": "Path × Bounds Intersections",
    "title": "Properties",
    "content": ". DOC TDB . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-bounds-intersections.html#properties",
    "relUrl": "/doc-paths/paths-bounds-intersections.html#properties"
  },"1279": {
    "doc": "Path × Bounds Intersections",
    "title": "Path × Bounds Intersections",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-bounds-intersections.html",
    "relUrl": "/doc-paths/paths-bounds-intersections.html"
  },"1280": {
    "doc": "Create Spline",
    "title": "Create Spline",
    "content": "PCGEx | Create Spline A Create Spline node with per-point controls &amp; tagging abilities. The Create Spline node lets you create spline data &amp; components from paths’ points. It is exactly like the regular Create Spline node, with a few extended features, such as spline point type &amp; component tagging. PathsPaths which segments will be subdivided SplinesGenerated Splines data . Table of content . | Properties . | Point Types | . | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-create-spline.html#create-spline",
    "relUrl": "/doc-paths/paths-create-spline.html#create-spline"
  },"1281": {
    "doc": "Create Spline",
    "title": "Properties",
    "content": ". The index safety property controls how invalid/out of bounds input values are handled. | Safety method |   | . | Ignore | Invalid indices will be ignored and won’t be processed further. | . | Tile | Index is tiled (wrapped around) the context’ valid min/max range. | . | Clamp | Index is clamped between the context’ valid min/max range. | . | Yoyo | Index bounces back and forth between the context’ valid min/max range. | . | : **Settings**| |   | . | Mode | What type of data will be generated by the node. Either Data Only, or Component as well. | . | Default Point Type | Default point type for the spline.See [Point Types](#point-types) | . | Apply Custom Point Type | If enabled, will use a per-point attribute to drive the spline point type. | . | Point Type Attribute | The attribute which value will be used to select point type. | . | : **Settings**| |   | . | Apply Custom Tangents | When enabled, applies FVector tangents attributes to spline points. | . | Arrive Tangent Attribute | Per-point attribute to read the arrive tangent from. | . | Leave Tangent Attribute | Per-point attribute to read the leave tangent from. | . Note that custom tangents are only used by the Curve Custom Tangent point type! . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-create-spline.html#properties",
    "relUrl": "/doc-paths/paths-create-spline.html#properties"
  },"1282": {
    "doc": "Create Spline",
    "title": "Point Types",
    "content": ". Distribution drives how assets are selected within the collection &amp; assigned to points. | : Point Types | *Seed components lets you choose which seed source you want to combined to drive randomness.* | . | &lt;span class=\"ebit\"&gt;Linear&lt;/span&gt; | TBD | . | &lt;span class=\"ebit\"&gt;Curve&lt;/span&gt; | TBD | . | &lt;span class=\"ebit\"&gt;Constant&lt;/span&gt; | TBD | . | &lt;span class=\"ebit\"&gt;Curve Clamped&lt;/span&gt; | TBD | . | &lt;span class=\"ebit\"&gt;Curve Custom Tangent&lt;/span&gt; | TBD | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-create-spline.html#point-types",
    "relUrl": "/doc-paths/paths-create-spline.html#point-types"
  },"1283": {
    "doc": "Create Spline",
    "title": "Create Spline",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-create-spline.html",
    "relUrl": "/doc-paths/paths-create-spline.html"
  },"1284": {
    "doc": "Fuse Collinear",
    "title": "Fuse Collinear",
    "content": "PCGEx | Path : Fuse Collinear Fuse collinear points on a path . The Fuse Collinear node removes points that are collinear, with control over thresholds. It can also optionally fuse points based on their proximity. PathsPaths which points will be checked for collinearity FilterOptional filters used to determine whether a point can be removed or not PathsSimplified paths . Table of content . | Properties | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-fuse-collinear.html#fuse-collinear",
    "relUrl": "/doc-paths/paths-fuse-collinear.html#fuse-collinear"
  },"1285": {
    "doc": "Fuse Collinear",
    "title": "Properties",
    "content": ". | Property | Description | . | :**Settings**| |   | . | Threshold | Threshold in degree under which the deviation is considered small enough to be collinear. | . | Fuse Distance | In addition to collinearity, this value allows to fuse points that are close enough. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-fuse-collinear.html#properties",
    "relUrl": "/doc-paths/paths-fuse-collinear.html#properties"
  },"1286": {
    "doc": "Fuse Collinear",
    "title": "Fuse Collinear",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-fuse-collinear.html",
    "relUrl": "/doc-paths/paths-fuse-collinear.html"
  },"1287": {
    "doc": "Offset",
    "title": "Offset",
    "content": "PCGEx | Path : Offset Offset path along a direction . The Offset node moves path points in a given direction . PathsPaths which points will be offset PathsOffset paths . Table of content . | Properties | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-offset.html#offset",
    "relUrl": "/doc-paths/paths-offset.html#offset"
  },"1288": {
    "doc": "Offset",
    "title": "Properties",
    "content": ". DOC TDB . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-offset.html#properties",
    "relUrl": "/doc-paths/paths-offset.html#properties"
  },"1289": {
    "doc": "Offset",
    "title": "Offset",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-offset.html",
    "relUrl": "/doc-paths/paths-offset.html"
  },"1290": {
    "doc": "Path × Path Crossings",
    "title": "Path × Path Crossings",
    "content": "PCGEx | Path × Path Crossings Find crossings within &amp; against other paths. The Path × Path Crossings node detects intersections between path segments, either within the same path or against others, blending attributes from intersecting points and providing detailed control over how crossings and blending are handled. PathsPaths which edges will be checked for crossings Can Cut ConditionsFilters used to determine whether a segment can \"cut\" other segments Can Cut ConditionsFilters used to determine whether a segment can be \"cut\" by cutter segments PathsPaths with additional points &amp; informations . Table of content . | Properties . | Intersection Details | . | Blendings . | Blending | Cross Blending . | Crossing Carry Over | Crossing Blending | . | . | Outputs . | Tagging | . | . The Path × Path Crossings find all paths segments intersections either against all other inputs, or only against itself. Created intersection can capture attributes from the the foreign path’ point, amongst other useful things. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-paths-intersections.html#path--path-crossings",
    "relUrl": "/doc-paths/paths-paths-intersections.html#path--path-crossings"
  },"1291": {
    "doc": "Path × Path Crossings",
    "title": "Properties",
    "content": ". | Property | Description | . | Closed loop |   | . | Scope | The scope/selection of input data that are to be processed as closed paths or not.-All processes all input as selected below.-All but tagged inverts the scope based on tags.Default is, all paths are considered open, unless they are tagged with ClosedLoop. | . | Closed Loop | Whether to consider input data that are part of the scope as closed loop or not. | . | Comma Separated Tags | Tags to check for. Any match uses the inverse of the above value. | . | Self-intersection Only | If enabled, input paths will only check for crossing against themselves, as opposed to against every other input path. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-paths-intersections.html#properties",
    "relUrl": "/doc-paths/paths-paths-intersections.html#properties"
  },"1292": {
    "doc": "Path × Path Crossings",
    "title": "Intersection Details",
    "content": ". | Property | Description | . | Enable Self Intersection | If enabled, a cluster will test if intersection exists against itself. Otherwise, only check against other clusters. | . | Tolerance |   | . | Tolerance | Uniform tolerance. This represent the radius within which elements will be considered in fuse range. | . | Min Angle | If enabled, only considers edges to be intersecting if their angle is greater than the specified value. | . | Max Angle | If enabled, only considers edges to be intersecting if their angle is smaller than the specified value. | . | Outputs |   | . | Crossing Attribute Namebool | If enabled, flag the edges’ intersection point. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-paths-intersections.html#intersection-details",
    "relUrl": "/doc-paths/paths-paths-intersections.html#intersection-details"
  },"1293": {
    "doc": "Path × Path Crossings",
    "title": "Blendings",
    "content": ". Blending on this node happen in a very specific order: . | First, crossing point property are calculated as a blend between the start &amp; end point of the segment that’s being cut.This considers internal properties &amp; attributes only. | Then, if enabled, cross-blending is processed: this pass blends attributes from the foreign crossing data to bleed onto the crossing point.This only considers external properties &amp; attributes only. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-paths-intersections.html#blendings",
    "relUrl": "/doc-paths/paths-paths-intersections.html#blendings"
  },"1294": {
    "doc": "Path × Path Crossings",
    "title": "Blending",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-paths-intersections.html#blending",
    "relUrl": "/doc-paths/paths-paths-intersections.html#blending"
  },"1295": {
    "doc": "Path × Path Crossings",
    "title": "Cross Blending",
    "content": "If there is an overlap, cross-blending will overrides any previously blended values. Crossing Carry Over . “Carry over” settings lets you pick-and-choose which attributes &amp; tags carry over to the new data. | Property | Description | . | Preserve Attributes Default Value | If enabled, the node will attempt to create attributes on the data in a way that preserve the original, underlying default value of the attribute.This can be critical in order to identify which data originally belonged to which, as well as properly initializing flags to a desirable default. | . | Attributes | Lets you pick and choose which attributes to keep or dismiss. | . | Tags | Lets you pick and choose which attributes to keep or dismiss. | . Both Attributes &amp; Tags share the same string-based filters. Note that the filters look for a single valid match amongst the list; you cannot create and/or conditions. Filter Details . | Property | Description | . | Filter Mode | Chooses how the filter operates.- All let everything pass.- Exclude filters out the result of the filter.- Include only allows the items that pass the filters. | . | Matches | Lets you define a list of checks pairs: a string value, and a Match Mode. | . | Comma Separated Names | Easy to override, lets you specify a list of comma-separated names.The only caveat is that you can only pick a unique match mode used for each entry. | . | Comma Separated Names Filter | Which filter will be used along the Comma Separated Names. | . | Preserve PCGEx Data | Most of the time you’ll want to leave it to its default value. It ensures PCGEx/ prefixed data are not captured by the filter. | . Filter Modes . | Mode | Description | . | Equals | Checks for strict equality of the filtered value and the associated string. | . | Contains | Checks if the filtered value contains the associated string. | . | Starts With | Checks if the filtered value is prefixed with the associated string. | . | Ends With | Checks if the filtered value is suffixed with the associated string. | . Crossing Blending . See Blending . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-paths-intersections.html#cross-blending",
    "relUrl": "/doc-paths/paths-paths-intersections.html#cross-blending"
  },"1296": {
    "doc": "Path × Path Crossings",
    "title": "Outputs",
    "content": ". | Output | Description | . | &lt;span class=\"eout\"&gt;Crossing Alpha&lt;/span&gt;double | Write the normalized position (alpha) of the crossing.*The alpha of a crossing is a 0..1 value representing where it sits between start and end point of the original segment.* | . | Crossing Orient Axis | If enabled, lets you pick a local transform axis of the crossing point to orient in the crossing’ segment direction. | . | &lt;span class=\"eout\"&gt;Cross Direction&lt;/span&gt;FVector | Similar to the option above, only writes the crossing segment’ direction to an attribute instead of applying it to the point rotation. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-paths-intersections.html#outputs",
    "relUrl": "/doc-paths/paths-paths-intersections.html#outputs"
  },"1297": {
    "doc": "Path × Path Crossings",
    "title": "Tagging",
    "content": "Some high level tags may be applied to the data based on overal intersections results. | Tag | Description | . | &lt;span class=\"etag\"&gt;Has Crossings Tag&lt;/span&gt; | If enabled, add the specified tag to the output data **if at least a single crossing** has been found. | . | &lt;span class=\"etag\"&gt;Has No Crossings Tag&lt;/span&gt; | If enabled, add the specified tag to the output data **if no crossings** have been found. | . Note that crossing detection tagging will be affected by points filter as well; since filtered out points are omitted from processing. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-paths-intersections.html#tagging",
    "relUrl": "/doc-paths/paths-paths-intersections.html#tagging"
  },"1298": {
    "doc": "Path × Path Crossings",
    "title": "Path × Path Crossings",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-paths-intersections.html",
    "relUrl": "/doc-paths/paths-paths-intersections.html"
  },"1299": {
    "doc": "Resample",
    "title": "Resample",
    "content": "PCGEx | Path : Resample Resample path points. The Resample Path node resample a path at equally spaced intervals; either fixed or distance-based. PathsPaths which points will be offset PathsResampled paths . Table of content . | Properties | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-resample.html#resample",
    "relUrl": "/doc-paths/paths-resample.html#resample"
  },"1300": {
    "doc": "Resample",
    "title": "Properties",
    "content": ". DOC TDB . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-resample.html#properties",
    "relUrl": "/doc-paths/paths-resample.html#properties"
  },"1301": {
    "doc": "Resample",
    "title": "Resample",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-resample.html",
    "relUrl": "/doc-paths/paths-resample.html"
  },"1302": {
    "doc": "Shift",
    "title": "Shift",
    "content": "PCGEx | Path : Shift Shift path point order inside the dataset. The Shift node shift points order within a path . PathsPaths which points will be offset PathsShifted paths . Table of content . | Properties | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-shift.html#shift",
    "relUrl": "/doc-paths/paths-shift.html#shift"
  },"1303": {
    "doc": "Shift",
    "title": "Properties",
    "content": ". DOC TDB . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-shift.html#properties",
    "relUrl": "/doc-paths/paths-shift.html#properties"
  },"1304": {
    "doc": "Shift",
    "title": "Shift",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-shift.html",
    "relUrl": "/doc-paths/paths-shift.html"
  },"1305": {
    "doc": "Solidify Path",
    "title": "Solidify Path",
    "content": "PCGEx | Path : Solidify Solidify paths into “edges” . The Solidify Path node converts abstract path segments into solid edges, optionally reducing points and adding information, with flexible parameters for axis-based solidification and radius settings. PathsPaths to solidify PathsPaths with optionally less points &amp; more informations . Table of content . | Properties | Solidfication . | Radiuses | . | . The Path Solidify node turns abstract path segments into “solid” edges. Each path point is turned into an edge-looking one that connects to the next. Unless the path is a closed loop, the last point is deprecated, hence it is recommended to remove it. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-solidify.html#solidify-path",
    "relUrl": "/doc-paths/paths-solidify.html#solidify-path"
  },"1306": {
    "doc": "Solidify Path",
    "title": "Properties",
    "content": ". | Property | Description | . | Closed loop |   | . | Scope | The scope/selection of input data that are to be processed as closed paths or not.-All processes all input as selected below.-All but tagged inverts the scope based on tags.Default is, all paths are considered open, unless they are tagged with ClosedLoop. | . | Closed Loop | Whether to consider input data that are part of the scope as closed loop or not. | . | Comma Separated Tags | Tags to check for. Any match uses the inverse of the above value. | . | Output | Description | . | Remove Last Point | If enabled, removes the last point on open paths, as they can’t be properly solidified. | . | Scale Bounds | If enabled, bounds will be scaled to reflect the real world distance that separates the points.*This is often necessary if the path’ points have a scale that is not equal to one.* | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-solidify.html#properties",
    "relUrl": "/doc-paths/paths-solidify.html#properties"
  },"1307": {
    "doc": "Solidify Path",
    "title": "Solidfication",
    "content": ". Solidification is fairly straightforward on paper, but in order to be flexible it also exposes an overwhelming amount of parameters. Unreal has a visual bug in the detail panel: the first time you select a solidification axis, remaining axis’ properties will not show up. *You have to deselect the node then select it again for the details panel to properly refresh. | Property | Description | . | :**Settings**| |   | . | Solidification Axis |   | . | Soldification Lerp Operand |   | . | Soldification Lerp *(Constant or Attribute)* |   | . Radiuses . When a solidification axis is selected, lets you set the segment bounds’ remaining two axis as “radiuses”. Each component shares the same following properties: . | Write Radius X/Y/Z |   | . | Radius Type |   | . | Radius Constant |   | . | Radius Attribute |   | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-solidify.html#solidfication",
    "relUrl": "/doc-paths/paths-solidify.html#solidfication"
  },"1308": {
    "doc": "Solidify Path",
    "title": "Solidify Path",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-solidify.html",
    "relUrl": "/doc-paths/paths-solidify.html"
  },"1309": {
    "doc": "Path Spline Mesh (Simple)",
    "title": "Path Spline Mesh (Simple)",
    "content": "PCGEx | Path : Spline Mesh (Simple) Create SplineMesh components from paths . The Path Spline Mesh (Simple) node generates spline meshes along using per-point attributes. PathsPaths to be used for SplineMesh . Table of content . | Properties . | Tangents | Additional Outputs . | Tagging Components | . | . | . The Path Spline Mesh node creates a spline mesh from an existing path. It’s a lightweight alternative to the Path Spline Mesh node, that rely on pre-existing per-point data to build the spline mesh. As a rule of thumb, it’s also more straightforward to use when your spline doesn’t need complex fitting &amp; distribution options. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-spline-mesh-simple.html#path-spline-mesh-simple",
    "relUrl": "/doc-paths/paths-spline-mesh-simple.html#path-spline-mesh-simple"
  },"1310": {
    "doc": "Path Spline Mesh (Simple)",
    "title": "Properties",
    "content": ". | Property | Description | . | Closed loop |   | . | Scope | The scope/selection of input data that are to be processed as closed paths or not.-All processes all input as selected below.-All but tagged inverts the scope based on tags.Default is, all paths are considered open, unless they are tagged with ClosedLoop. | . | Closed Loop | Whether to consider input data that are part of the scope as closed loop or not. | . | Comma Separated Tags | Tags to check for. Any match uses the inverse of the above value. | . | Property | Description | . | Asset Path | Name of the FSoftObjectPath attribute that contains the mesh associated with the point’ segment. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-spline-mesh-simple.html#properties",
    "relUrl": "/doc-paths/paths-spline-mesh-simple.html#properties"
  },"1311": {
    "doc": "Path Spline Mesh (Simple)",
    "title": "Tangents",
    "content": ". While disabled by default, Tangents play a crucial role in giving the spline mesh a correct deformation. It’s generally preferable to compute some using Write Tangents beforehand. | Property | Description | . | Apply Custom Tangents | When enabled, applies FVector tangents attributes to path segments. | . | Arrive Tangent Attribute | Per-point attribute to read the arrive tangent from. | . | Leave Tangent Attribute | Per-point attribute to read the leave tangent from. | . | Spline Mesh Axis | Chooses which mesh local axis will be aligned along the spline mesh’ segment. | . Note that the way arrive/leave tangent works is that each spline mesh segment uses the current point’ leave value, and the next point arrive value. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-spline-mesh-simple.html#tangents",
    "relUrl": "/doc-paths/paths-spline-mesh-simple.html#tangents"
  },"1312": {
    "doc": "Path Spline Mesh (Simple)",
    "title": "Additional Outputs",
    "content": "Lets you output the Weight of the selection to each node, using different post-processing methods. This can be very handy to identify “rare” spawns and preserve them during self-pruning operations. Tagging Components . | Property | Description | . | Grab Tags | Pick which tags from the asset collection should be grabbed and added to the component.See Entries &amp; Collections Tags. | . | Forward Input Data Tags | If enabled, tags associated with the currently processed dataset will be forwarded to the components. | . | More TBD |   | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-spline-mesh-simple.html#additional-outputs",
    "relUrl": "/doc-paths/paths-spline-mesh-simple.html#additional-outputs"
  },"1313": {
    "doc": "Path Spline Mesh (Simple)",
    "title": "Path Spline Mesh (Simple)",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-spline-mesh-simple.html",
    "relUrl": "/doc-paths/paths-spline-mesh-simple.html"
  },"1314": {
    "doc": "Path Spline Mesh",
    "title": "Path Spline Mesh",
    "content": "PCGEx | Path : Spline Mesh Create SplineMesh components from paths . The Path Spline Mesh node generates spline meshes along a path with detailed per-segment settings, allowing for mesh and data distribution from asset collections or attribute sets, and includes advanced options for tangents, scaling, justification, and distribution to control mesh behavior and appearance. PathsPaths to be used for SplineMesh . Table of content . | Properties . | Asset Collection | Tangents | Scale to Fit | Justification . | From | To | . | Distribution Settings . | Distribution | Index Settings | Index Safety | . | Target Actor | Additional Outputs . | Tagging Components | . | . | . The Path Spline Mesh node creates a spline mesh from an existing path, with extensive per-segment settings. It works very similarily to the Asset Staging node and uses the same set of options. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-spline-mesh.html#path-spline-mesh",
    "relUrl": "/doc-paths/paths-spline-mesh.html#path-spline-mesh"
  },"1315": {
    "doc": "Path Spline Mesh",
    "title": "Properties",
    "content": ". | Property | Description | . | Closed loop |   | . | Scope | The scope/selection of input data that are to be processed as closed paths or not.-All processes all input as selected below.-All but tagged inverts the scope based on tags.Default is, all paths are considered open, unless they are tagged with ClosedLoop. | . | Closed Loop | Whether to consider input data that are part of the scope as closed loop or not. | . | Comma Separated Tags | Tags to check for. Any match uses the inverse of the above value. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-spline-mesh.html#properties",
    "relUrl": "/doc-paths/paths-spline-mesh.html#properties"
  },"1316": {
    "doc": "Path Spline Mesh",
    "title": "Asset Collection",
    "content": "Controls the collection of meshes &amp; data that will be distributed to the path on its individual segments. | Property | Description | . | Source | Which type of source to use for the asset collection.Can be either Asset for an Asset Collection picker, or Attribute Set, which will reveal a new input pin that accepts an attribute set. | . | Asset Collection | If Asset is selected as a source, this is the Asset Collection that will be used for staging points.*See [Available Asset Collections](#available-asset-collections).* | . When using the Attribute Set source, the node will create a temp, internal Asset Collection from the source attribute set. | : **Attribute Set Details** :| |   | . | Asset Path Source Attribute | The name of the attribute within the Attribute Set that contains the entry’ **Asset Path**.*FSoftObjectPath is preferred, but FString and FName are supported.* | . | Weight Source Attribute | The name of the attribute within the Attribute Set that contains the entry’ **Weight**.*int32 is preferred, but float, double and int64 are supported.* | . | Category Source Attribute | The name of the attribute within the Attribute Set that contains the entry’ **Category**.*FName is preferred, but FString is supported.* | . While it’s a needed option, keep in mind that using an attribute set prevents access to any asset cached data. As such, all assets from the Attribute Set will be first loaded (asynchronously) in memory in order to compute their bounds; before the node execution can properly start. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-spline-mesh.html#asset-collection",
    "relUrl": "/doc-paths/paths-spline-mesh.html#asset-collection"
  },"1317": {
    "doc": "Path Spline Mesh",
    "title": "Tangents",
    "content": ". While disabled by default, Tangents play a crucial role in giving the spline mesh a correct deformation. It’s generally preferable to compute some using Write Tangents beforehand. | Property | Description | . | Apply Custom Tangents | When enabled, applies FVector tangents attributes to path segments. | . | Arrive Tangent Attribute | Per-point attribute to read the arrive tangent from. | . | Leave Tangent Attribute | Per-point attribute to read the leave tangent from. | . | Spline Mesh Axis | Chooses which mesh local axis will be aligned along the spline mesh’ segment. | . Note that the way arrive/leave tangent works is that each spline mesh segment uses the current point’ leave value, and the next point arrive value. The axis picked for Spline Mesh Axis will be ignored for Scale to Fit &amp; Justification. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-spline-mesh.html#tangents",
    "relUrl": "/doc-paths/paths-spline-mesh.html#tangents"
  },"1318": {
    "doc": "Path Spline Mesh",
    "title": "Scale to Fit",
    "content": ". Scale the spawned asset bounds in order to fit within the host point’ bounds. Note that the maths are computed against the point’ bounds, not the segment AABB. | Scale to Fit Mode | Which type of scale-to-fit mode is to be applied. None disables this section, Uniform applies the same rule to each individual component, while Individual lets you pick per-component rules. | . | Scale to Fit *(value)* | If Asset is selected as a source, this is the Asset Collection that will be used for staging points. | . You can use the following rules: . | : Scale to Fit | |   | . | | &lt;span class=\"ebit\"&gt;None&lt;/span&gt;Disable the scaling rule. | . | | &lt;span class=\"ebit\"&gt;Fill&lt;/span&gt;Scale the asset so it fills the point’ bounds. | . | | &lt;span class=\"ebit\"&gt;Min&lt;/span&gt;Scale the asset so it fits snuggly within the minimum point’ bounds. | . | | &lt;span class=\"ebit\"&gt;Max&lt;/span&gt;Scale the asset so it fits snuggly within the maximum point’ bounds. | . | | &lt;span class=\"ebit\"&gt;Average&lt;/span&gt;Scale the asset so it fits the average of the point’ bounds. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-spline-mesh.html#scale-to-fit",
    "relUrl": "/doc-paths/paths-spline-mesh.html#scale-to-fit"
  },"1319": {
    "doc": "Path Spline Mesh",
    "title": "Justification",
    "content": ". Offset the spawned asset bounds relative to the host point’ bounds. Justification is done &amp; tweaked per-component. Note that the maths are computed against the point’ bounds, not the segment AABB. | : **Per component** :| |   | . | From | The location within the **Asset** bounds that will be justified *To* the point’ bounds. *i.e, from which location in the asset do i start moving.* | . | To | The location withn the **Point** bounds to which the **Asset** bounds will be justified. *i.e, to which location in the point do i want to go.* | . | : **Consolidated custom inputs** :| |   | . | Custom from Vector Attribute | An FVector whose individual component will be used to drive From properties set to Custom.*Prefer this consolidated approach if you’re using custom values on more than one component.* | . | Custom to Vector Attribute | An FVector whose individual component will be used to drive To properties set to Custom. *Prefer this consolidated approach if you’re using custom values on more than one component.* | . | Justify to One | If enabled, justification ignore the original path’ point bounds, and uses 1,1,1 bounds instead. | . From . You can use the following rules for From: . | : Justify From | |   | . | | &lt;span class=\"ebit\"&gt;Center&lt;/span&gt;Uses the asset bounds’ local center as reference point. | . | | &lt;span class=\"ebit\"&gt;Min&lt;/span&gt;Uses the asset bounds’ min as reference point. | . | | &lt;span class=\"ebit\"&gt;Max&lt;/span&gt;Uses the asset bounds’ max as reference point. | . | | &lt;span class=\"ebit\"&gt;Pivot&lt;/span&gt;Uses the asset pivot as reference point, ignoring bounds. | . | | &lt;span class=\"ebit\"&gt;Custom&lt;/span&gt;Uses a lerped reference point between the asset bounds’ min &amp; max.*Value is expected to be in the range 0-1 but isn’t clamped.* | . To . You can use the following rules for To: . | : Justify To | |   | . | | &lt;span class=\"ebit\"&gt;Same&lt;/span&gt;Auto-selects the same justification as From, but computed against the point’ bounds. | . | | &lt;span class=\"ebit\"&gt;Center&lt;/span&gt;Uses the point bounds’ local center as reference point. | . | | &lt;span class=\"ebit\"&gt;Min&lt;/span&gt;Uses the point bounds’ min as reference point. | . | | &lt;span class=\"ebit\"&gt;Max&lt;/span&gt;Uses the point bounds’ max as reference point. | . | | &lt;span class=\"ebit\"&gt;Pivot&lt;/span&gt;Uses the point bounds’ pivot, ignoring bounds. | . | | &lt;span class=\"ebit\"&gt;Custom&lt;/span&gt;Uses a lerped reference point between the asset bounds’ min &amp; max.*Value is expected to be in the range 0-1 but isn’t clamped.* | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-spline-mesh.html#justification",
    "relUrl": "/doc-paths/paths-spline-mesh.html#justification"
  },"1320": {
    "doc": "Path Spline Mesh",
    "title": "Distribution Settings",
    "content": "Distribution drives how assets are selected within the collection &amp; assigned to points. | : Seed components | *Seed components lets you choose which seed source you want to combined to drive randomness.* | . | &lt;span class=\"ebit\"&gt;None&lt;/span&gt; | Will only use the point’ seed. | . | &lt;span class=\"ebit\"&gt;Local&lt;/span&gt; | The local user-set seed *see property below* | . | &lt;span class=\"ebit\"&gt;Settings&lt;/span&gt; | This node’ Settings seed. | . | &lt;span class=\"ebit\"&gt;Component&lt;/span&gt; | The parent PCG component’ seed. | . Distribution . | : Distribution | |   | . | &lt;span class=\"ebit\"&gt;Index&lt;/span&gt; | Index-based selection within the collection.*Enable a lot of additional options.* | . | &lt;span class=\"ebit\"&gt;Random&lt;/span&gt; | Plain old random selection. | . | &lt;span class=\"ebit\"&gt;Weighted Random&lt;/span&gt; | Weighted random selection, using entries’ Weight property. | . Index Settings . Index settings offer granular controls over what the Index actually is, and how it is used. | Index Setting | Description | . | Pick Mode | Choose in which ordered context the input index should be used. | . | Index Safety | Defines how the index value should be sanitized/post-processed. | . | Index Source | The source of the index value. | . | Remap Index to Collection Size | If enabled, the input index is first remapped to the size of the collection.**This enable the use of basically any input value and distribute the entierety of the collection over its range.***Note that this can have a noticeable performance impact since all input indices must be loaded in memory first to find the min/max range.* | . | Truncate Remap | Lets you choose how the remapped value (floating point) should be truncated to an integer. | . Index Safety . The index safety property controls how invalid/out of bounds input values are handled. | Safety method |   | . | Ignore | Invalid indices will be ignored and won’t be processed further. | . | Tile | Index is tiled (wrapped around) the context’ valid min/max range. | . | Clamp | Index is clamped between the context’ valid min/max range. | . | Yoyo | Index bounces back and forth between the context’ valid min/max range. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-spline-mesh.html#distribution-settings",
    "relUrl": "/doc-paths/paths-spline-mesh.html#distribution-settings"
  },"1321": {
    "doc": "Path Spline Mesh",
    "title": "Target Actor",
    "content": "Lets you pick which actor to attach the spline components to. Uses the PCG Component’ owner if the provided value is invalid. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-spline-mesh.html#target-actor",
    "relUrl": "/doc-paths/paths-spline-mesh.html#target-actor"
  },"1322": {
    "doc": "Path Spline Mesh",
    "title": "Additional Outputs",
    "content": "Lets you output the Weight of the selection to each node, using different post-processing methods. This can be very handy to identify “rare” spawns and preserve them during self-pruning operations. Tagging Components . Lets you pick which tags to add/forward to the output spline mesh components. | Property | Description | . | Grab Tags | Pick which tags from the asset collection should be grabbed and added to the component.See Entries &amp; Collections Tags. | . | Forward Input Data Tags | If enabled, tags associated with the currently processed dataset will be forwarded to the components. | . | More TBD |   | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-spline-mesh.html#additional-outputs",
    "relUrl": "/doc-paths/paths-spline-mesh.html#additional-outputs"
  },"1323": {
    "doc": "Path Spline Mesh",
    "title": "Path Spline Mesh",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-spline-mesh.html",
    "relUrl": "/doc-paths/paths-spline-mesh.html"
  },"1324": {
    "doc": "Spline to Path",
    "title": "Spline to Path",
    "content": "PCGEx | Spline to Path Converts a spline into a path. The Spline to Path node converts a raw spline into a 1:1 path. It is primarily designed to enable direct match of splines to spline meshes, without the overhead of using a spline sampler. SplinesInput splines to be converted to paths PathsOutput paths . Table of content . | Properties | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-spline-to-paths.html#spline-to-path",
    "relUrl": "/doc-paths/paths-spline-to-paths.html#spline-to-path"
  },"1325": {
    "doc": "Spline to Path",
    "title": "Properties",
    "content": ". DOC TDB . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-spline-to-paths.html#properties",
    "relUrl": "/doc-paths/paths-spline-to-paths.html#properties"
  },"1326": {
    "doc": "Spline to Path",
    "title": "Spline to Path",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-spline-to-paths.html",
    "relUrl": "/doc-paths/paths-spline-to-paths.html"
  },"1327": {
    "doc": "Subdivide",
    "title": "Subdivide",
    "content": "PCGEx | Path : Subdivide Create sub-points between existing points . The Subdivide Path nodes create new point between existing ones on a path. Define closure behavior, choose a subdivide method (Distance or Count), and specify an amount. Opt for blending options to refine subpoints further. PathsPaths which segments will be subdivided Point FiltersFilter which segments will be subdivided. PathsSubdivided paths . Table of content . | Properties . | Subdivide Method | Available Blending Modules | . | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-subdivide.html#subdivide",
    "relUrl": "/doc-paths/paths-subdivide.html#subdivide"
  },"1328": {
    "doc": "Subdivide",
    "title": "Properties",
    "content": ". The index safety property controls how invalid/out of bounds input values are handled. | Safety method |   | . | Ignore | Invalid indices will be ignored and won’t be processed further. | . | Tile | Index is tiled (wrapped around) the context’ valid min/max range. | . | Clamp | Index is clamped between the context’ valid min/max range. | . | Yoyo | Index bounces back and forth between the context’ valid min/max range. | . | : **Settings**| |   | . | Subdivide Method | Method to be used to define how many points are going to be inserted between existing ones.See [Subdivide Method](#subdivide-method) | . | Distance *or* Count | Based on the method, specifies how many points will be created. | . | **Blending** | This property lets you select which kind of blending you want to apply to the input paths.*See [Available Blending Modules](#available-blending-modules).* | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-subdivide.html#properties",
    "relUrl": "/doc-paths/paths-subdivide.html#properties"
  },"1329": {
    "doc": "Subdivide",
    "title": "Subdivide Method",
    "content": "| Method | Description | . | **Distance** | will create a new point every X units inside existing segments, as specified in the Distance property.*Smaller values will create more points, larger values will create less points.* | . | **Count** | will create X new points for each existing segments, as specified in the Count property. | . Distance will create more uniform looking subdivisions, while Count is more predictable. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-subdivide.html#subdivide-method",
    "relUrl": "/doc-paths/paths-subdivide.html#subdivide-method"
  },"1330": {
    "doc": "Subdivide",
    "title": "Available Blending Modules",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-subdivide.html#available-blending-modules",
    "relUrl": "/doc-paths/paths-subdivide.html#available-blending-modules"
  },"1331": {
    "doc": "Subdivide",
    "title": "Subdivide",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-subdivide.html",
    "relUrl": "/doc-paths/paths-subdivide.html"
  },"1332": {
    "doc": "Paths to Clusters",
    "title": "Paths to Clusters",
    "content": "PCGEx | Path : To Clusters Convert paths to clusters. The Paths to Clusters node transforms input paths into interconnected edge clusters by fusing points, while maintaining edge relationships, offering options similar to the Fuse Clusters node but using paths as input. PathsPaths which points will be checked for collinearity VtxEndpoints of the output Edges EdgesEdges associated with the output Vtxs . Related . | Working with Clusters | . Table of content . | Properties . | Point/Point Settings | Point/Edge Intersections | Edge/Edge Intersections | Blending | Meta Filters | Cluster Output Settings | . | . The Paths to cluster node converts input paths into interconnected clusters, turning points to Vtx and path segments to Edges. It offers the same advanced options Fuse Clusters does, but takes paths as input! . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-to-clusters.html#paths-to-clusters",
    "relUrl": "/doc-paths/paths-to-clusters.html#paths-to-clusters"
  },"1333": {
    "doc": "Paths to Clusters",
    "title": "Properties",
    "content": ". | Property | Description | . | Closed loop |   | . | Scope | The scope/selection of input data that are to be processed as closed paths or not.-All processes all input as selected below.-All but tagged inverts the scope based on tags.Default is, all paths are considered open, unless they are tagged with ClosedLoop. | . | Closed Loop | Whether to consider input data that are part of the scope as closed loop or not. | . | Comma Separated Tags | Tags to check for. Any match uses the inverse of the above value. | . | Fuse Paths | If enabled, emulates the behavior of Fuse Clusters. Otherwise, convert each path into its own \"linear\" cluster. | . The Path to Clusters node has a very specific order of operation: . | First collocated points are merged together (Point/Point), turned into Vtx, and Edges are created from what was previously path segments. | Points that are merged go through a first blending pass. | . | Next, if enabled, any Vtx that lie on a foreign Edge will split that edge into two. | A second blending pass is applied | . | Last, Edges are tested against each other, possibly creating new Vtx &amp; Edges in the process. | A third and last blending pass is applied, where each edges’ endpoints are blended into their resulting intersection point. | . | . While counter intuitive, it is much cheaper to leave self-intersection enabled. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-to-clusters.html#properties",
    "relUrl": "/doc-paths/paths-to-clusters.html#properties"
  },"1334": {
    "doc": "Paths to Clusters",
    "title": "Point/Point Settings",
    "content": ". | Property | Description | . | Fuse Details |   | . | Target Distance | Target Distance reference..Whether to consider point bounds, and if so, how. | . | Fuse Method | Lets you choose the method for finding neighbors &amp; collocated points | . | Voxel Grid Offset | Offset the voxelized grid by an constant amount.By default the center of the grid is 0,0,0, which may look like an undersirable offset. That offset can be manually compensated using this parameter. | . | Inline Insertion | Using the Octree fuse method is not deterministic by default.Enabling inlined insertion will make it so, at the cost of speed. | . | Source Distance | Source Distance reference.Whether to consider point bounds, and if so, how. | . | Tolerance |   | . | Component Wise Tolerance | If enabled, lets you set individual tolerance in world space for each X, Y and Z axis. | . | Tolerance | Uniform tolerance. This represent the radius within which elements will be considered in fuse range. | . | Tolerances | If enabled, represent individual axis’ radius within which elements will be considered in fuse range. | . | Local Tolerance | If enabled, lets your use per-point tolerance value.NOT IMPLEMENTED | . | Outputs |   | . | Compounded Attribute Namebool | If enabled, writes a bool flag. true if the point is the result of a merge, false if it’s the “original” one. | . | Compound Size Attribute Nameint32 | If enabled, writes the numbers of points that have been compounded/merged into it. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-to-clusters.html#pointpoint-settings",
    "relUrl": "/doc-paths/paths-to-clusters.html#pointpoint-settings"
  },"1335": {
    "doc": "Paths to Clusters",
    "title": "Point/Edge Intersections",
    "content": ". Point/Edge intersections search for Vtx that are lying on Edges they’re not connected to, and if such situation is found, the matching edge is split into new edges as to insert the Vtx there. The original Edge is removed and the Vtx then becomes connected to the old Edge’ endpoints through 2 new Edges. | Find Point Edge Intersections | If enabled, fusing will search for point/edge intersections. | . | Property | Description | . | Enable Self Intersection | If enabled, a cluster will test if intersection exists against itself. Otherwise, only check against other clusters. | . | Fuse Details |   | . | Source Distance | Source Distance reference.Whether to consider point bounds, and if so, how. | . | Component Wise Tolerance | If enabled, lets you set individual tolerance in world space for each X, Y and Z axis. | . | Tolerance | Uniform tolerance. This represent the radius within which elements will be considered in fuse range. | . | Tolerances | If enabled, represent individual axis’ radius within which elements will be considered in fuse range. | . | Local Tolerance | If enabled, lets your use per-point tolerance value.NOT IMPLEMENTED | . | Outputs |   | . | Snap on Edge | If enabled, snap the intersection position onto the original edge, as opposed to the reverse. | . | Intersector Attribute Namebool | If enabled, flag the points that intersected with an edge. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-to-clusters.html#pointedge-intersections",
    "relUrl": "/doc-paths/paths-to-clusters.html#pointedge-intersections"
  },"1336": {
    "doc": "Paths to Clusters",
    "title": "Edge/Edge Intersections",
    "content": ". Edge/Edge intersections search for Edges that intersect with others Edges. When found, a new Vtx is created at the intersection, creating 4 new edges in place of the previous 2. | Find Edge Edge Intersections | If enabled, fusing will search for edge/edge intersections. | . | Property | Description | . | Enable Self Intersection | If enabled, a cluster will test if intersection exists against itself. Otherwise, only check against other clusters. | . | Tolerance |   | . | Tolerance | Uniform tolerance. This represent the radius within which elements will be considered in fuse range. | . | Min Angle | If enabled, only considers edges to be intersecting if their angle is greater than the specified value. | . | Max Angle | If enabled, only considers edges to be intersecting if their angle is smaller than the specified value. | . | Outputs |   | . | Crossing Attribute Namebool | If enabled, flag the edges’ intersection point. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-to-clusters.html#edgeedge-intersections",
    "relUrl": "/doc-paths/paths-to-clusters.html#edgeedge-intersections"
  },"1337": {
    "doc": "Paths to Clusters",
    "title": "Blending",
    "content": "See Blending for properties details. | Default Points Blending is used for Point/Point &amp; Point/Edge | Default Edges Blending is used for Point/Edge and Edge/Edge | You may use the associated checkbox to override blending settings to get more control over the different processing stages. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-to-clusters.html#blending",
    "relUrl": "/doc-paths/paths-to-clusters.html#blending"
  },"1338": {
    "doc": "Paths to Clusters",
    "title": "Meta Filters",
    "content": "Meta filters lets you choose separately which attributes &amp; tags should carry over from their original data to the new output. “Carry over” settings lets you pick-and-choose which attributes &amp; tags carry over to the new data. | Property | Description | . | Preserve Attributes Default Value | If enabled, the node will attempt to create attributes on the data in a way that preserve the original, underlying default value of the attribute.This can be critical in order to identify which data originally belonged to which, as well as properly initializing flags to a desirable default. | . | Attributes | Lets you pick and choose which attributes to keep or dismiss. | . | Tags | Lets you pick and choose which attributes to keep or dismiss. | . Both Attributes &amp; Tags share the same string-based filters. Note that the filters look for a single valid match amongst the list; you cannot create and/or conditions. Filter Details . | Property | Description | . | Filter Mode | Chooses how the filter operates.- All let everything pass.- Exclude filters out the result of the filter.- Include only allows the items that pass the filters. | . | Matches | Lets you define a list of checks pairs: a string value, and a Match Mode. | . | Comma Separated Names | Easy to override, lets you specify a list of comma-separated names.The only caveat is that you can only pick a unique match mode used for each entry. | . | Comma Separated Names Filter | Which filter will be used along the Comma Separated Names. | . | Preserve PCGEx Data | Most of the time you’ll want to leave it to its default value. It ensures PCGEx/ prefixed data are not captured by the filter. | . Filter Modes . | Mode | Description | . | Equals | Checks for strict equality of the filtered value and the associated string. | . | Contains | Checks if the filtered value contains the associated string. | . | Starts With | Checks if the filtered value is prefixed with the associated string. | . | Ends With | Checks if the filtered value is suffixed with the associated string. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-to-clusters.html#meta-filters",
    "relUrl": "/doc-paths/paths-to-clusters.html#meta-filters"
  },"1339": {
    "doc": "Paths to Clusters",
    "title": "Cluster Output Settings",
    "content": "See Working with Clusters - Cluster Output Settings. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-to-clusters.html#cluster-output-settings",
    "relUrl": "/doc-paths/paths-to-clusters.html#cluster-output-settings"
  },"1340": {
    "doc": "Paths to Clusters",
    "title": "Paths to Clusters",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-to-clusters.html",
    "relUrl": "/doc-paths/paths-to-clusters.html"
  },"1341": {
    "doc": "Write Paths Properties",
    "title": "Write Paths Properties",
    "content": "PCGEx | Path : Properties Compute extra path informations . The Write Path Properties node enhances path data by computing both point-level details (e.g., distances, normals, and directions) and path-level attributes like averaged direction, convexity, centroids, and additional spatial insights. PathsPaths to compute information from PathsPaths with extra information . Table of content . | Properties | Outputs . | Output - Path | Output - Points | Tagging | . | . The Write Path Properties node outputs a variety of useful points data, as well as path-level data; like direction between path neighboring points, averaged path direction, whether a path is concave or convex; that kind of stuff. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-write-properties.html#write-paths-properties",
    "relUrl": "/doc-paths/paths-write-properties.html#write-paths-properties"
  },"1342": {
    "doc": "Write Paths Properties",
    "title": "Properties",
    "content": ". | Property | Description | . | Closed loop |   | . | Scope | The scope/selection of input data that are to be processed as closed paths or not.-All processes all input as selected below.-All but tagged inverts the scope based on tags.Default is, all paths are considered open, unless they are tagged with ClosedLoop. | . | Closed Loop | Whether to consider input data that are part of the scope as closed loop or not. | . | Comma Separated Tags | Tags to check for. Any match uses the inverse of the above value. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-write-properties.html#properties",
    "relUrl": "/doc-paths/paths-write-properties.html#properties"
  },"1343": {
    "doc": "Write Paths Properties",
    "title": "Outputs",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-write-properties.html#outputs",
    "relUrl": "/doc-paths/paths-write-properties.html#outputs"
  },"1344": {
    "doc": "Write Paths Properties",
    "title": "Output - Path",
    "content": ". | Output | Description | . | &lt;span class=\"eout\"&gt;Path Length&lt;/span&gt;double | TBD | . | &lt;span class=\"eout\"&gt;Path Direction&lt;/span&gt;FVector | TBD | . | &lt;span class=\"eout\"&gt;Path Centroid&lt;/span&gt;FVector | TBD | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-write-properties.html#output---path",
    "relUrl": "/doc-paths/paths-write-properties.html#output---path"
  },"1345": {
    "doc": "Write Paths Properties",
    "title": "Output - Points",
    "content": ". | Output | Description | . | Up Vector Type | Type of Up Vector source. Either a Constant or a per-point Attribute. | . | Up Vector *(Constant or Attribute)* | Up vector used for computing spatial data. | . | Average Normals | Whether normals should be averaged or not. | . | &lt;span class=\"eout\"&gt;Dot&lt;/span&gt;double | TBD | . | &lt;span class=\"eout\"&gt;Angle&lt;/span&gt;double | TBD | . | └─ Range | TBD | . | &lt;span class=\"eout\"&gt;Distance To Next&lt;/span&gt;FVector | TBD | . | &lt;span class=\"eout\"&gt;Distance To Prev&lt;/span&gt;FVector | TBD | . | &lt;span class=\"eout\"&gt;Distance To Start&lt;/span&gt;FVector | TBD | . | &lt;span class=\"eout\"&gt;Distance To End&lt;/span&gt;FVector | TBD | . | &lt;span class=\"eout\"&gt;Point Time&lt;/span&gt;FVector | TBD | . | &lt;span class=\"eout\"&gt;Point Normal&lt;/span&gt;FVector | TBD | . | &lt;span class=\"eout\"&gt;Point Binormal&lt;/span&gt;FVector | TBD | . | &lt;span class=\"eout\"&gt;Direction To Next&lt;/span&gt;FVector | TBD | . | &lt;span class=\"eout\"&gt;Direction To Prev&lt;/span&gt;FVector | TBD | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-write-properties.html#output---points",
    "relUrl": "/doc-paths/paths-write-properties.html#output---points"
  },"1346": {
    "doc": "Write Paths Properties",
    "title": "Tagging",
    "content": ". | Tag | Description | . | &lt;span class=\"etag\"&gt;Concave Tag&lt;/span&gt; | If enabled, add the specified tag to the output data **if the path is concave**. | . | &lt;span class=\"etag\"&gt;Convex Tag&lt;/span&gt; | If enabled, add the specified tag to the output data **if the path is convex**. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-write-properties.html#tagging",
    "relUrl": "/doc-paths/paths-write-properties.html#tagging"
  },"1347": {
    "doc": "Write Paths Properties",
    "title": "Write Paths Properties",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-write-properties.html",
    "relUrl": "/doc-paths/paths-write-properties.html"
  },"1348": {
    "doc": "PCGEx Nodes",
    "title": "PCGEx Nodes",
    "content": "Shared concepts . A summary of the informations &amp; parameters available on every PCGEx node. Almost every node in the PCGEx inherit from the same point processor, and as such they have some shared capabilities. PCGEx has a focus on performance and multithreading – very few nodes are actively computing anything on the main thread, and instead the bulk of the tasks is handled asynchronously; and parallelized whenever possible. This helps keeping the editor relatively smooth when performing heavy tasks. Common Tweaks . | Performance . | Do Async Processing | Chunk Size | Cache Result | Flatten Output | . | Input Pruning &amp; De-duping . | De-duplication | Pruning | . | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-general/pcgex-node.html#pcgex-nodes",
    "relUrl": "/doc-general/pcgex-node.html#pcgex-nodes"
  },"1349": {
    "doc": "PCGEx Nodes",
    "title": "Performance",
    "content": ". Side note that most PCGEx nodes are greedy, and contrary to vanilla nodes, they process all inputs in parallel instead of one after another. Most of the time it’s a non-issue, but may be noticeable if you have a lot of very large datasets plugged into the same node. Do Async Processing . Checked by default, you can toggle it off to force synchronous/unparallelized execution of the code. This is a very legacy option, best leave it to true. Chunk Size . The chunk size usually represents the number of point a node will process in a single parallel batch. There is no ideal value: too small and you loose the gain of parallelization, too high and you’re just hogging thread ressources. Ultimately, it depends on your specific setup. A value of -1 fallbacks to that specific’ node default value under the hood. Unreal PCG plugin recommend a minimum batch size of 256, which is the default value I’m using for most of the nodes. Heavier operations can go as low as 32. Cache Result . Under the hood, all PCG node come with the ability to cache their result; but the system is designed so it’s a compile-time choice, not an editor-time one. I exposed the ability to cache on-demand at the price of some harmless asserts, because once you’re done iterating on certain settings, it’s worth caching the results. Be aware that the cache is easily corrupted, and sometime leads to missing points or data; it’s still a small price to pay when you’re working iteratively with hundreds of thousands points. Flatten Output . Flatten the output of this node. On 5.3 this is a very expensive operation, it’s better in 5.4 and should be even faster in 5.5. Flattening ensure all inherited attribute values are copied to the output, and metadata parenting/inheritance is forfeited in the process. This is a required step to ensure attribute values are properly saved to PCG Data Assets! . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-general/pcgex-node.html#performance",
    "relUrl": "/doc-general/pcgex-node.html#performance"
  },"1350": {
    "doc": "PCGEx Nodes",
    "title": "Input Pruning &amp; De-duping",
    "content": "De-duplication . Datasets are de-duplicated by design in PCGEx – this means that if you plug the exact same data (as in same memory pointer) it will be only processed once – even if it has different tags. Pruning . Datasets that are empty and contains no points will be ignored, and won’t be forwarded to the ouput pins. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-general/pcgex-node.html#input-pruning--de-duping",
    "relUrl": "/doc-general/pcgex-node.html#input-pruning--de-duping"
  },"1351": {
    "doc": "PCGEx Nodes",
    "title": "PCGEx Nodes",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-general/pcgex-node.html",
    "relUrl": "/doc-general/pcgex-node.html"
  },"1352": {
    "doc": "🝓 Goal from Attribute",
    "title": "🝓 Goal from Attribute",
    "content": "Match seed with goals picked at an attribute-specified index. The Goal from Attribute picker … . Table of content . | Properties . | Index Safety | . | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/goal-pickers/picker-attribute.html#goal-from-attribute",
    "relUrl": "/doc-pathfinding/goal-pickers/picker-attribute.html#goal-from-attribute"
  },"1353": {
    "doc": "🝓 Goal from Attribute",
    "title": "Properties",
    "content": ". | Property | Description | . | :**Settings**| |   | . | Goal Count | Either a Single Goal or Multiple Goals | . | Attribute | If Single Goal is specified, lets you specify a property or attribute which value will be used as an index within the input goals. | . | Attributes | If Multiple Goal is specified, lets you specify a list of property or attribute which values will be used as an index within the input goals. | . | Index Safety | Failsafe method if the picked Goal index is out of bounds.*See [Index Safety](#index-safety)* | . When using Multiple Goal, each seed will attempt to create one connection per entry in the array. The attribute is fetched on the Seed input. Index Safety . The index safety property controls how invalid/out of bounds input values are handled. | Safety method |   | . | Ignore | Invalid indices will be ignored and won’t be processed further. | . | Tile | Index is tiled (wrapped around) the context’ valid min/max range. | . | Clamp | Index is clamped between the context’ valid min/max range. | . | Yoyo | Index bounces back and forth between the context’ valid min/max range. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/goal-pickers/picker-attribute.html#properties",
    "relUrl": "/doc-pathfinding/goal-pickers/picker-attribute.html#properties"
  },"1354": {
    "doc": "🝓 Goal from Attribute",
    "title": "🝓 Goal from Attribute",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/goal-pickers/picker-attribute.html",
    "relUrl": "/doc-pathfinding/goal-pickers/picker-attribute.html"
  },"1355": {
    "doc": "🝓 Default",
    "title": "🝓 Default",
    "content": "Match seeds to goals at the same index. The Default picker … . Table of content . | Properties . | Index Safety | . | . The default goal picker attempts to match input Seeds and Goals in a 1:1 fashion. Seed index 0 will be matched to goal index 0, and so on. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/goal-pickers/picker-default.html#default",
    "relUrl": "/doc-pathfinding/goal-pickers/picker-default.html#default"
  },"1356": {
    "doc": "🝓 Default",
    "title": "Properties",
    "content": ". | Property | Description | . | :**Settings**| |   | . | Index Safety | Failsafe method if there are more Seeds than there are Goals.Note that extra Goals are simply ignored.*See [Index Safety](#index-safety)* | . Index Safety . The index safety property controls how invalid/out of bounds input values are handled. | Safety method |   | . | Ignore | Invalid indices will be ignored and won’t be processed further. | . | Tile | Index is tiled (wrapped around) the context’ valid min/max range. | . | Clamp | Index is clamped between the context’ valid min/max range. | . | Yoyo | Index bounces back and forth between the context’ valid min/max range. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/goal-pickers/picker-default.html#properties",
    "relUrl": "/doc-pathfinding/goal-pickers/picker-default.html#properties"
  },"1357": {
    "doc": "🝓 Default",
    "title": "🝓 Default",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/goal-pickers/picker-default.html",
    "relUrl": "/doc-pathfinding/goal-pickers/picker-default.html"
  },"1358": {
    "doc": "🝓 Random",
    "title": "🝓 Random",
    "content": "Match seeds to goals at a random index. The Random picker … . Table of content . | Properties . | Goal Count . | Single | Multiple Fixed | Multiple Random | Index Safety | . | . | . The random goal picker match each Seed with one or multiple Goals. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/goal-pickers/picker-random.html#random",
    "relUrl": "/doc-pathfinding/goal-pickers/picker-random.html#random"
  },"1359": {
    "doc": "🝓 Random",
    "title": "Properties",
    "content": ". | Property | Description | . | :**Settings**| |   | . | Goal Count | How many random goals each seed should connect to.*See [Index Safety](#index-safety)* | . | Num Goals | When specifying multiple goals, this is the maximum number of goals to connect each seeds to. | . | Index Safety | Failsafe method if the picked Goal index is out of bounds.*See [Index Safety](#index-safety)* | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/goal-pickers/picker-random.html#properties",
    "relUrl": "/doc-pathfinding/goal-pickers/picker-random.html#properties"
  },"1360": {
    "doc": "🝓 Random",
    "title": "Goal Count",
    "content": "There are three different methods available: . | Single | Random | Fixed | . Single . Single will, well, connect to a single random goal. Multiple Fixed . Random will connect to a fixed number of random goals, specified in Num Goals. Multiple Random . Random will connect to a random number of random goals. The number of connection will be between 0 and Num Goals . Index Safety . The index safety property controls how invalid/out of bounds input values are handled. | Safety method |   | . | Ignore | Invalid indices will be ignored and won’t be processed further. | . | Tile | Index is tiled (wrapped around) the context’ valid min/max range. | . | Clamp | Index is clamped between the context’ valid min/max range. | . | Yoyo | Index bounces back and forth between the context’ valid min/max range. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/goal-pickers/picker-random.html#goal-count",
    "relUrl": "/doc-pathfinding/goal-pickers/picker-random.html#goal-count"
  },"1361": {
    "doc": "🝓 Random",
    "title": "🝓 Random",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/goal-pickers/picker-random.html",
    "relUrl": "/doc-pathfinding/goal-pickers/picker-random.html"
  },"1362": {
    "doc": "Plugin Settings",
    "title": "Plugin Settings",
    "content": "PCGEx’ Project Settings . An overview of the plugin global settings that can be tweaked through the project settings panel. Plugin settings are used globally by all nodes. At the time of writing, it is not possible to do per-platform override, althought this will be a welcome addition in the future. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-general/plugin-settings.html#plugin-settings",
    "relUrl": "/doc-general/plugin-settings.html#plugin-settings"
  },"1363": {
    "doc": "Plugin Settings",
    "title": "Performance",
    "content": "Performance-related settings. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-general/plugin-settings.html#performance",
    "relUrl": "/doc-general/plugin-settings.html#performance"
  },"1364": {
    "doc": "Plugin Settings",
    "title": "Cluster",
    "content": ". | Property | Description | . | Small Cluster Size | How many points should be considered a \"small cluster\". Small clusters are batched together during processing, as opposed to have a dedicated thread. | . | Cluster Default Batch Chunk Size | How many cluster points should be processed in a single parallel loop chunk. | . | Cache Cluster | If enabled, PCGEx will cache built cluster data. This offers tremendous performance gains at the expense of a bit of extra memory. | . | Default Build and Cache Clusters | Default value for Build and Cache Clusters when creating a new cluster node.*Can be overriden on a per-node basis.* | . | Default Cache Expanded Clusters | Default value for Cache Expanded Clusters when creating a new cluster node.*Can be overriden on a per-node basis.* | . Smaller values will lead to more thread hoarding, larger values will use less space at the expense of speed. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-general/plugin-settings.html#cluster",
    "relUrl": "/doc-general/plugin-settings.html#cluster"
  },"1365": {
    "doc": "Plugin Settings",
    "title": "Points",
    "content": ". | Property | Description | . | Small Points Size | How many points should be considered a \"small number of points\". Small datasets are batched together during processing, as opposed to have a dedicated thread. | . | Points Default Batch Chunk Size | How many points should be processed in a single parallel loop chunk. | . | Cache Cluster | If enabled, PCGEx will cache built cluster data. This offers tremendous performance gains at the expense of a bit of extra memory. | . | Default Build and Cache Clusters | Default value for Build and Cache Clusters when creating a new PCGEx node.*Can be overriden on a per-node basis.* | . | Default Cache Expanded Clusters | Default value for Cache Expanded Clusters when creating a new PCGEx node.*Can be overriden on a per-node basis.* | . Smaller values will lead to more thread hoarding, larger values will use less space at the expense of speed. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-general/plugin-settings.html#points",
    "relUrl": "/doc-general/plugin-settings.html#points"
  },"1366": {
    "doc": "Plugin Settings",
    "title": "Async",
    "content": ". | Property | Description | . | Default Work Priority | Default falut for thread Work Priority when creating new PCGEx node.*Can be overriden on a per-node basis.* | . Work priority should not be changed trivially – but rather leverage that setting in complex graphs where you have a lot of PCGEx nodes blocking work at the same level; putting a high priority on the worst offenders will give you a teeny tiny bit of control over which part of the graph are processed first, resulting in micro performance improvement and overall smaller wall times. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-general/plugin-settings.html#async",
    "relUrl": "/doc-general/plugin-settings.html#async"
  },"1367": {
    "doc": "Plugin Settings",
    "title": "Blending",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-general/plugin-settings.html#blending",
    "relUrl": "/doc-general/plugin-settings.html#blending"
  },"1368": {
    "doc": "Plugin Settings",
    "title": "Attribute Types Defaults",
    "content": "Default blending values for attributes based on attribute type. These are mostly used with node that allow to batch-blend All attributes; which can anyway be finely controlled. Using Default will use the node’ default blending mode. | Property | Description | . | **Simple Types** | |   | . | Boolean |   | . | Float |   | . | Double |   | . | Integer 32 |   | . | Integer 64 |   | . | **Vector Types** | |   | . | Vector2 |   | . | Vector |   | . | Vector4 |   | . | **\"Complex\" Types** | |   | . | Quaternion |   | . | Transform |   | . | Rotator |   | . | **\"Text\" Types** | |   | . | String |   | . | Name |   | . | **Soft Path Types** | |   | . | SoftObjectPath |   | . | SoftClassPath |   | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-general/plugin-settings.html#attribute-types-defaults",
    "relUrl": "/doc-general/plugin-settings.html#attribute-types-defaults"
  },"1369": {
    "doc": "Plugin Settings",
    "title": "Node Colors",
    "content": "Customize PCGEx nodes colors by categories. These may require a relaunch for the colors to be visibly applied, sometimes just closing/re-opening the graph editor works. | Property | Description | . | Node Color Debug | Default Hex Linear : FF0000FF | . | Node Color Misc | Default Hex Linear : FF9748FF | . | Node Color Misc Write | Default Hex Linear : FF5100FF | . | Node Color Misc Add | Default Hex Linear : 00FF4CFF | . | Node Color Misc Remove | Default Hex Linear : 0D0303FF | . | Node Color Sampler | Default Hex Linear : FF0026FF | . | Node Color Sampler Neighbor | Default Hex Linear : 720011FF | . | Node Color Cluster Gen | Default Hex Linear : 0051FFFF | . | Node Color Cluster | Default Hex Linear : 009DFFFF | . | Node Color Probe | Default Hex Linear : 2CAEFFFF | . | Node Color Socket State | Default Hex Linear : 004068FF | . | Node Color Pathfinding | Default Hex Linear : 00FFABFF | . | Node Color Heuristics | Default Hex Linear : 3E935FFF | . | Node Color Heuristics Att | Default Hex Linear : 7F833FFF | . | Node Color Cluster Filter | Default Hex Linear : 5ABEA5FF | . | Node Color Edge | Default Hex Linear : 00ABC2FF | . | Node Color Cluster State | Default Hex Linear : 004068FF | . | Node Color Path | Default Hex Linear : 003D29FF | . | Node Color Filter Hub | Default Hex Linear : 3AFF00FF | . | Node Color Filter | Default Hex Linear : 50BE2FFF | . | Node Color Primitives | Default Hex Linear : 0011FFFF | . | Node Color Transform | Default Hex Linear : FF002FFF | . Note that there’s a MASSIVE DISCREPANCY between the color you pick and how the node renders it, so starting to tweak those is one hell of a rabbit hole. To do live color tests, you can drop a Flush Debug node anywhere in a graph, it has an exposed Custom Color property to let you set its own custom color – comes in very handy! . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-general/plugin-settings.html#node-colors",
    "relUrl": "/doc-general/plugin-settings.html#node-colors"
  },"1370": {
    "doc": "Plugin Settings",
    "title": "Plugin Settings",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-general/plugin-settings.html",
    "relUrl": "/doc-general/plugin-settings.html"
  },"1371": {
    "doc": "🝆 Anisotropic",
    "title": "🝆 Anisotropic",
    "content": "PCGEx | Probe : Anisotropic Find connections in 16 directions . The Anisotropic probe … . ProbeA single probe, to be used with the 'Connect Points' node . Related . | Connect Points | . Table of content . | Properties | . An anisotropic probe is a preset to find connection in 16 different directions over the X &amp; Y axis. Anisotropic pathfinding is a popular approach to finding high-level plots, it made sense to have an hardcoded version as opposed to hand crafting 16 directional probes to the same effect . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/connect-points/probe-anisotropic.html#anisotropic",
    "relUrl": "/doc-clusters/connect-points/probe-anisotropic.html#anisotropic"
  },"1372": {
    "doc": "🝆 Anisotropic",
    "title": "Properties",
    "content": "| Property | Description | . | :**Settings** : |   | . | Transform Direction | If enabled, the direction of the probe will be adjusted by the current probing point’ transform.*If disabled, the direction is in world space.* | . | : **Search Radius** : |   | . | Search Radius Source | The type of value used for this probe’ search radius; either a Constant value or fetched from anAttribute | . | Search Radius *(Constant or Attribute)* | Radius of the probe.*Dynamic radiuses can be super expensive if they are different for each probe: search will use the greatest radius to sample to octree for this point.* | . Contrary to 🝆 Direction, the anisotropic probe will always favor alignment over distance. Because of that, it often yields more ‘canon’ results with grid-aligned points. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/connect-points/probe-anisotropic.html#properties",
    "relUrl": "/doc-clusters/connect-points/probe-anisotropic.html#properties"
  },"1373": {
    "doc": "🝆 Anisotropic",
    "title": "🝆 Anisotropic",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/connect-points/probe-anisotropic.html",
    "relUrl": "/doc-clusters/connect-points/probe-anisotropic.html"
  },"1374": {
    "doc": "🝆 Closest",
    "title": "🝆 Closest",
    "content": "PCGEx | Probe : Closests Connects to the closest point within a given radius . The Closest probe … . ProbeA single probe, to be used with the 'Connect Points' node . Related . | Connect Points | . Table of content . | Properties | . This probes creates unique connections to the closest points within a radius, up to a maximum number. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/connect-points/probe-closest.html#closest",
    "relUrl": "/doc-clusters/connect-points/probe-closest.html#closest"
  },"1375": {
    "doc": "🝆 Closest",
    "title": "Properties",
    "content": "| Property | Description | . | : **Max Connections** : |   | . | Max Connection Source | If enabled, the direction of the probe will be adjusted by the current probing point’ transform.*If disabled, the direction is in world space.* | . | Max Connection Constant | Fixed maximum connections for every point. | . | Max Connection Attribute | Per-point attribute value maximum. | . | : **Coincidence** : |   | . | Coincidence Prevention Tolerance | If enabled, prevents multiple connections from happening in the same direction, within that tolerance.*This avoids the creation of overlapping edges when testing in near-collinear situations.* | . Note that connections skipped due to coincidence don’t count toward the maximum. | : **Search Radius** : |   | . | Search Radius Source | The type of value used for this probe’ search radius; either a Constant value or fetched from anAttribute | . | Search Radius *(Constant or Attribute)* | Radius of the probe.*Dynamic radiuses can be super expensive if they are different for each probe: search will use the greatest radius to sample to octree for this point.* | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/connect-points/probe-closest.html#properties",
    "relUrl": "/doc-clusters/connect-points/probe-closest.html#properties"
  },"1376": {
    "doc": "🝆 Closest",
    "title": "🝆 Closest",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/connect-points/probe-closest.html",
    "relUrl": "/doc-clusters/connect-points/probe-closest.html"
  },"1377": {
    "doc": "🝆 Direction",
    "title": "🝆 Direction",
    "content": "PCGEx | Probe : Direction Connects to the closest point in a given direction . The Direction probe … . ProbeA single probe, to be used with the 'Connect Points' node . Related . | Connect Points | . Table of content . | Properties . | Favor distance vs alignment | Angles | . | . This probes creates a single connections to another point in a specific direction, within an angular tolerance. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/connect-points/probe-direction.html#direction",
    "relUrl": "/doc-clusters/connect-points/probe-direction.html#direction"
  },"1378": {
    "doc": "🝆 Direction",
    "title": "Properties",
    "content": "| Property | Description | . | : **Angle settings** : |   | . | Use Component Wise Angle | If enabled, the angle is checks Yaw, roll and pitch individually, as opposed to a cone.*For obvious reasons, using component-wise check is more expensive.* | . | Max Angle | Fixed maximum angle. | . | Max Angles | Per-component maximum angle values. | . | : **Direction settings** : |   | . | Direction Source | The type of value used for this probe’ direction; either a Constant value or fetched from anAttribute | . | Direction *(Constant or Attribute)* | Direction of the probe, in world space. | . | Transform Direction | If enabled, the probe direction will be transformed by the probed point’ transform.*This is effectively turning world space direction to point-local space ones.* | . | : **Other Settings** : |   | . | Favor | Which metric should be favored when checking direction.*See more below* | . | Do Chained Processing | *Ignore this, it’s part of a greater, very situational optimization trick that needs its own doc.* | . | : **Search Radius** : |   | . | Search Radius Source | The type of value used for this probe’ search radius; either a Constant value or fetched from anAttribute | . | Search Radius *(Constant or Attribute)* | Radius of the probe.*Dynamic radiuses can be super expensive if they are different for each probe: search will use the greatest radius to sample to octree for this point.* | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/connect-points/probe-direction.html#properties",
    "relUrl": "/doc-clusters/connect-points/probe-direction.html#properties"
  },"1379": {
    "doc": "🝆 Direction",
    "title": "Favor distance vs alignment",
    "content": "| : Favor | |   | . | | **Closest Position**Favors closer points over better angular alignment. | . | | **Best Alignment**Favors better aligned points over closer ones. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/connect-points/probe-direction.html#favor-distance-vs-alignment",
    "relUrl": "/doc-clusters/connect-points/probe-direction.html#favor-distance-vs-alignment"
  },"1380": {
    "doc": "🝆 Direction",
    "title": "Angles",
    "content": ". Angles are checked using a Dot Product operation, meaning the angle in degree is unsigned, and goes both sides of the direction. This means you may find youself wanting to use halved metrics – i.e 45deg to get an absolute 90deg cone. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/connect-points/probe-direction.html#angles",
    "relUrl": "/doc-clusters/connect-points/probe-direction.html#angles"
  },"1381": {
    "doc": "🝆 Direction",
    "title": "🝆 Direction",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/connect-points/probe-direction.html",
    "relUrl": "/doc-clusters/connect-points/probe-direction.html"
  },"1382": {
    "doc": "🝆 Index",
    "title": "🝆 Index",
    "content": "PCGEx | Probe : Index Connects to a point at a given index . The Index probe … . ProbeA single probe, to be used with the 'Connect Points' node . Related . | Connect Points | . Table of content . | Properties . | Mode | Index Safety | . | . This probes creates a single connections to another point at a given index. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/connect-points/probe-index.html#index",
    "relUrl": "/doc-clusters/connect-points/probe-index.html#index"
  },"1383": {
    "doc": "🝆 Index",
    "title": "Properties",
    "content": "| Property | Description | . | Mode | How the node is to interpret the target index value. | . | Index Safety | *Index safety is a recurring mechanism in PCGEx, see below for more infos.* | . | : **Target Index Settings** : |   | . | Target Index | The type of value used for this probe’ index source; either a Constant value or fetched from anAttribute | . | Target *(Constant or Attribute)* | Index pick or constant offset depending on the selected Mode. | . Mode . | : Mode | Description | . | Target | Use the target index value as a raw index to connect to. | . | One-way Offset | Use the target index value as an offset to the currently probed point’ index. | . | Two-way Offset | Use the target index value as an offset to the currently probed point’ index; and creates a second connection but this time using the **target index value multiplied by -1.** | . Index Safety . The index safety property controls how invalid/out of bounds input values are handled. | Safety method |   | . | Ignore | Invalid indices will be ignored and won’t be processed further. | . | Tile | Index is tiled (wrapped around) the context’ valid min/max range. | . | Clamp | Index is clamped between the context’ valid min/max range. | . | Yoyo | Index bounces back and forth between the context’ valid min/max range. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/connect-points/probe-index.html#properties",
    "relUrl": "/doc-clusters/connect-points/probe-index.html#properties"
  },"1384": {
    "doc": "🝆 Index",
    "title": "🝆 Index",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/connect-points/probe-index.html",
    "relUrl": "/doc-clusters/connect-points/probe-index.html"
  },"1385": {
    "doc": "🝔 Refine by Filter",
    "title": "🝔 Refine by Filter",
    "content": "Keeps edges that pass the input filters, or vice-versa. Related . | Refine | | . Table of content . | Edge-specific filters | Point Filters | . This refinement is amongst the most straightforward to use, as it keeps edges that pass the Refine’ input filters. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-by-filter.html#refine-by-filter",
    "relUrl": "/doc-clusters/edges-refine/refine-by-filter.html#refine-by-filter"
  },"1386": {
    "doc": "🝔 Refine by Filter",
    "title": "Edge-specific filters",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-by-filter.html#edge-specific-filters",
    "relUrl": "/doc-clusters/edges-refine/refine-by-filter.html#edge-specific-filters"
  },"1387": {
    "doc": "🝔 Refine by Filter",
    "title": "🝖 Edge Direction (Edge)",
    "content": "Check if the edge direction is within a given range. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-by-filter.html#edge-direction-edge",
    "relUrl": "/doc-clusters/edges-refine/refine-by-filter.html#edge-direction-edge"
  },"1388": {
    "doc": "🝔 Refine by Filter",
    "title": "🝖 Endpoints Compare (Numeric)",
    "content": "Compare the value of an attribute on each of the edge endpoint. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-by-filter.html#endpoints-compare-numeric",
    "relUrl": "/doc-clusters/edges-refine/refine-by-filter.html#endpoints-compare-numeric"
  },"1389": {
    "doc": "🝔 Refine by Filter",
    "title": "🝖 Endpoints Compare (String)",
    "content": "Compare the value of an attribute on each of the edge endpoint. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-by-filter.html#endpoints-compare-string",
    "relUrl": "/doc-clusters/edges-refine/refine-by-filter.html#endpoints-compare-string"
  },"1390": {
    "doc": "🝔 Refine by Filter",
    "title": "🝖 Neighbors Count (Edge)",
    "content": "Check a node’ neighbors count . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-by-filter.html#neighbors-count-edge",
    "relUrl": "/doc-clusters/edges-refine/refine-by-filter.html#neighbors-count-edge"
  },"1391": {
    "doc": "🝔 Refine by Filter",
    "title": "Point Filters",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-by-filter.html#point-filters",
    "relUrl": "/doc-clusters/edges-refine/refine-by-filter.html#point-filters"
  },"1392": {
    "doc": "🝔 Refine by Filter",
    "title": "🝖 AND / OR (Group)",
    "content": "Group multiple filters to set up complex AND/OR branches. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-by-filter.html#and--or-group",
    "relUrl": "/doc-clusters/edges-refine/refine-by-filter.html#and--or-group"
  },"1393": {
    "doc": "🝔 Refine by Filter",
    "title": "🝖 Adjacency (Node)",
    "content": "Check if adjacent node meet specific conditions . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-by-filter.html#adjacency-node",
    "relUrl": "/doc-clusters/edges-refine/refine-by-filter.html#adjacency-node"
  },"1394": {
    "doc": "🝔 Refine by Filter",
    "title": "🝖 Compare Nearest (Numeric)",
    "content": "The Numeric Comparison Filter compares the arithmetic value of an attribute against the closest point from another dataset. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-by-filter.html#compare-nearest-numeric",
    "relUrl": "/doc-clusters/edges-refine/refine-by-filter.html#compare-nearest-numeric"
  },"1395": {
    "doc": "🝔 Refine by Filter",
    "title": "🝖 Compare (Numeric)",
    "content": "The Numeric Comparison Filter compares the arithmetic value of two attributes . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-by-filter.html#compare-numeric",
    "relUrl": "/doc-clusters/edges-refine/refine-by-filter.html#compare-numeric"
  },"1396": {
    "doc": "🝔 Refine by Filter",
    "title": "🝖 Edge Direction (Node)",
    "content": "Check if adjacent node meet specific conditions . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-by-filter.html#edge-direction-node",
    "relUrl": "/doc-clusters/edges-refine/refine-by-filter.html#edge-direction-node"
  },"1397": {
    "doc": "🝔 Refine by Filter",
    "title": "🝖 Compare (String)",
    "content": "Compares two string-like attributes against each other. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-by-filter.html#compare-string",
    "relUrl": "/doc-clusters/edges-refine/refine-by-filter.html#compare-string"
  },"1398": {
    "doc": "🝔 Refine by Filter",
    "title": "🝖 Neighbors Count (Node)",
    "content": "Check a node’ neighbors count . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-by-filter.html#neighbors-count-node",
    "relUrl": "/doc-clusters/edges-refine/refine-by-filter.html#neighbors-count-node"
  },"1399": {
    "doc": "🝔 Refine by Filter",
    "title": "🝖 Bool",
    "content": "Performs a simple boolean comparison, converting numeric values to true (&gt; 0) or false (&lt;= 0). ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-by-filter.html#bool",
    "relUrl": "/doc-clusters/edges-refine/refine-by-filter.html#bool"
  },"1400": {
    "doc": "🝔 Refine by Filter",
    "title": "🝖 Within Range",
    "content": "Checks if an attribute value falls within a specified range. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-by-filter.html#within-range",
    "relUrl": "/doc-clusters/edges-refine/refine-by-filter.html#within-range"
  },"1401": {
    "doc": "🝔 Refine by Filter",
    "title": "🝖 Dot Product",
    "content": "Compares the dot product of two direction vectors against a third value. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-by-filter.html#dot-product",
    "relUrl": "/doc-clusters/edges-refine/refine-by-filter.html#dot-product"
  },"1402": {
    "doc": "🝔 Refine by Filter",
    "title": "🝖 Modulo Comparison",
    "content": "Compares the modulo of two attributes against a third operand, with configurable comparisons and tolerance. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-by-filter.html#modulo-comparison",
    "relUrl": "/doc-clusters/edges-refine/refine-by-filter.html#modulo-comparison"
  },"1403": {
    "doc": "🝔 Refine by Filter",
    "title": "🝖 Edge Direction (Edge)",
    "content": "Check if the edge direction is within a given range. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-by-filter.html#edge-direction-edge-1",
    "relUrl": "/doc-clusters/edges-refine/refine-by-filter.html#edge-direction-edge-1"
  },"1404": {
    "doc": "🝔 Refine by Filter",
    "title": "🝖 Endpoints Compare (Numeric)",
    "content": "Compare the value of an attribute on each of the edge endpoint. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-by-filter.html#endpoints-compare-numeric-1",
    "relUrl": "/doc-clusters/edges-refine/refine-by-filter.html#endpoints-compare-numeric-1"
  },"1405": {
    "doc": "🝔 Refine by Filter",
    "title": "🝖 Bounds",
    "content": "Checks if a point is inside or outside the provided bounds, with options for bounds types and an epsilon adjustment. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-by-filter.html#bounds",
    "relUrl": "/doc-clusters/edges-refine/refine-by-filter.html#bounds"
  },"1406": {
    "doc": "🝔 Refine by Filter",
    "title": "🝖 Distance",
    "content": "Compare distance to closest target against a constant or attribute. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-by-filter.html#distance",
    "relUrl": "/doc-clusters/edges-refine/refine-by-filter.html#distance"
  },"1407": {
    "doc": "🝔 Refine by Filter",
    "title": "🝖 Endpoints Compare (String)",
    "content": "Compare the value of an attribute on each of the edge endpoint. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-by-filter.html#endpoints-compare-string-1",
    "relUrl": "/doc-clusters/edges-refine/refine-by-filter.html#endpoints-compare-string-1"
  },"1408": {
    "doc": "🝔 Refine by Filter",
    "title": "🝖 Bitmask",
    "content": "Checks specific flags in an int64 bitmask attribute with configurable mask types, comparisons, and an option to invert results. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-by-filter.html#bitmask",
    "relUrl": "/doc-clusters/edges-refine/refine-by-filter.html#bitmask"
  },"1409": {
    "doc": "🝔 Refine by Filter",
    "title": "🝖 Neighbors Count (Edge)",
    "content": "Check a node’ neighbors count . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-by-filter.html#neighbors-count-edge-1",
    "relUrl": "/doc-clusters/edges-refine/refine-by-filter.html#neighbors-count-edge-1"
  },"1410": {
    "doc": "🝔 Refine by Filter",
    "title": "🝖 Random",
    "content": "Random filter. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-by-filter.html#random",
    "relUrl": "/doc-clusters/edges-refine/refine-by-filter.html#random"
  },"1411": {
    "doc": "🝔 Refine by Filter",
    "title": "🝖 Mean Value",
    "content": "The Mean Value Filter compares per-point values of an attribute against the mean statistical value of that same attribute. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-by-filter.html#mean-value",
    "relUrl": "/doc-clusters/edges-refine/refine-by-filter.html#mean-value"
  },"1412": {
    "doc": "🝔 Refine by Filter",
    "title": "🝖 Self Compare (Numeric)",
    "content": "Compares the numeric value at one index against the same attribute at another index. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-by-filter.html#self-compare-numeric",
    "relUrl": "/doc-clusters/edges-refine/refine-by-filter.html#self-compare-numeric"
  },"1413": {
    "doc": "🝔 Refine by Filter",
    "title": "🝖 Self Compare (String)",
    "content": "Compares the string value at one index against the same attribute at another index. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-by-filter.html#self-compare-string",
    "relUrl": "/doc-clusters/edges-refine/refine-by-filter.html#self-compare-string"
  },"1414": {
    "doc": "🝔 Refine by Filter",
    "title": "🝖 Spline Inclusion",
    "content": "Checks against how a point is included in a spline. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-by-filter.html#spline-inclusion",
    "relUrl": "/doc-clusters/edges-refine/refine-by-filter.html#spline-inclusion"
  },"1415": {
    "doc": "🝔 Refine by Filter",
    "title": "🝖 Path Inclusion",
    "content": "Checks against how a point is included in a path. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-by-filter.html#path-inclusion",
    "relUrl": "/doc-clusters/edges-refine/refine-by-filter.html#path-inclusion"
  },"1416": {
    "doc": "🝔 Refine by Filter",
    "title": "🝔 Refine by Filter",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-by-filter.html",
    "relUrl": "/doc-clusters/edges-refine/refine-by-filter.html"
  },"1417": {
    "doc": "🝔 Gabriel",
    "title": "🝔 Gabriel",
    "content": "Applies Gabrield Graph transformation . Related . | Refine | . Table of content . See Gabriel graph on Wikipedia. Note that while it’s initially theorized for Delaunay, the principle work on any graph – but only a Delaunay will guarantee final connectivity. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-gabriel.html#gabriel",
    "relUrl": "/doc-clusters/edges-refine/refine-gabriel.html#gabriel"
  },"1418": {
    "doc": "🝔 Gabriel",
    "title": "🝔 Gabriel",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-gabriel.html",
    "relUrl": "/doc-clusters/edges-refine/refine-gabriel.html"
  },"1419": {
    "doc": "🝔 Keep Highest Score",
    "title": "🝔 Keep Highest Score",
    "content": "Keeps edges with the highest heuristic scores . Related . | Refine | 🝔 Keep Lowest Score | . Table of content . | Available Heuristics Modules | . This refinement keeps a single connected edge for each point for each point: the one with the highest score based on connected 🝰 Heuristics. Note that the remaining Edge can be the same for multiple, different Vtx. Not all heuristics can be yield usable scores outside of a search context. For example, 🝰 Azimuth and 🝰 Inertia require clear seed/goals and search history to assign a given score. Such heuristics will yield a default score based on their own settings. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-keep-highest-score.html#keep-highest-score",
    "relUrl": "/doc-clusters/edges-refine/refine-keep-highest-score.html#keep-highest-score"
  },"1420": {
    "doc": "🝔 Keep Highest Score",
    "title": "Available Heuristics Modules",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-keep-highest-score.html#available-heuristics-modules",
    "relUrl": "/doc-clusters/edges-refine/refine-keep-highest-score.html#available-heuristics-modules"
  },"1421": {
    "doc": "🝔 Keep Highest Score",
    "title": "🝰 Heuristic Attribute",
    "content": "Attribute-driven heuristics . The Attribute heuristics uses custom point or edge value as raw score. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-keep-highest-score.html#heuristic-attribute",
    "relUrl": "/doc-clusters/edges-refine/refine-keep-highest-score.html#heuristic-attribute"
  },"1422": {
    "doc": "🝔 Keep Highest Score",
    "title": "🝰 Shortest Distance",
    "content": "Favor shortest distance. The Shortest Distance heuristic node … . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-keep-highest-score.html#shortest-distance",
    "relUrl": "/doc-clusters/edges-refine/refine-keep-highest-score.html#shortest-distance"
  },"1423": {
    "doc": "🝔 Keep Highest Score",
    "title": "🝰 Feedback",
    "content": "Favor uncharted points &amp; edges. The Feedback heuristic add/remove score value to points &amp; edges that are “in use” by other previously computed paths. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-keep-highest-score.html#feedback",
    "relUrl": "/doc-clusters/edges-refine/refine-keep-highest-score.html#feedback"
  },"1424": {
    "doc": "🝔 Keep Highest Score",
    "title": "🝰 Inertia",
    "content": "Favor active direction preservation. The Inertia heuristic uses the ongoing traversal data to try and maintain a consistent direction, as if the algorithm had “inertia”. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-keep-highest-score.html#inertia",
    "relUrl": "/doc-clusters/edges-refine/refine-keep-highest-score.html#inertia"
  },"1425": {
    "doc": "🝔 Keep Highest Score",
    "title": "🝰 Steepness",
    "content": "Favor flat trajectories. The Steepness heuristic uses the edge angle against an up vector to compute a dot product that is used to determine whether the edge should be considered flat or not. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-keep-highest-score.html#steepness",
    "relUrl": "/doc-clusters/edges-refine/refine-keep-highest-score.html#steepness"
  },"1426": {
    "doc": "🝔 Keep Highest Score",
    "title": "🝰 Azimuth",
    "content": "Favor edges directed toward the goal. The Azimuth heuristic attempt to force the path to always aim toward the goal. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-keep-highest-score.html#azimuth",
    "relUrl": "/doc-clusters/edges-refine/refine-keep-highest-score.html#azimuth"
  },"1427": {
    "doc": "🝔 Keep Highest Score",
    "title": "🝰 Least Nodes",
    "content": "Favor traversing the least amount of nodes. The Least Nodes heuristic favor node count traversal over anything else. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-keep-highest-score.html#least-nodes",
    "relUrl": "/doc-clusters/edges-refine/refine-keep-highest-score.html#least-nodes"
  },"1428": {
    "doc": "🝔 Keep Highest Score",
    "title": "🝔 Keep Highest Score",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-keep-highest-score.html",
    "relUrl": "/doc-clusters/edges-refine/refine-keep-highest-score.html"
  },"1429": {
    "doc": "🝔 Keep Longest",
    "title": "🝔 Keep Longest",
    "content": "Keeps the longest edge of each node . Related . | Refine | 🝔 Keep Shortest | . Table of content . This refinement keeps a single connected edge for each point: the one with the longest length. Note that the remaining Edge can be the same for multiple, different Vtx. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-keep-longest.html#keep-longest",
    "relUrl": "/doc-clusters/edges-refine/refine-keep-longest.html#keep-longest"
  },"1430": {
    "doc": "🝔 Keep Longest",
    "title": "🝔 Keep Longest",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-keep-longest.html",
    "relUrl": "/doc-clusters/edges-refine/refine-keep-longest.html"
  },"1431": {
    "doc": "🝔 Keep Lowest Score",
    "title": "🝔 Keep Lowest Score",
    "content": "Keeps edges with the lowest heuristic scores . Related . | Refine | 🝔 Keep Highest Score | . Table of content . | Available Heuristics Modules | . This refinement keeps a single connected edge for each point: the one with the lowest score based on connected 🝰 Heuristics. Note that the remaining Edge can be the same for multiple, different Vtx. Not all heuristics can be yield usable scores outside of a search context. For example, 🝰 Azimuth and 🝰 Inertia require clear seed/goals and search history to assign a given score. Such heuristics will yield a default score based on their own settings. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-keep-lowest-score.html#keep-lowest-score",
    "relUrl": "/doc-clusters/edges-refine/refine-keep-lowest-score.html#keep-lowest-score"
  },"1432": {
    "doc": "🝔 Keep Lowest Score",
    "title": "Available Heuristics Modules",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-keep-lowest-score.html#available-heuristics-modules",
    "relUrl": "/doc-clusters/edges-refine/refine-keep-lowest-score.html#available-heuristics-modules"
  },"1433": {
    "doc": "🝔 Keep Lowest Score",
    "title": "🝰 Heuristic Attribute",
    "content": "Attribute-driven heuristics . The Attribute heuristics uses custom point or edge value as raw score. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-keep-lowest-score.html#heuristic-attribute",
    "relUrl": "/doc-clusters/edges-refine/refine-keep-lowest-score.html#heuristic-attribute"
  },"1434": {
    "doc": "🝔 Keep Lowest Score",
    "title": "🝰 Shortest Distance",
    "content": "Favor shortest distance. The Shortest Distance heuristic node … . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-keep-lowest-score.html#shortest-distance",
    "relUrl": "/doc-clusters/edges-refine/refine-keep-lowest-score.html#shortest-distance"
  },"1435": {
    "doc": "🝔 Keep Lowest Score",
    "title": "🝰 Feedback",
    "content": "Favor uncharted points &amp; edges. The Feedback heuristic add/remove score value to points &amp; edges that are “in use” by other previously computed paths. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-keep-lowest-score.html#feedback",
    "relUrl": "/doc-clusters/edges-refine/refine-keep-lowest-score.html#feedback"
  },"1436": {
    "doc": "🝔 Keep Lowest Score",
    "title": "🝰 Inertia",
    "content": "Favor active direction preservation. The Inertia heuristic uses the ongoing traversal data to try and maintain a consistent direction, as if the algorithm had “inertia”. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-keep-lowest-score.html#inertia",
    "relUrl": "/doc-clusters/edges-refine/refine-keep-lowest-score.html#inertia"
  },"1437": {
    "doc": "🝔 Keep Lowest Score",
    "title": "🝰 Steepness",
    "content": "Favor flat trajectories. The Steepness heuristic uses the edge angle against an up vector to compute a dot product that is used to determine whether the edge should be considered flat or not. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-keep-lowest-score.html#steepness",
    "relUrl": "/doc-clusters/edges-refine/refine-keep-lowest-score.html#steepness"
  },"1438": {
    "doc": "🝔 Keep Lowest Score",
    "title": "🝰 Azimuth",
    "content": "Favor edges directed toward the goal. The Azimuth heuristic attempt to force the path to always aim toward the goal. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-keep-lowest-score.html#azimuth",
    "relUrl": "/doc-clusters/edges-refine/refine-keep-lowest-score.html#azimuth"
  },"1439": {
    "doc": "🝔 Keep Lowest Score",
    "title": "🝰 Least Nodes",
    "content": "Favor traversing the least amount of nodes. The Least Nodes heuristic favor node count traversal over anything else. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-keep-lowest-score.html#least-nodes",
    "relUrl": "/doc-clusters/edges-refine/refine-keep-lowest-score.html#least-nodes"
  },"1440": {
    "doc": "🝔 Keep Lowest Score",
    "title": "🝔 Keep Lowest Score",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-keep-lowest-score.html",
    "relUrl": "/doc-clusters/edges-refine/refine-keep-lowest-score.html"
  },"1441": {
    "doc": "🝔 Keep Shortest",
    "title": "🝔 Keep Shortest",
    "content": "Keeps the shortest edge of each node . Related . | Refine | 🝔 Keep Longest | . Table of content . This refinement keeps a single connected edge for each point: the one with the shortest length. Note that the remaining Edge can be the same for multiple, different Vtx. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-keep-shortest.html#keep-shortest",
    "relUrl": "/doc-clusters/edges-refine/refine-keep-shortest.html#keep-shortest"
  },"1442": {
    "doc": "🝔 Keep Shortest",
    "title": "🝔 Keep Shortest",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-keep-shortest.html",
    "relUrl": "/doc-clusters/edges-refine/refine-keep-shortest.html"
  },"1443": {
    "doc": "🝔 Line Trace",
    "title": "🝔 Line Trace",
    "content": "Removes edges by doing linetrace and checking for collisions. Related . | Refine | . Table of content . | Properties . | Collision Settings | . | . This does linetraces using the edge’ start &amp; end point. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-linetrace.html#line-trace",
    "relUrl": "/doc-clusters/edges-refine/refine-linetrace.html#line-trace"
  },"1444": {
    "doc": "🝔 Line Trace",
    "title": "Properties",
    "content": "| Property | Description | . | :**Settings** : |   | . | Collision Settings | *See details below.* | . | Two Way Check | If enabled, when the first linecast (From the edge’ start to end) fails, it tries the other way around (From the edge’ end to start).*While expensive, this ensures the refinement doesn’t fail on backface hits.* | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-linetrace.html#properties",
    "relUrl": "/doc-clusters/edges-refine/refine-linetrace.html#properties"
  },"1445": {
    "doc": "🝔 Line Trace",
    "title": "Collision Settings",
    "content": ". These settings drive which objects will be ignored during the collision checks. | Property | Description | . | Trace Complex | Whether to collide against complex or simple collision.Note that this setting may not be supported everywhere. | . | Collision Type | The type of collision check. Can be one of:-Channel-ObjectType-ProfileThe selected mode changes which settings are available. | . | Collision Channel | Lets you pick the collision channel to check against. | . | Collision Object Type | Lets you pick the object type to check against. | . | Collision Profile Name | Lets you set a custom profile name to check against. | . | Ignore Self | If enabled, will ignore the current PCG Component’ actor owner. | . | Ignored Actor Selector | Vanilla PCG Actor Selector. | . This refinement can be rather expensive depending on the number of edges. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-linetrace.html#collision-settings",
    "relUrl": "/doc-clusters/edges-refine/refine-linetrace.html#collision-settings"
  },"1446": {
    "doc": "🝔 Line Trace",
    "title": "🝔 Line Trace",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-linetrace.html",
    "relUrl": "/doc-clusters/edges-refine/refine-linetrace.html"
  },"1447": {
    "doc": "🝔 Minimum Spanning Tree",
    "title": "🝔 Minimum Spanning Tree",
    "content": "Modified Prim’s Minimum Spanning Tree algorithm that supports heuristics. Related . | Refine | . Table of content . | Available Heuristics Modules | . This refinement offers a highly customizable implementation of Prim’s algorithm to find the minimum spanning tree of individual clusters. By design, the output is guaranteed to be sanitized (e.g, each cluster will retains its existing connectivity properties). It relies on user-defined 🝰 Heuristics in order to build the tree, providing very high level of control. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-prim-mst.html#minimum-spanning-tree",
    "relUrl": "/doc-clusters/edges-refine/refine-prim-mst.html#minimum-spanning-tree"
  },"1448": {
    "doc": "🝔 Minimum Spanning Tree",
    "title": "Available Heuristics Modules",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-prim-mst.html#available-heuristics-modules",
    "relUrl": "/doc-clusters/edges-refine/refine-prim-mst.html#available-heuristics-modules"
  },"1449": {
    "doc": "🝔 Minimum Spanning Tree",
    "title": "🝰 Heuristic Attribute",
    "content": "Attribute-driven heuristics . The Attribute heuristics uses custom point or edge value as raw score. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-prim-mst.html#heuristic-attribute",
    "relUrl": "/doc-clusters/edges-refine/refine-prim-mst.html#heuristic-attribute"
  },"1450": {
    "doc": "🝔 Minimum Spanning Tree",
    "title": "🝰 Shortest Distance",
    "content": "Favor shortest distance. The Shortest Distance heuristic node … . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-prim-mst.html#shortest-distance",
    "relUrl": "/doc-clusters/edges-refine/refine-prim-mst.html#shortest-distance"
  },"1451": {
    "doc": "🝔 Minimum Spanning Tree",
    "title": "🝰 Feedback",
    "content": "Favor uncharted points &amp; edges. The Feedback heuristic add/remove score value to points &amp; edges that are “in use” by other previously computed paths. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-prim-mst.html#feedback",
    "relUrl": "/doc-clusters/edges-refine/refine-prim-mst.html#feedback"
  },"1452": {
    "doc": "🝔 Minimum Spanning Tree",
    "title": "🝰 Inertia",
    "content": "Favor active direction preservation. The Inertia heuristic uses the ongoing traversal data to try and maintain a consistent direction, as if the algorithm had “inertia”. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-prim-mst.html#inertia",
    "relUrl": "/doc-clusters/edges-refine/refine-prim-mst.html#inertia"
  },"1453": {
    "doc": "🝔 Minimum Spanning Tree",
    "title": "🝰 Steepness",
    "content": "Favor flat trajectories. The Steepness heuristic uses the edge angle against an up vector to compute a dot product that is used to determine whether the edge should be considered flat or not. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-prim-mst.html#steepness",
    "relUrl": "/doc-clusters/edges-refine/refine-prim-mst.html#steepness"
  },"1454": {
    "doc": "🝔 Minimum Spanning Tree",
    "title": "🝰 Azimuth",
    "content": "Favor edges directed toward the goal. The Azimuth heuristic attempt to force the path to always aim toward the goal. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-prim-mst.html#azimuth",
    "relUrl": "/doc-clusters/edges-refine/refine-prim-mst.html#azimuth"
  },"1455": {
    "doc": "🝔 Minimum Spanning Tree",
    "title": "🝰 Least Nodes",
    "content": "Favor traversing the least amount of nodes. The Least Nodes heuristic favor node count traversal over anything else. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-prim-mst.html#least-nodes",
    "relUrl": "/doc-clusters/edges-refine/refine-prim-mst.html#least-nodes"
  },"1456": {
    "doc": "🝔 Minimum Spanning Tree",
    "title": "🝔 Minimum Spanning Tree",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-prim-mst.html",
    "relUrl": "/doc-clusters/edges-refine/refine-prim-mst.html"
  },"1457": {
    "doc": "🝔 Remove Highest Score",
    "title": "🝔 Remove Highest Score",
    "content": "Removes edges with the highest heuristic scores . Related . | Refine | 🝔 Remove Lowest Score | . Table of content . | Available Heuristics Modules | . This refinement removes a single connected edge for each point for each point: the one with the highest score based on connected 🝰 Heuristics. Note that the removed Edge can be the same for multiple, different Vtx. Not all heuristics can be yield usable scores outside of a search context. For example, 🝰 Azimuth and 🝰 Inertia require clear seed/goals and search history to assign a given score. Such heuristics will yield a default score based on their own settings. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-remove-highest-score.html#remove-highest-score",
    "relUrl": "/doc-clusters/edges-refine/refine-remove-highest-score.html#remove-highest-score"
  },"1458": {
    "doc": "🝔 Remove Highest Score",
    "title": "Available Heuristics Modules",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-remove-highest-score.html#available-heuristics-modules",
    "relUrl": "/doc-clusters/edges-refine/refine-remove-highest-score.html#available-heuristics-modules"
  },"1459": {
    "doc": "🝔 Remove Highest Score",
    "title": "🝰 Heuristic Attribute",
    "content": "Attribute-driven heuristics . The Attribute heuristics uses custom point or edge value as raw score. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-remove-highest-score.html#heuristic-attribute",
    "relUrl": "/doc-clusters/edges-refine/refine-remove-highest-score.html#heuristic-attribute"
  },"1460": {
    "doc": "🝔 Remove Highest Score",
    "title": "🝰 Shortest Distance",
    "content": "Favor shortest distance. The Shortest Distance heuristic node … . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-remove-highest-score.html#shortest-distance",
    "relUrl": "/doc-clusters/edges-refine/refine-remove-highest-score.html#shortest-distance"
  },"1461": {
    "doc": "🝔 Remove Highest Score",
    "title": "🝰 Feedback",
    "content": "Favor uncharted points &amp; edges. The Feedback heuristic add/remove score value to points &amp; edges that are “in use” by other previously computed paths. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-remove-highest-score.html#feedback",
    "relUrl": "/doc-clusters/edges-refine/refine-remove-highest-score.html#feedback"
  },"1462": {
    "doc": "🝔 Remove Highest Score",
    "title": "🝰 Inertia",
    "content": "Favor active direction preservation. The Inertia heuristic uses the ongoing traversal data to try and maintain a consistent direction, as if the algorithm had “inertia”. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-remove-highest-score.html#inertia",
    "relUrl": "/doc-clusters/edges-refine/refine-remove-highest-score.html#inertia"
  },"1463": {
    "doc": "🝔 Remove Highest Score",
    "title": "🝰 Steepness",
    "content": "Favor flat trajectories. The Steepness heuristic uses the edge angle against an up vector to compute a dot product that is used to determine whether the edge should be considered flat or not. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-remove-highest-score.html#steepness",
    "relUrl": "/doc-clusters/edges-refine/refine-remove-highest-score.html#steepness"
  },"1464": {
    "doc": "🝔 Remove Highest Score",
    "title": "🝰 Azimuth",
    "content": "Favor edges directed toward the goal. The Azimuth heuristic attempt to force the path to always aim toward the goal. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-remove-highest-score.html#azimuth",
    "relUrl": "/doc-clusters/edges-refine/refine-remove-highest-score.html#azimuth"
  },"1465": {
    "doc": "🝔 Remove Highest Score",
    "title": "🝰 Least Nodes",
    "content": "Favor traversing the least amount of nodes. The Least Nodes heuristic favor node count traversal over anything else. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-remove-highest-score.html#least-nodes",
    "relUrl": "/doc-clusters/edges-refine/refine-remove-highest-score.html#least-nodes"
  },"1466": {
    "doc": "🝔 Remove Highest Score",
    "title": "🝔 Remove Highest Score",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-remove-highest-score.html",
    "relUrl": "/doc-clusters/edges-refine/refine-remove-highest-score.html"
  },"1467": {
    "doc": "🝔 Remove Longest",
    "title": "🝔 Remove Longest",
    "content": "Removes the longest edge of each node . Related . | Refine | 🝔 Remove Shortest | . Table of content . This refinement removes a single connected edge for each point: the one with the longest length. Note that the remaining Edge can be the same for multiple, different Vtx. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-remove-longest.html#remove-longest",
    "relUrl": "/doc-clusters/edges-refine/refine-remove-longest.html#remove-longest"
  },"1468": {
    "doc": "🝔 Remove Longest",
    "title": "🝔 Remove Longest",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-remove-longest.html",
    "relUrl": "/doc-clusters/edges-refine/refine-remove-longest.html"
  },"1469": {
    "doc": "🝔 Remove Lowest Score",
    "title": "🝔 Remove Lowest Score",
    "content": "Removes edges with the lowest heuristic scores . Related . | Refine | 🝔 Remove Highest Score | . Table of content . | Available Heuristics Modules | . This refinement removes a single connected edge for each point for each point: the one with the lowest score based on connected 🝰 Heuristics. Note that the removed Edge can be the same for multiple, different Vtx. Not all heuristics can be yield usable scores outside of a search context. For example, 🝰 Azimuth and 🝰 Inertia require clear seed/goals and search history to assign a given score. Such heuristics will yield a default score based on their own settings. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-remove-lowest-score.html#remove-lowest-score",
    "relUrl": "/doc-clusters/edges-refine/refine-remove-lowest-score.html#remove-lowest-score"
  },"1470": {
    "doc": "🝔 Remove Lowest Score",
    "title": "Available Heuristics Modules",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-remove-lowest-score.html#available-heuristics-modules",
    "relUrl": "/doc-clusters/edges-refine/refine-remove-lowest-score.html#available-heuristics-modules"
  },"1471": {
    "doc": "🝔 Remove Lowest Score",
    "title": "🝰 Heuristic Attribute",
    "content": "Attribute-driven heuristics . The Attribute heuristics uses custom point or edge value as raw score. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-remove-lowest-score.html#heuristic-attribute",
    "relUrl": "/doc-clusters/edges-refine/refine-remove-lowest-score.html#heuristic-attribute"
  },"1472": {
    "doc": "🝔 Remove Lowest Score",
    "title": "🝰 Shortest Distance",
    "content": "Favor shortest distance. The Shortest Distance heuristic node … . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-remove-lowest-score.html#shortest-distance",
    "relUrl": "/doc-clusters/edges-refine/refine-remove-lowest-score.html#shortest-distance"
  },"1473": {
    "doc": "🝔 Remove Lowest Score",
    "title": "🝰 Feedback",
    "content": "Favor uncharted points &amp; edges. The Feedback heuristic add/remove score value to points &amp; edges that are “in use” by other previously computed paths. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-remove-lowest-score.html#feedback",
    "relUrl": "/doc-clusters/edges-refine/refine-remove-lowest-score.html#feedback"
  },"1474": {
    "doc": "🝔 Remove Lowest Score",
    "title": "🝰 Inertia",
    "content": "Favor active direction preservation. The Inertia heuristic uses the ongoing traversal data to try and maintain a consistent direction, as if the algorithm had “inertia”. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-remove-lowest-score.html#inertia",
    "relUrl": "/doc-clusters/edges-refine/refine-remove-lowest-score.html#inertia"
  },"1475": {
    "doc": "🝔 Remove Lowest Score",
    "title": "🝰 Steepness",
    "content": "Favor flat trajectories. The Steepness heuristic uses the edge angle against an up vector to compute a dot product that is used to determine whether the edge should be considered flat or not. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-remove-lowest-score.html#steepness",
    "relUrl": "/doc-clusters/edges-refine/refine-remove-lowest-score.html#steepness"
  },"1476": {
    "doc": "🝔 Remove Lowest Score",
    "title": "🝰 Azimuth",
    "content": "Favor edges directed toward the goal. The Azimuth heuristic attempt to force the path to always aim toward the goal. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-remove-lowest-score.html#azimuth",
    "relUrl": "/doc-clusters/edges-refine/refine-remove-lowest-score.html#azimuth"
  },"1477": {
    "doc": "🝔 Remove Lowest Score",
    "title": "🝰 Least Nodes",
    "content": "Favor traversing the least amount of nodes. The Least Nodes heuristic favor node count traversal over anything else. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-remove-lowest-score.html#least-nodes",
    "relUrl": "/doc-clusters/edges-refine/refine-remove-lowest-score.html#least-nodes"
  },"1478": {
    "doc": "🝔 Remove Lowest Score",
    "title": "🝔 Remove Lowest Score",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-remove-lowest-score.html",
    "relUrl": "/doc-clusters/edges-refine/refine-remove-lowest-score.html"
  },"1479": {
    "doc": "🝔 Remove Overlap",
    "title": "🝔 Remove Overlap",
    "content": "Removes overlapping edges . Related . | Refine | . Table of content . | Properties | . This test each edge for possible overlap/intersection with other edges in the same cluster. By design, the output is guaranteed to be sanitized (e.g, each cluster will retains its existing connectivity properties). ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-remove-overlap.html#remove-overlap",
    "relUrl": "/doc-clusters/edges-refine/refine-remove-overlap.html#remove-overlap"
  },"1480": {
    "doc": "🝔 Remove Overlap",
    "title": "Properties",
    "content": "| Property | Description | . | :**Settings** : |   | . | Keep | When checking two edges, defines which one will be preserved, and which one will be removed. | . | Tolerance | The distance at which two edges are considered to be overlapping.*The higher the value, the more aggressive the pruning.* | . | : **Limits** : |   | . | Min Angle | If enabled, will only check overlap if the two edges have **at least** the specified angle between each other. | . | Max Angle | If enabled, will only check overlap if the two edges hace **at most** the specified angle between each other. | . This refinement can be rather expensive depending on the topology of the clusters. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-remove-overlap.html#properties",
    "relUrl": "/doc-clusters/edges-refine/refine-remove-overlap.html#properties"
  },"1481": {
    "doc": "🝔 Remove Overlap",
    "title": "🝔 Remove Overlap",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-remove-overlap.html",
    "relUrl": "/doc-clusters/edges-refine/refine-remove-overlap.html"
  },"1482": {
    "doc": "🝔 Remove Shortest",
    "title": "🝔 Remove Shortest",
    "content": "Removes the shortest edge of each node . Related . | Refine | 🝔 Keep Longest | . Table of content . This refinement removes a single connected edge for each point: the one with the shortest length. Note that the remaining Edge can be the same for multiple, different Vtx. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-remove-shortest.html#remove-shortest",
    "relUrl": "/doc-clusters/edges-refine/refine-remove-shortest.html#remove-shortest"
  },"1483": {
    "doc": "🝔 Remove Shortest",
    "title": "🝔 Remove Shortest",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-refine/refine-remove-shortest.html",
    "relUrl": "/doc-clusters/edges-refine/refine-remove-shortest.html"
  },"1484": {
    "doc": "☍ Force Directed",
    "title": "☍ Force Directed",
    "content": "Force-directed relaxation . The Force-directed relaxation … . Related . | Relax | . Table of content . | Properties | . Force-directed relaxation simulates physical forces on connected nodes, adjusting their positions iteratively to minimize energy, balancing attractive and repulsive forces to reveal an optimal topology. See Force-directed graph drawing on Wikipedia . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-relax/relax-force-directed.html#force-directed",
    "relUrl": "/doc-clusters/edges-relax/relax-force-directed.html#force-directed"
  },"1485": {
    "doc": "☍ Force Directed",
    "title": "Properties",
    "content": "| Property | Description | . | :**Settings**| |   | . | Spring Constant | Controls the \"springness\" of the edges.*Keep this value very small* | . | Electrostatic | Controls the \"attractiveness\" of the vtx.*Keep this value very large* | . The default settings are not really meant to be changed – editing them quickly leads to artifacts and anomalies. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-relax/relax-force-directed.html#properties",
    "relUrl": "/doc-clusters/edges-relax/relax-force-directed.html#properties"
  },"1486": {
    "doc": "☍ Force Directed",
    "title": "☍ Force Directed",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-relax/relax-force-directed.html",
    "relUrl": "/doc-clusters/edges-relax/relax-force-directed.html"
  },"1487": {
    "doc": "☍ Laplacian",
    "title": "☍ Laplacian",
    "content": "Laplacian / Poisson relaxation . The Laplacian relaxation … . Related . | Relax | . Table of content . Laplacian relaxation adjusts node positions iteratively based on the average positions of their neighbors, smoothing the layout by reducing irregularities and creating a more uniform structure. See Laplacian Relaxation on Wikipedia . This relaxation has no exposed properties. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-relax/relax-laplacian.html#laplacian",
    "relUrl": "/doc-clusters/edges-relax/relax-laplacian.html#laplacian"
  },"1488": {
    "doc": "☍ Laplacian",
    "title": "☍ Laplacian",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/edges-relax/relax-laplacian.html",
    "relUrl": "/doc-clusters/edges-relax/relax-laplacian.html"
  },"1489": {
    "doc": "Sample Inside Bounds",
    "title": "Sample Inside Bounds",
    "content": "PCGEx | Sample : Inside Bounds Sample target points contained within bounds. The Sample Nearest Bounds node explore points within input bounds. InPoints that will sample data from targets Point FiltersPoints filters used to determine which points will be processed. Filtered out points will be treated as failed sampling. TargetsTargets to read data from if they are within an input point bounds. OutIn with extra attributes and properties . Table of content . NODE TBD . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-sampling/sampling-inside-bounds.html#sample-inside-bounds",
    "relUrl": "/doc-sampling/sampling-inside-bounds.html#sample-inside-bounds"
  },"1490": {
    "doc": "Sample Inside Bounds",
    "title": "Sample Inside Bounds",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-sampling/sampling-inside-bounds.html",
    "relUrl": "/doc-sampling/sampling-inside-bounds.html"
  },"1491": {
    "doc": "Sample Line Trace",
    "title": "Sample Line Trace",
    "content": "PCGEx | Sample : Line Trace Sample environment using line casting . The Line Trace node performs a single line trace for each point, using a local attribute or property as direction &amp; size. InPoints that will be used as origin for line tracing Point FiltersPoints filters used to determine which points will be processed. Filtered out points will be treated as failed sampling. Actor ReferencesPoints containing actor references, if that mode is selected. Texture ParamsIf texture parameter sampling from render mat is enabled, drive what to look for and how to output it. OutIn with extra attributes and properties . Table of content . | Properties | Outputs | Extra properties . | Forwarding | Tagging | Collision Settings | Advanced | . | . The Line Trace node allows you to perform a single per-point line trace and output data from that trace. Please note that this node is not tracking traced actors. If you change the sampled environment you will need to manually regenerate the graph unless something else already triggers a refresh in editor. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-sampling/sampling-line-trace.html#sample-line-trace",
    "relUrl": "/doc-sampling/sampling-line-trace.html#sample-line-trace"
  },"1492": {
    "doc": "Sample Line Trace",
    "title": "Properties",
    "content": ". | Property | Description | . | :**Settings**| |   | . | Surface Source | Select where you want to read surfaces from: either All (revealing additional actors picking parameters), or Actor References, to sample only specific actors. | . | Actor Reference | Attribute to read actor reference from the Actor References input data. | . | **Trace**| |   | . | Direction | FVector attribute to read per-point trace direction from. | . | Max Distance | Maximum distance for the trace | . | Local Max Distance | If enabled, fetches the max distance on a per-point basis using the specified attribute. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-sampling/sampling-line-trace.html#properties",
    "relUrl": "/doc-sampling/sampling-line-trace.html#properties"
  },"1493": {
    "doc": "Sample Line Trace",
    "title": "Outputs",
    "content": "Outputs are values extracted from the line trace, and written to attributes on the output points. | Output | Description | . | **Generic**| |   | . | &lt;span class=\"eout\"&gt;Success&lt;/span&gt;bool | TBD | . | **Spatial Data**| |   | . | &lt;span class=\"eout\"&gt;Location&lt;/span&gt;FVector | TBD | . | &lt;span class=\"eout\"&gt;Look At&lt;/span&gt;FVector | TBD | . | &lt;span class=\"eout\"&gt;Normal&lt;/span&gt;FVector | TBD | . | &lt;span class=\"eout\"&gt;Distance&lt;/span&gt;double | TBD | . | &lt;span class=\"eout\"&gt;Is Inside&lt;/span&gt;bool | TBD | . | &lt;span class=\"eout\"&gt;UV Coords&lt;/span&gt;FVector2D | TBD | . | └─ UV Channel | TBD | . | &lt;span class=\"eout\"&gt;Face Index&lt;/span&gt;int | TBD | . | **Actor Data**| |   | . | &lt;span class=\"eout\"&gt;Actor Reference&lt;/span&gt;FSoftObjectPath | TBD | . | &lt;span class=\"eout\"&gt;Hit Component&lt;/span&gt;FSoftObjectPath | TBD | . | &lt;span class=\"eout\"&gt;Phys Mat&lt;/span&gt;FSoftObjectPath | TBD | . | &lt;span class=\"eout\"&gt;Render Mat&lt;/span&gt;FSoftObjectPath | TBD | . | └─ Material Index | TBD | . | └─ Texture Parameters | TBD | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-sampling/sampling-line-trace.html#outputs",
    "relUrl": "/doc-sampling/sampling-line-trace.html#outputs"
  },"1494": {
    "doc": "Sample Line Trace",
    "title": "Extra properties",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-sampling/sampling-line-trace.html#extra-properties",
    "relUrl": "/doc-sampling/sampling-line-trace.html#extra-properties"
  },"1495": {
    "doc": "Sample Line Trace",
    "title": "Forwarding",
    "content": "Data forwarding settings from the Actor References input points, if enabled. “Forwarding” settings lets you pick-and-choose which attributes &amp; tags carry over from some data to another. | Property | Description | . | Enabled | Whether attribute forwarding is enabled or not. | . | Preserve Attributes Default Value | If enabled, the node will attempt to create attributes on the data in a way that preserve the original, underlying default value of the attribute.This can be critical in order to identify which data originally belonged to which, as well as properly initializing flags to a desirable default. | . Note that the filters look for a single valid match amongst the list; you cannot create and/or conditions. Filter Details . | Property | Description | . | Filter Mode | Chooses how the filter operates.- All let everything pass.- Exclude filters out the result of the filter.- Include only allows the items that pass the filters. | . | Matches | Lets you define a list of checks pairs: a string value, and a Match Mode. | . | Comma Separated Names | Easy to override, lets you specify a list of comma-separated names.The only caveat is that you can only pick a unique match mode used for each entry. | . | Comma Separated Names Filter | Which filter will be used along the Comma Separated Names. | . | Preserve PCGEx Data | Most of the time you’ll want to leave it to its default value. It ensures PCGEx/ prefixed data are not captured by the filter. | . Filter Modes . | Mode | Description | . | Equals | Checks for strict equality of the filtered value and the associated string. | . | Contains | Checks if the filtered value contains the associated string. | . | Starts With | Checks if the filtered value is prefixed with the associated string. | . | Ends With | Checks if the filtered value is suffixed with the associated string. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-sampling/sampling-line-trace.html#forwarding",
    "relUrl": "/doc-sampling/sampling-line-trace.html#forwarding"
  },"1496": {
    "doc": "Sample Line Trace",
    "title": "Tagging",
    "content": "Some high level tags may be applied to the data based on overal sampling. | Tag | Description | . | &lt;span class=\"etag\"&gt;Has Successes Tag&lt;/span&gt; | If enabled, add the specified tag to the output data **if at least a single line trace** has been successful. | . | &lt;span class=\"etag\"&gt;Has No Successes Tag&lt;/span&gt; | If enabled, add the specified tag to the output data **if all line trace** failed. | . Note that fail/success tagging will be affected by points filter as well; since filtered out points are considered fails. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-sampling/sampling-line-trace.html#tagging",
    "relUrl": "/doc-sampling/sampling-line-trace.html#tagging"
  },"1497": {
    "doc": "Sample Line Trace",
    "title": "Collision Settings",
    "content": ". These settings drive which objects will be ignored during the collision checks. | Property | Description | . | Trace Complex | Whether to collide against complex or simple collision.Note that this setting may not be supported everywhere. | . | Collision Type | The type of collision check. Can be one of:-Channel-ObjectType-ProfileThe selected mode changes which settings are available. | . | Collision Channel | Lets you pick the collision channel to check against. | . | Collision Object Type | Lets you pick the object type to check against. | . | Collision Profile Name | Lets you set a custom profile name to check against. | . | Ignore Self | If enabled, will ignore the current PCG Component’ actor owner. | . | Ignored Actor Selector | Vanilla PCG Actor Selector. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-sampling/sampling-line-trace.html#collision-settings",
    "relUrl": "/doc-sampling/sampling-line-trace.html#collision-settings"
  },"1498": {
    "doc": "Sample Line Trace",
    "title": "Advanced",
    "content": ". | Property | Description | . | Process Filtered Out As Fails | If enabled, mark filtered out points as \"failed\". Otherwise, just skip the processing altogether.**Only uncheck this if you want to ensure existing attribute values are preserved.**Default is set to true, as it should be on a first-pass sampling. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-sampling/sampling-line-trace.html#advanced",
    "relUrl": "/doc-sampling/sampling-line-trace.html#advanced"
  },"1499": {
    "doc": "Sample Line Trace",
    "title": "Sample Line Trace",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-sampling/sampling-line-trace.html",
    "relUrl": "/doc-sampling/sampling-line-trace.html"
  },"1500": {
    "doc": "Sample Nearest Bounds",
    "title": "Sample Nearest Bounds",
    "content": "PCGEx | Sample : Nearest Bounds Sample within bounds . The Sample Nearest Bounds node samples points within given bounds, blending spatial attributes from the nearest targets based on selected methods, and outputs the processed points with additional properties and tags. InPoints that will sample data from targets Point FiltersPoints filters used to determine which points will be processed. Filtered out points will be treated as failed sampling. BoundsPoint bounds to read data from OutIn with extra attributes and properties . Table of content . | Sampling . | Sampling Methods | . | Blending | Outputs . | Tagging | Advanced | . | . The Sample Nearest Point grabs and blends attributes &amp; properties from a target dataset as well as other spatial relationship outputs. Input points sample the targets which bounds contains them, not the other way around. See Sample Inside Bounds if that’s what you were looking for. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-sampling/sampling-nearest-bounds.html#sample-nearest-bounds",
    "relUrl": "/doc-sampling/sampling-nearest-bounds.html#sample-nearest-bounds"
  },"1501": {
    "doc": "Sample Nearest Bounds",
    "title": "Sampling",
    "content": ". | Property | Description | . | :**Settings**| |   | . | Sample Method | Selects the sampling method. See [Sampling Methods](#sampling-methods). | . | Bounds Source | TBD | . | Weight Remap | TBD | . Sampling Methods . | Method | Description | . | &lt;span class=\"ebit\"&gt;All&lt;/span&gt; | TBD | . | &lt;span class=\"ebit\"&gt;Closest Bounds&lt;/span&gt; | TBD | . | &lt;span class=\"ebit\"&gt;Farthest Bounds&lt;/span&gt; | TBD | . | &lt;span class=\"ebit\"&gt;Largest Bounds&lt;/span&gt; | TBD | . | &lt;span class=\"ebit\"&gt;Smallest Bounds&lt;/span&gt; | TBD | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-sampling/sampling-nearest-bounds.html#sampling",
    "relUrl": "/doc-sampling/sampling-nearest-bounds.html#sampling"
  },"1502": {
    "doc": "Sample Nearest Bounds",
    "title": "Blending",
    "content": ". | Properties | Description | . | Target Attributes | A Name::Blendmode map of the attributes to grab from the target points, and which blendmode to use. | . | Point Propeprties Blending Settings | If enabled, lets you pick &amp; choose which point properties you want to grab from the targets, and which blendmode to use.Use None to prevent a specific property from being grabbed. | . See Blending. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-sampling/sampling-nearest-bounds.html#blending",
    "relUrl": "/doc-sampling/sampling-nearest-bounds.html#blending"
  },"1503": {
    "doc": "Sample Nearest Bounds",
    "title": "Outputs",
    "content": "Outputs are values extracted from the bounds that encapsulate a given point, and written to attributes on the output points. | Output | Description | . | **Generic**| |   | . | &lt;span class=\"eout\"&gt;Success&lt;/span&gt;bool | TBD | . | **Spatial Data**| |   | . | &lt;span class=\"eout\"&gt;Transform&lt;/span&gt;FTransform | TBD | . | &lt;span class=\"eout\"&gt;Look At&lt;/span&gt;FVector | TBD | . | └─ Align | TBD | . | └─ Use Up from… | TBD | . | └─ Up Vector | TBD | . | &lt;span class=\"eout\"&gt;Distance&lt;/span&gt;double | TBD | . | &lt;span class=\"eout\"&gt;Signed Distance&lt;/span&gt;double | TBD | . | └─ Axis | TBD | . | &lt;span class=\"eout\"&gt;Component-wise Distance&lt;/span&gt;FVector | TBD | . | └─ Absolute | TBD | . | &lt;span class=\"eout\"&gt;Angle&lt;/span&gt;double | TBD | . | └─ Axis | TBD | . | └─ Range | TBD | . | &lt;span class=\"eout\"&gt;Num Samples&lt;/span&gt;int32 | TBD | . Based on the selected Sample method, the output values are a weighted average of all the sampled targets. See Weighting. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-sampling/sampling-nearest-bounds.html#outputs",
    "relUrl": "/doc-sampling/sampling-nearest-bounds.html#outputs"
  },"1504": {
    "doc": "Sample Nearest Bounds",
    "title": "Tagging",
    "content": "Some high level tags may be applied to the data based on overal sampling. | Tag | Description | . | &lt;span class=\"etag\"&gt;Has Successes Tag&lt;/span&gt; | If enabled, add the specified tag to the output data **if at least a single target** has been sampled. | . | &lt;span class=\"etag\"&gt;Has No Successes Tag&lt;/span&gt; | If enabled, add the specified tag to the output data **if no target** has been sampled. | . Note that fail/success tagging will be affected by points filter as well; since filtered out points are considered fails. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-sampling/sampling-nearest-bounds.html#tagging",
    "relUrl": "/doc-sampling/sampling-nearest-bounds.html#tagging"
  },"1505": {
    "doc": "Sample Nearest Bounds",
    "title": "Advanced",
    "content": ". | Property | Description | . | Process Filtered Out As Fails | If enabled, mark filtered out points as \"failed\". Otherwise, just skip the processing altogether.**Only uncheck this if you want to ensure existing attribute values are preserved.**Default is set to true, as it should be on a first-pass sampling. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-sampling/sampling-nearest-bounds.html#advanced",
    "relUrl": "/doc-sampling/sampling-nearest-bounds.html#advanced"
  },"1506": {
    "doc": "Sample Nearest Bounds",
    "title": "Sample Nearest Bounds",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-sampling/sampling-nearest-bounds.html",
    "relUrl": "/doc-sampling/sampling-nearest-bounds.html"
  },"1507": {
    "doc": "Sample Nearest Points",
    "title": "Sample Nearest Points",
    "content": "PCGEx | Sample : Nearest Point Sample points within a spherical range . The Sample Nearest Points node extracts and blends data from nearby target points within a customizable range, allowing you to fine-tune sampling methods, apply filters, and compute weighted outputs, making it ideal for tasks like proximity-based data collection. InPoints that will sample data from targets Point FiltersPoints filters used to determine which points will be processed. Filtered out points will be treated as failed sampling. TargetsTarget points to read data from OutIn with extra attributes and properties . Table of content . | Sampling . | Sampling Methods | Weighting | . | Blending | Outputs . | Tagging | Advanced | . | . The Sample Nearest Point grabs and blends attributes &amp; properties from a target dataset, as well as other spatial relationship outputs. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-sampling/sampling-nearest-point.html#sample-nearest-points",
    "relUrl": "/doc-sampling/sampling-nearest-point.html#sample-nearest-points"
  },"1508": {
    "doc": "Sample Nearest Points",
    "title": "Sampling",
    "content": ". | Property | Description | . | :**Settings**| |   | . | Sample Method | Selects the sampling method. See [Sampling Methods](#sampling-methods). | . | Range Min | Minimum sampling range. | . | Range Max | Maximum sampling range.**Use 0 to sample all targets.** | . | Local Range Min | If enabled, uses a per-point double attribute value as minimum sampling range. | . | Local Range Max | If enabled, uses a per-point double attribute value as maximum sampling range. | . Points that are not within range are ignored. If no point is found within the specified range, the sampling for that point will be marked as Usuccessful. | **Distance Details**| |   | . | Source | TBD | . | Target | TBD | . | **Weighting**| |   | . | Weight Method | Selects the method used to compute the weight of each target.*See [Weighting](#weighting)*. | . | Weight Over Distance | Curve used to sample the final weight of each target. | . Sampling Methods . | Method | Description | . | &lt;span class=\"ebit\"&gt;All (Within Range)&lt;/span&gt; | Samples all points within the specified range. | . | &lt;span class=\"ebit\"&gt;Closest Target&lt;/span&gt; | Sample the single closest target within the specified range. | . | &lt;span class=\"ebit\"&gt;Farthest Target&lt;/span&gt; | Sample the single farthest target within the specified range. | . Weighting . There is two weighting method available. Full Range and Effective Range. Each method outputs a [0..1] value that will be used to sample the Weight Over Distance curve. However, there is a critical nuance between the two: . | Full Range is a simple normalization, each target distance is divided by the longest one. As such, it’s very unlikely the curve will get sampled close to x=0. | Effective Range remaps each target distance using the shortest &amp; longest distance as min/max. As such, the shortest sampled distance will sample the curve at x=0, and the longest at x=1. | . Note that the Effective Range method tends to spread/scale the input set of values – but allows one to leverage the full range of the curve no matter the min/max input values. Hence, using Full Range with only high (or low) input value will only sample a very narrow portion of the curve. Important note: when using the Within range sample method, some outputs will use the final weighted position/transforms for their calculations; although mathematically correct, this may yield unusuable/innacurate results. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-sampling/sampling-nearest-point.html#sampling",
    "relUrl": "/doc-sampling/sampling-nearest-point.html#sampling"
  },"1509": {
    "doc": "Sample Nearest Points",
    "title": "Blending",
    "content": ". | Properties | Description | . | Target Attributes | A Name::Blendmode map of the attributes to grab from the target points, and which blendmode to use. | . | Point Propeprties Blending Settings | If enabled, lets you pick &amp; choose which point properties you want to grab from the targets, and which blendmode to use.Use None to prevent a specific property from being grabbed. | . See Blending. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-sampling/sampling-nearest-point.html#blending",
    "relUrl": "/doc-sampling/sampling-nearest-point.html#blending"
  },"1510": {
    "doc": "Sample Nearest Points",
    "title": "Outputs",
    "content": "Outputs are values extracted from the neighbor(s), and written to attributes on the output points. | Output | Description | . | **Generic**| |   | . | &lt;span class=\"eout\"&gt;Success&lt;/span&gt;bool | TBD | . | **Spatial Data**| |   | . | &lt;span class=\"eout\"&gt;Transform&lt;/span&gt;FTransform | TBD | . | &lt;span class=\"eout\"&gt;Look At&lt;/span&gt;FVector | TBD | . | └─ Align | TBD | . | └─ Use Up from… | TBD | . | └─ Up Vector | TBD | . | &lt;span class=\"eout\"&gt;Distance&lt;/span&gt;double | TBD | . | &lt;span class=\"eout\"&gt;Signed Distance&lt;/span&gt;double | TBD | . | └─ Axis | TBD | . | &lt;span class=\"eout\"&gt;Component-wise Distance&lt;/span&gt;FVector | TBD | . | └─ Absolute | TBD | . | &lt;span class=\"eout\"&gt;Angle&lt;/span&gt;double | TBD | . | └─ Axis | TBD | . | └─ Range | TBD | . | &lt;span class=\"eout\"&gt;Num Samples&lt;/span&gt;int32 | TBD | . Based on the selected Sample method, the output values are a weighted average of all the sampled targets. See Weighting. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-sampling/sampling-nearest-point.html#outputs",
    "relUrl": "/doc-sampling/sampling-nearest-point.html#outputs"
  },"1511": {
    "doc": "Sample Nearest Points",
    "title": "Tagging",
    "content": "Some high level tags may be applied to the data based on overal sampling. | Tag | Description | . | &lt;span class=\"etag\"&gt;Has Successes Tag&lt;/span&gt; | If enabled, add the specified tag to the output data **if at least a single target** has been sampled. | . | &lt;span class=\"etag\"&gt;Has No Successes Tag&lt;/span&gt; | If enabled, add the specified tag to the output data **if no target** has been sampled. | . Note that fail/success tagging will be affected by points filter as well; since filtered out points are considered fails. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-sampling/sampling-nearest-point.html#tagging",
    "relUrl": "/doc-sampling/sampling-nearest-point.html#tagging"
  },"1512": {
    "doc": "Sample Nearest Points",
    "title": "Advanced",
    "content": ". | Property | Description | . | Process Filtered Out As Fails | If enabled, mark filtered out points as \"failed\". Otherwise, just skip the processing altogether.**Only uncheck this if you want to ensure existing attribute values are preserved.**Default is set to true, as it should be on a first-pass sampling. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-sampling/sampling-nearest-point.html#advanced",
    "relUrl": "/doc-sampling/sampling-nearest-point.html#advanced"
  },"1513": {
    "doc": "Sample Nearest Points",
    "title": "Sample Nearest Points",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-sampling/sampling-nearest-point.html",
    "relUrl": "/doc-sampling/sampling-nearest-point.html"
  },"1514": {
    "doc": "Sample Nearest Spline",
    "title": "Sample Nearest Spline",
    "content": "PCGEx | Sample : Nearest Spline Sample informations from the nearest spline . The Sample Nearest Spline node retrieves and blends spatial data from the target splines within a defined range, enabling fine-tuned sampling methods and weighting for tasks such as spline-based proximity analysis, spatial alignment, and extracting relational data. InPoints that will sample data from targets Point FiltersPoints filters used to determine which points will be processed. Filtered out points will be treated as failed sampling. TargetsTarget splines to read data from OutIn with extra attributes and properties . Table of content . | Sampling . | Sampling Methods | Weighting | . | Outputs . | Tagging | Advanced | . | . The Sample Nearest Splines finds nearest(s) target splines and extract relational spatial data from them. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-sampling/sampling-nearest-spline.html#sample-nearest-spline",
    "relUrl": "/doc-sampling/sampling-nearest-spline.html#sample-nearest-spline"
  },"1515": {
    "doc": "Sample Nearest Spline",
    "title": "Sampling",
    "content": ". | Property | Description | . | :**Settings**| |   | . | Sample Inputs | Choose which input splines are to be sampled based on whether they’re closed loop or not. | . | Sample Method | Selects the sampling method. See [Sampling Methods](#sampling-methods). | . | Range Min | Minimum sampling range. | . | Range Max | Maximum sampling range.**Use 0 to sample all targets.** | . | Local Range Min | If enabled, uses a per-point double attribute value as minimum sampling range. | . | Local Range Max | If enabled, uses a per-point double attribute value as maximum sampling range. | . | Distance Settings | TBD | . Splines that are not within range are ignored. If no spline is found within the specified range, the sampling for that point will be marked as Usuccessful. | **Weighting**| |   | . | Weight Method | Selects the method used to compute the weight of each target.*See [Weighting](#weighting)*. | . | Weight Over Distance | Curve used to sample the final weight of each target. | . Sampling Methods . | Method | Description | . | &lt;span class=\"ebit\"&gt;All (Within Range)&lt;/span&gt; | Samples all splines within the specified range. | . | &lt;span class=\"ebit\"&gt;Closest Target&lt;/span&gt; | Sample the single closest target spline within the specified range. | . | &lt;span class=\"ebit\"&gt;Farthest Target&lt;/span&gt; | Sample the single farthest target spline within the specified range. | . Weighting . There is two weighting method available. Full Range and Effective Range. Each method outputs a [0..1] value that will be used to sample the Weight Over Distance curve. However, there is a critical nuance between the two: . | Full Range is a simple normalization, each target distance is divided by the longest one. As such, it’s very unlikely the curve will get sampled close to x=0. | Effective Range remaps each target distance using the shortest &amp; longest distance as min/max. As such, the shortest sampled distance will sample the curve at x=0, and the longest at x=1. | . Note that the Effective Range method tends to spread/scale the input set of values – but allows one to leverage the full range of the curve no matter the min/max input values. Hence, using Full Range with only high (or low) input value will only sample a very narrow portion of the curve. Important note: when using the Within range sample method, some outputs will use the final weighted position/transforms for their calculations; although mathematically correct, this may yield unusuable/innacurate results. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-sampling/sampling-nearest-spline.html#sampling",
    "relUrl": "/doc-sampling/sampling-nearest-spline.html#sampling"
  },"1516": {
    "doc": "Sample Nearest Spline",
    "title": "Outputs",
    "content": "Outputs are values extracted from the neighbor(s), and written to attributes on the output points. | Output | Description | . | **Generic**| |   | . | &lt;span class=\"eout\"&gt;Success&lt;/span&gt;bool | TBD | . | **Spatial Data**| |   | . | &lt;span class=\"eout\"&gt;Transform&lt;/span&gt;FTransform | TBD | . | &lt;span class=\"eout\"&gt;Look At&lt;/span&gt;FVector | TBD | . | └─ Align | TBD | . | └─ Use Up from… | TBD | . | └─ Up Vector | TBD | . | &lt;span class=\"eout\"&gt;Distance&lt;/span&gt;double | TBD | . | &lt;span class=\"eout\"&gt;Signed Distance&lt;/span&gt;double | TBD | . | └─ Axis | TBD | . | └─ Only if Closed | TBD | . | &lt;span class=\"eout\"&gt;Component-wise Distance&lt;/span&gt;FVector | TBD | . | └─ Absolute | TBD | . | &lt;span class=\"eout\"&gt;Angle&lt;/span&gt;double | TBD | . | └─ Axis | TBD | . | └─ Range | TBD | . | &lt;span class=\"eout\"&gt;Time&lt;/span&gt;double | TBD | . | &lt;span class=\"eout\"&gt;Num Inside&lt;/span&gt;int32 | TBD | . | └─ Only if Closed | TBD | . | &lt;span class=\"eout\"&gt;Num Samples&lt;/span&gt;int32 | TBD | . | &lt;span class=\"eout\"&gt;Closed Loop&lt;/span&gt;bool | TBD | . Based on the selected Sample method, the output values are a weighted average of all the sampled targets. See Weighting. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-sampling/sampling-nearest-spline.html#outputs",
    "relUrl": "/doc-sampling/sampling-nearest-spline.html#outputs"
  },"1517": {
    "doc": "Sample Nearest Spline",
    "title": "Tagging",
    "content": "Some high level tags may be applied to the data based on overal sampling. | Tag | Description | . | &lt;span class=\"etag\"&gt;Has Successes Tag&lt;/span&gt; | If enabled, add the specified tag to the output data **if at least a single spline** has been sampled. | . | &lt;span class=\"etag\"&gt;Has No Successes Tag&lt;/span&gt; | If enabled, add the specified tag to the output data **if no spline** was found within range. | . Note that fail/success tagging will be affected by points filter as well; since filtered out points are considered fails. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-sampling/sampling-nearest-spline.html#tagging",
    "relUrl": "/doc-sampling/sampling-nearest-spline.html#tagging"
  },"1518": {
    "doc": "Sample Nearest Spline",
    "title": "Advanced",
    "content": ". | Property | Description | . | Process Filtered Out As Fails | If enabled, mark filtered out points as \"failed\". Otherwise, just skip the processing altogether.**Only uncheck this if you want to ensure existing attribute values are preserved.**Default is set to true, as it should be on a first-pass sampling. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-sampling/sampling-nearest-spline.html#advanced",
    "relUrl": "/doc-sampling/sampling-nearest-spline.html#advanced"
  },"1519": {
    "doc": "Sample Nearest Spline",
    "title": "Sample Nearest Spline",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-sampling/sampling-nearest-spline.html",
    "relUrl": "/doc-sampling/sampling-nearest-spline.html"
  },"1520": {
    "doc": "Sample Nearest Surface",
    "title": "Sample Nearest Surface",
    "content": "PCGEx | Sample : Nearest Surface Sample information from the nearest mesh collision . The Sample Nearest Surface node performs spherical queries to find the closest point on nearby simple colliders within a set radius, sampling spatial data and actor references from overlapping surfaces and applying tags based on query results. InPoints that will be used as origin for finding &amp; sampling the nearest surface Point FiltersPoints filters used to determine which points will be processed. Filtered out points will be treated as failed sampling. Actor ReferencesPoints containing actor references, if that mode is selected. OutIn with extra attributes and properties . Table of content . | Properties | Outputs | Extra properties . | Forwarding | Tagging | Collision Settings | Advanced | . | . The Sample Nearest Surface node allows you to perform a single per-point spherical query to find the closest point on the closest overlapping collider. Please note that this node is not tracking actors. If you change the sampled environment you will need to manually regenerate the graph unless something else already triggers a refresh in editor. Under the hood this find the closest point on the closest collider – this feature is only supported for simple collider and won’t work on complex ones. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-sampling/sampling-nearest-surface.html#sample-nearest-surface",
    "relUrl": "/doc-sampling/sampling-nearest-surface.html#sample-nearest-surface"
  },"1521": {
    "doc": "Sample Nearest Surface",
    "title": "Properties",
    "content": ". | Property | Description | . | :**Settings**| |   | . | Surface Source | Select where you want to read surfaces from: either All (revealing additional actors picking parameters), or Actor References, to sample only specific actors. | . | Actor Reference | Attribute to read actor reference from the Actor References input data. | . | Max Distance | Maximum radius of the overlapping sphere | . | Local Max Distance | If enabled, fetches the overlap sphere radius on a per-point basis using the specified attribute. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-sampling/sampling-nearest-surface.html#properties",
    "relUrl": "/doc-sampling/sampling-nearest-surface.html#properties"
  },"1522": {
    "doc": "Sample Nearest Surface",
    "title": "Outputs",
    "content": "Outputs are values extracted from the overlap query, and written to attributes on the output points. | Output | Description | . | **Generic**| |   | . | &lt;span class=\"eout\"&gt;Success&lt;/span&gt;bool | TBD | . | **Spatial Data**| |   | . | &lt;span class=\"eout\"&gt;Location&lt;/span&gt;FVector | TBD | . | &lt;span class=\"eout\"&gt;Look At&lt;/span&gt;FVector | TBD | . | &lt;span class=\"eout\"&gt;Normal&lt;/span&gt;FVector | TBD | . | &lt;span class=\"eout\"&gt;Distance&lt;/span&gt;double | TBD | . | &lt;span class=\"eout\"&gt;Is Inside&lt;/span&gt;bool | TBD | . | **Actor Data**| |   | . | &lt;span class=\"eout\"&gt;Actor Reference&lt;/span&gt;FSoftObjectPath | TBD | . | &lt;span class=\"eout\"&gt;Phys Mat&lt;/span&gt;FSoftObjectPath | TBD | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-sampling/sampling-nearest-surface.html#outputs",
    "relUrl": "/doc-sampling/sampling-nearest-surface.html#outputs"
  },"1523": {
    "doc": "Sample Nearest Surface",
    "title": "Extra properties",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-sampling/sampling-nearest-surface.html#extra-properties",
    "relUrl": "/doc-sampling/sampling-nearest-surface.html#extra-properties"
  },"1524": {
    "doc": "Sample Nearest Surface",
    "title": "Forwarding",
    "content": "Data forwarding settings from the Actor References input points, if enabled. “Forwarding” settings lets you pick-and-choose which attributes &amp; tags carry over from some data to another. | Property | Description | . | Enabled | Whether attribute forwarding is enabled or not. | . | Preserve Attributes Default Value | If enabled, the node will attempt to create attributes on the data in a way that preserve the original, underlying default value of the attribute.This can be critical in order to identify which data originally belonged to which, as well as properly initializing flags to a desirable default. | . Note that the filters look for a single valid match amongst the list; you cannot create and/or conditions. Filter Details . | Property | Description | . | Filter Mode | Chooses how the filter operates.- All let everything pass.- Exclude filters out the result of the filter.- Include only allows the items that pass the filters. | . | Matches | Lets you define a list of checks pairs: a string value, and a Match Mode. | . | Comma Separated Names | Easy to override, lets you specify a list of comma-separated names.The only caveat is that you can only pick a unique match mode used for each entry. | . | Comma Separated Names Filter | Which filter will be used along the Comma Separated Names. | . | Preserve PCGEx Data | Most of the time you’ll want to leave it to its default value. It ensures PCGEx/ prefixed data are not captured by the filter. | . Filter Modes . | Mode | Description | . | Equals | Checks for strict equality of the filtered value and the associated string. | . | Contains | Checks if the filtered value contains the associated string. | . | Starts With | Checks if the filtered value is prefixed with the associated string. | . | Ends With | Checks if the filtered value is suffixed with the associated string. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-sampling/sampling-nearest-surface.html#forwarding",
    "relUrl": "/doc-sampling/sampling-nearest-surface.html#forwarding"
  },"1525": {
    "doc": "Sample Nearest Surface",
    "title": "Tagging",
    "content": "Some high level tags may be applied to the data based on overal sampling. | Tag | Description | . | &lt;span class=\"etag\"&gt;Has Successes Tag&lt;/span&gt; | If enabled, add the specified tag to the output data **if at least a single query** has been successful. | . | &lt;span class=\"etag\"&gt;Has No Successes Tag&lt;/span&gt; | If enabled, add the specified tag to the output data **if all queries** failed. | . Note that fail/success tagging will be affected by points filter as well; since filtered out points are considered fails. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-sampling/sampling-nearest-surface.html#tagging",
    "relUrl": "/doc-sampling/sampling-nearest-surface.html#tagging"
  },"1526": {
    "doc": "Sample Nearest Surface",
    "title": "Collision Settings",
    "content": ". These settings drive which objects will be ignored during the collision checks. | Property | Description | . | Trace Complex | Whether to collide against complex or simple collision.Note that this setting may not be supported everywhere. | . | Collision Type | The type of collision check. Can be one of:-Channel-ObjectType-ProfileThe selected mode changes which settings are available. | . | Collision Channel | Lets you pick the collision channel to check against. | . | Collision Object Type | Lets you pick the object type to check against. | . | Collision Profile Name | Lets you set a custom profile name to check against. | . | Ignore Self | If enabled, will ignore the current PCG Component’ actor owner. | . | Ignored Actor Selector | Vanilla PCG Actor Selector. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-sampling/sampling-nearest-surface.html#collision-settings",
    "relUrl": "/doc-sampling/sampling-nearest-surface.html#collision-settings"
  },"1527": {
    "doc": "Sample Nearest Surface",
    "title": "Advanced",
    "content": ". | Property | Description | . | Process Filtered Out As Fails | If enabled, mark filtered out points as \"failed\". Otherwise, just skip the processing altogether.**Only uncheck this if you want to ensure existing attribute values are preserved.**Default is set to true, as it should be on a first-pass sampling. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-sampling/sampling-nearest-surface.html#advanced",
    "relUrl": "/doc-sampling/sampling-nearest-surface.html#advanced"
  },"1528": {
    "doc": "Sample Nearest Surface",
    "title": "Sample Nearest Surface",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-sampling/sampling-nearest-surface.html",
    "relUrl": "/doc-sampling/sampling-nearest-surface.html"
  },"1529": {
    "doc": "Sample Overlap Stats",
    "title": "Sample Overlap Stats",
    "content": "PCGEx | Sample : Overlap Stats Compute overlap statistics between point collections . The Sample Overlap Stats node computes overlap statistics between point collections, providing per-point and per-collection overlap data such as count, sub-count, and relative measures, with optional tagging for overlap detection. InPoint collections to be checked against each other Point FiltersPoints filters used to determine which points will be processed. Filtered out points will be treated as not overlapping. OutIn with extra attributes and properties . Table of content . | Properties | Outputs . | Tagging | . | . The Sample Overlap Stats is designed to extract per-point overlap data between entire collections. It is a bit of a special node, in the sense that it works cross-inputs. It is primarily designed for PCGDataAsset workflows, to check overlaps against external points. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-sampling/sampling-overlap-stats.html#sample-overlap-stats",
    "relUrl": "/doc-sampling/sampling-overlap-stats.html#sample-overlap-stats"
  },"1530": {
    "doc": "Sample Overlap Stats",
    "title": "Properties",
    "content": ". | Property | Description | . | :**Settings**| |   | . | Bounds Source | Which point bounds to use. | . | Min Threshold | Minimum overlap threhsold required for an overlap to be registered. | . | Threshold Measure | Let you pick how the overlap threshold is measured. Either as a Relative measure (*in which case the Min Threhsold is treated as an overlap percentage*), or a fixed, Discrete penetration measurement, *in which case the threshold is treated as world units.* | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-sampling/sampling-overlap-stats.html#properties",
    "relUrl": "/doc-sampling/sampling-overlap-stats.html#properties"
  },"1531": {
    "doc": "Sample Overlap Stats",
    "title": "Outputs",
    "content": "Outputs are a mix of per-collection &amp; per-point overlap data. | Output | Description | . | &lt;span class=\"eout\"&gt;Overlap Count&lt;/span&gt;int32 | This represents the number of other input collection that have a registered overlap with this point. | . | &lt;span class=\"eout\"&gt;Overlap Sub Count&lt;/span&gt;int32 | This represents the number of other individual points that have a registered overlap with this point, all inputs combined.*Depending on your data, this number can be very high.* | . | &lt;span class=\"eout\"&gt;Relative Overlap Count&lt;/span&gt;double | This is the same as Overlap Count, but normalized against the maximum value found during initial processing. | . | &lt;span class=\"eout\"&gt;Relative Overlap SubCount&lt;/span&gt;double | This is the same as Overlap Sub Count, but normalized against the maximum value found during initial processing. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-sampling/sampling-overlap-stats.html#outputs",
    "relUrl": "/doc-sampling/sampling-overlap-stats.html#outputs"
  },"1532": {
    "doc": "Sample Overlap Stats",
    "title": "Tagging",
    "content": "Some high level tags may be applied to the data based on overlap sampling. This comes very handy to optimize further operations only on overlapping elements, especially if you intend to pair this node with . | Tag | Description | . | &lt;span class=\"etag\"&gt;Has Any Overlap&lt;/span&gt; | If enabled, add the specified tag to the output data **if at least a single overlap** has been found. | . | &lt;span class=\"etag\"&gt;Has No OVerlap&lt;/span&gt; | If enabled, add the specified tag to the output data **if no overlap** has been found. | . Note that overlap/no-overlap tagging will be affected by points filter as well; since filtered out points are considered fails. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-sampling/sampling-overlap-stats.html#tagging",
    "relUrl": "/doc-sampling/sampling-overlap-stats.html#tagging"
  },"1533": {
    "doc": "Sample Overlap Stats",
    "title": "Sample Overlap Stats",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-sampling/sampling-overlap-stats.html",
    "relUrl": "/doc-sampling/sampling-overlap-stats.html"
  },"1534": {
    "doc": "Pack Actor Data",
    "title": "Pack Actor Data",
    "content": "PCGEx | Pack Actor Data Conveniently process actors and output data using custom blueprints . The Pack Actor Data node is a quick and dirty way to fetch custom data from actor references and write then to points. InPoints with an actor reference OutPoints with added data . Table of content . | Properties | . The Pack Actor Data provide a quick-and-dirty (yet highly customizable) way to extract per-actor data from a list of actor reference and write that data to these same points. If you’re working with 5.5 and above, and just need a single property, have a look at the native Get Property from Object Path as it may fit your needs. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-sampling/sampling-pack-actor-data.html#pack-actor-data",
    "relUrl": "/doc-sampling/sampling-pack-actor-data.html#pack-actor-data"
  },"1535": {
    "doc": "Pack Actor Data",
    "title": "Properties",
    "content": ". WIP / TBD . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-sampling/sampling-pack-actor-data.html#properties",
    "relUrl": "/doc-sampling/sampling-pack-actor-data.html#properties"
  },"1536": {
    "doc": "Pack Actor Data",
    "title": "Pack Actor Data",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-sampling/sampling-pack-actor-data.html",
    "relUrl": "/doc-sampling/sampling-pack-actor-data.html"
  },"1537": {
    "doc": "Wait for PCG Data",
    "title": "Wait for PCG Data",
    "content": "PCGEx | Wait for PCG Data Wait for PCG Components data to be available and grabs it. The Line Trace node performs a single line trace for each point, using a local attribute or property as direction &amp; size. TargetsPoints that contain a list of target actors that will be inspected for PCG Component Roaming DataData that wasn't part of the template. Optional output. Table of content . | Properties | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-sampling/sampling-wait-for-data.html#wait-for-pcg-data",
    "relUrl": "/doc-sampling/sampling-wait-for-data.html#wait-for-pcg-data"
  },"1538": {
    "doc": "Wait for PCG Data",
    "title": "Properties",
    "content": ". TBD / WIP . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-sampling/sampling-wait-for-data.html#properties",
    "relUrl": "/doc-sampling/sampling-wait-for-data.html#properties"
  },"1539": {
    "doc": "Wait for PCG Data",
    "title": "Wait for PCG Data",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-sampling/sampling-wait-for-data.html",
    "relUrl": "/doc-sampling/sampling-wait-for-data.html"
  },"1540": {
    "doc": "A* Star",
    "title": "A* Star",
    "content": "A* Algorithm . A* Algorithm implementation. A* on Wikipedia . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/search/search-astar.html#a-star",
    "relUrl": "/doc-pathfinding/search/search-astar.html#a-star"
  },"1541": {
    "doc": "A* Star",
    "title": "A* Star",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/search/search-astar.html",
    "relUrl": "/doc-pathfinding/search/search-astar.html"
  },"1542": {
    "doc": "Dijkstra",
    "title": "Dijkstra",
    "content": "Dijkstra’s Algorithm . Dijkstra’s Algorithm implementation. Dijkstra on Wikipedia . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/search/search-djikstra.html#dijkstra",
    "relUrl": "/doc-pathfinding/search/search-djikstra.html#dijkstra"
  },"1543": {
    "doc": "Dijkstra",
    "title": "Dijkstra",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/search/search-djikstra.html",
    "relUrl": "/doc-pathfinding/search/search-djikstra.html"
  },"1544": {
    "doc": "settings-adjacency",
    "title": "Adjacency",
    "content": "| Property | Description | . | :**Settings** : |   | . | Mode | The mode lets you choose how to set the flags value, as a user.- Direct is probably the most useful, as it can be set using an override pin.- Individual lets you use an array where you can set individual bits by their position (index), and whether they’re true or false.- Composite lets you set individual bits using dropdowns. | . Mode : All . This mode consolidate all the connections’ values into a single one to test against. | : **Consolidation** : |   | . | Individual | Test individual neighbors one by one | . | Individual | Test against averaged value of all neighbors | . | Individual | Test against the Min value of all neighbors | . | Individual | Test against the Max value of all neighbors | . | Individual | Test against the Sum value of all neighbors | . DOC TBD . Mode : Some . This mode test individual connections, but only some of them are required to pass for the entire filter to be considered a success. How that “some” is defined relies on a comparison against a threshold: how many neighbors pass the test vs. how many neighbors there are. | : **Threshold Settings** : |   | . | Threshold Comparison | TBD | . | Threshold Type | TBD | . | Threshold Source | TBD | . | Discrete Threshold | TBD | . | Relative Threshold | TBD | . | Threshold Attribute | TBD | . | Threshold Source | TBD | . | Rounding | TBD | . | Threshold Tolerance | TBD | . DOC TBD . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/flag-nodes/settings-adjacency.html#adjacency",
    "relUrl": "/doc-clusters/flag-nodes/settings-adjacency.html#adjacency"
  },"1545": {
    "doc": "settings-adjacency",
    "title": "settings-adjacency",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/flag-nodes/settings-adjacency.html",
    "relUrl": "/doc-clusters/flag-nodes/settings-adjacency.html"
  },"1546": {
    "doc": "settings-attribute-to-tags",
    "title": "settings-attribute-to-tags",
    "content": "Attribute to tags settings lets you pick attributes on references points that will be converted to tags on the data they are matched to. | Property | Description | . | Add Index Tag | Use reference point index to tag output data. | . | &lt;span class=\"etag\"&gt;Index Tag Prefix&lt;/span&gt; | If Add Index Tag is enabled, lets you set a prefix to the reference index. | . | Attributes | List of attributes on reference points to turn into tags. | . Note that while any attribute type is supported, they will be converted to a string under the hood, which may yield unexpected values. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/settings/settings-attribute-to-tags.html",
    "relUrl": "/settings/settings-attribute-to-tags.html"
  },"1547": {
    "doc": "settings-blending-sampling",
    "title": "settings-blending-sampling",
    "content": "| Properties | Description | . | &lt;span class=\"eout\"&gt;Target Attributes&lt;/span&gt; | A Name::Blendmode map of the attributes to grab from the target points, and which blendmode to use. | . | **Point Propeprties Blending Settings** | If enabled, lets you pick &amp; choose which point properties you want to grab from the targets, and which blendmode to use.*Use None to prevent a specific property from being grabbed.* | . See Blending. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/settings/settings-blending-sampling.html",
    "relUrl": "/settings/settings-blending-sampling.html"
  },"1548": {
    "doc": "settings-bounds-type",
    "title": "settings-bounds-type",
    "content": "| : Bounds type | |   | . | &lt;span class=\"ebit\"&gt;Scaled Bounds&lt;/span&gt; | Point’ bounds scaled by point’ scale.*These are the bounds shown by default when using the debug node in extent mode.* | . | &lt;span class=\"ebit\"&gt;Density Bounds&lt;/span&gt; | Point’ bounds scaled by point’ scale, expanded by point’ steepness property.*These are the bounds used by a lot of vanilla PCG nodes.* | . | &lt;span class=\"ebit\"&gt;Bounds&lt;/span&gt; | Raw, unscaled point’ bounds. | . Point bounds are determined by its BoundsMin and BoundsMax properties. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/settings/settings-bounds-type.html",
    "relUrl": "/settings/settings-bounds-type.html"
  },"1549": {
    "doc": "settings-carry-over",
    "title": "settings-carry-over",
    "content": "“Carry over” settings lets you pick-and-choose which attributes &amp; tags carry over to the new data. | Property | Description | . | Preserve Attributes Default Value | If enabled, the node will attempt to create attributes on the data in a way that preserve the original, underlying default value of the attribute.*This can be critical in order to identify which data originally belonged to which, as well as properly initializing flags to a desirable default.* | . | &lt;span class=\"eout\"&gt;Attributes&lt;/span&gt; | Lets you pick and choose which attributes to keep or dismiss. | . | &lt;span class=\"etag\"&gt;**Tags**&lt;/span&gt; | Lets you pick and choose which attributes to keep or dismiss. | . Both Attributes &amp; Tags share the same string-based filters. Note that the filters look for a single valid match amongst the list; you cannot create and/or conditions. Filter Details . | Property | Description | . | Filter Mode | Chooses how the filter operates.- All let everything pass.- Exclude filters *out* the result of the filter.- Include only allows the items that pass the filters. | . | Matches | Lets you define a list of checks pairs: a string value, and a Match Mode. | . | Comma Separated Names | Easy to override, lets you specify a list of comma-separated names.*The only caveat is that you can only pick a unique match mode used for each entry.* | . | Comma Separated Names Filter | Which filter will be used along the Comma Separated Names. | . | Preserve PCGEx Data | Most of the time you’ll want to leave it to its default value. It ensures PCGEx/ prefixed data are not captured by the filter. | . Filter Modes . | Mode | Description | . | &lt;span class=\"ebit\"&gt;Equals&lt;/span&gt; | Checks for strict equality of the filtered value and the associated string. | . | &lt;span class=\"ebit\"&gt;Contains&lt;/span&gt; | Checks if the filtered value contains the associated string. | . | &lt;span class=\"ebit\"&gt;Starts With&lt;/span&gt; | Checks if the filtered value is prefixed with the associated string. | . | &lt;span class=\"ebit\"&gt;Ends With&lt;/span&gt; | Checks if the filtered value is suffixed with the associated string. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/settings/settings-carry-over.html",
    "relUrl": "/settings/settings-carry-over.html"
  },"1550": {
    "doc": "settings-closed-loop",
    "title": "settings-closed-loop",
    "content": "| Property | Description | . | **Closed loop**| |   | . | Scope | The scope/selection of input data that are to be processed as closed paths or not.-All processes all input as selected below.-All but tagged inverts the scope based on tags.*Default is, all paths are considered open, unless they are tagged with ClosedLoop.* | . | Closed Loop | Whether to consider input data that are part of the scope as closed loop or not. | . | Comma Separated Tags | Tags to check for. Any match uses the inverse of the above value. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/settings/settings-closed-loop.html",
    "relUrl": "/settings/settings-closed-loop.html"
  },"1551": {
    "doc": "settings-cluster-output",
    "title": "settings-cluster-output",
    "content": "| Property | Description | . | Edge Position | If enabled, edge point’ position will be the result of that value used as a lerp between its start and end Vtx point. | . | : **Pruning** :| |   | . | Min Vtx Count | If enabled, only ouputs clusters that have more ( &gt; ) Vtx than the specified number. | . | Max Vtx Count | If enabled, only ouputs clusters that have less ( &lt; ) Vtx than the specified number. | . | Min Edge Count | If enabled, only ouputs clusters that have more ( &gt; ) Edge than the specified number. | . | Max Edge Count | If enabled, only ouputs clusters that have less ( &lt; ) Edge than the specified number. | . | : **Misc** :| |   | . | Refresh Edge Seed | If enabled, Edge points gets a fresh seed. | . | Build and Cache Cluster | If enabled, pre-build and cache cluster along with the point data.**This has a slight memory cost associated to it, but can offer tremendous performance improvement.***If disabled, cluster processors that comes down the line have to rebuild clusters from point data, which is very costly as they are also tested for errors and possible disconnections in the process.* | . | Expand Clusters | If enabled, also build &amp; cache another layer of cache data.**This can have a significant memory cost, as well as a minimal performance overhead, but can greatly improve certain specific operations down the line.** | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/settings/settings-cluster-output.html",
    "relUrl": "/settings/settings-cluster-output.html"
  },"1552": {
    "doc": "settings-col-asset",
    "title": "settings-col-asset",
    "content": ". Common properties . Common properties are properties shared amonst all asset collection’ entries . | Property | Description | . | : **Sub Collection** :| |   | . | Sub Collection | If Is Sub Collection is enabled, lets you pick an **Asset Collection** that will work like a list of alternative choices for this entry. | . | Is Sub Collection | Whether this entry is a sub-collection or not.Enabling this option will reveal the **Asset Collection** picker. | . | : **Settings** :| |   | . | Weight | The weight of this entry, relative to the others in the list.Higher weights means higher chance of being picked, if the context is using weighted random selection. | . | Category | A category associated with this entry. *Think of it as a unique tag.* | . | Tags | A list of unique tags that can be forwarded to components using this entry.*Note that not all nodes can handle tags.* | . An entry Weight is not only used for Weighted Random selection, but is also used to sort entries in certain cases; among which Indexed Weight (Ascending/Descending) distribution mode of the Asset Staging node. Variations . Optionally, you may enter a few random ranges for staging nodes to use, should you want to. This can come in handy if you want to have high-level, per-asset variations. | : **Positions** : | *Additive* | . | Offset Min | Minimum offset range. | . | Offset Max | Maximum offset range. | . | Absolute offset | Whether the offset should be applied in world space, or \"local\" to the point’ transform. | . | : **Rotation** : | *Additive* | . | Rotation Min | Minimum rotation offset range. | . | Rotation Max | Maximum rotation offset range. | . | : **Scale** : | *Multiplicative* | . | Scale Min | Minimum scale multiplier range. | . | Scale Max | Maximum scale multiplier range. | . | Uniform Scale | Whether the random scale multiplier should be applied per-component or uniformly (*in which case it uses X for all components*). | . Note that variations are never applied by default by any nodes, and are considered an advanced tweak. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-assets/asset-collections/settings-col-asset.html",
    "relUrl": "/doc-assets/asset-collections/settings-col-asset.html"
  },"1553": {
    "doc": "settings-collisions",
    "title": "settings-collisions",
    "content": "These settings drive which objects will be ignored during the collision checks. | Property | Description | . | Trace Complex | Whether to collide against complex or simple collision.*Note that this setting may not be supported everywhere.* | . | Collision Type | The type of collision check. Can be one of:-Channel-ObjectType-Profile*The selected mode changes which settings are available.* | . | Collision Channel | Lets you pick the collision channel to check against. | . | Collision Object Type | Lets you pick the object type to check against. | . | Collision Profile Name | Lets you set a custom profile name to check against. | . | Ignore Self | If enabled, will ignore the current PCG Component’ actor owner. | . | Ignored Actor Selector | Vanilla PCG Actor Selector. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/settings/settings-collisions.html",
    "relUrl": "/settings/settings-collisions.html"
  },"1554": {
    "doc": "settings-compare-bitmask",
    "title": "settings-compare-bitmask",
    "content": "| Comparison | Data | . | &lt;span class=\"ebit\"&gt;Match (any)&lt;/span&gt; | Value &amp; Mask != 0 (At least some flags in the mask are set) | . | &lt;span class=\"ebit\"&gt;Match (all)&lt;/span&gt; | Value &amp; Mask == Mask (All the flags in the mask are set) | . | &lt;span class=\"ebit\"&gt;Match (strict)&lt;/span&gt; | Value == Mask (Flags strictly equals mask) | . | &lt;span class=\"ebit\"&gt;No Match (any)&lt;/span&gt; | Value &amp; Mask == 0 (Flags does not contains any from mask) | . | &lt;span class=\"ebit\"&gt;No Match (all)&lt;/span&gt; | Value &amp; Mask != Mask (Flags does not contains the mask) | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/settings/settings-compare-bitmask.html",
    "relUrl": "/settings/settings-compare-bitmask.html"
  },"1555": {
    "doc": "settings-compare-numeric",
    "title": "settings-compare-numeric",
    "content": "| Comparison | Data | . | &lt;span class=\"ebit\"&gt;==&lt;/span&gt; | Strictly equal. | . | &lt;span class=\"ebit\"&gt;!=&lt;/span&gt; | Strictly not equal. | . | &lt;span class=\"ebit\"&gt; &gt;=&lt;/span&gt; | Equal or greater. | . | &lt;span class=\"ebit\"&gt;&lt;=&lt;/span&gt; | Equal or smaller. | . | &lt;span class=\"ebit\"&gt; &gt;&lt;/span&gt; | Strictly greater. | . | &lt;span class=\"ebit\"&gt;&lt; &lt;/span&gt; | Strictly smaller. | . | &lt;span class=\"ebit\"&gt;~=&lt;/span&gt; | Nearly equal. | . | &lt;span class=\"ebit\"&gt;!~=&lt;/span&gt; | Nearly not equal. | . Approximative comparison will reveal an additional parameter, dubbed Tolerance. This represents the size of acceptable approximation for the comparison to pass. For example, when checking if 0.5 ~= 0.4 with a tolerance of 0.1 will return true. Large tolerances can be a great, cheap way to achieve results akin to a “within range” comparison! . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/settings/settings-compare-numeric.html",
    "relUrl": "/settings/settings-compare-numeric.html"
  },"1556": {
    "doc": "settings-compare-string",
    "title": "settings-compare-string",
    "content": "| Comparison | Data | . | &lt;span class=\"ebit\"&gt;==&lt;/span&gt; | Strictly equal. | . | &lt;span class=\"ebit\"&gt;!=&lt;/span&gt; | Strictly not equal. | . | &lt;span class=\"ebit\"&gt;== (Length)&lt;/span&gt; | String lengths are strictly equal. | . | &lt;span class=\"ebit\"&gt;!= (Length)&lt;/span&gt; | String lengths are strictly not equal. | . | &lt;span class=\"ebit\"&gt; &gt;= (Length)&lt;/span&gt; | String length is equal or greater. | . | &lt;span class=\"ebit\"&gt;&lt;= (Length)&lt;/span&gt; | String lengths are is equal or smaller. | . | &lt;span class=\"ebit\"&gt; &gt; (Length)&lt;/span&gt; | String lengths is strictly greater. | . | &lt;span class=\"ebit\"&gt;&lt; (Length)&lt;/span&gt; | String lengths is Strictly smaller. | . | &lt;span class=\"ebit\"&gt; &gt; (Locale)&lt;/span&gt; | String locale is strictly greater.*In alphabetical order. (Z is greater than A)* | . | &lt;span class=\"ebit\"&gt;&lt; (Locale)&lt;/span&gt; | String locale is strictly smaller.*In alphabetical order. (A is smaller than Z)* | . | &lt;span class=\"ebit\"&gt;Contains&lt;/span&gt; | Check if string is contained in another one.*Useful if you have solid naming conventions.* | . | &lt;span class=\"ebit\"&gt;Starts With&lt;/span&gt; | Check if the string starts with another one.*Useful for prefixes.* | . | &lt;span class=\"ebit\"&gt;Ends With&lt;/span&gt; | Check if the string ends with another one.*Useful for suffixes.* | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/settings/settings-compare-string.html",
    "relUrl": "/settings/settings-compare-string.html"
  },"1557": {
    "doc": "settings-dot-comparison",
    "title": "settings-dot-comparison",
    "content": "| Property | Description | . | Comparison | Which comparison to use.*See [Numeric comparisons](/PCGExtendedToolkit/doc-general/general-comparisons.html#numeric-comparisons).* | . | Dot Units | Let you choose to work either with normalized dot range (-1 / 1) or degrees.*This affects how the attribute Dot value will be interpreted as well.* | . | Unsigned Dot | When enabled, the comparison will occur against an absolute dot value.*This is especially useful when testing against undirected lines.* | . | Dot Value | The type of value used for this probe’ search radius; either a Constant value or fetched from anAttribute | . | *(Dot or Degrees)* Constant | Constant to compare against. | . | *(Dot or Degrees)* Attribute | Constant to compare against. | . | *(Dot or Degrees)* Tolerance | Comparison tolerance, if the selected comparison is an approximative (~) one. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/settings/settings-dot-comparison.html",
    "relUrl": "/settings/settings-dot-comparison.html"
  },"1558": {
    "doc": "settings-edge-direction",
    "title": "settings-edge-direction",
    "content": "| Property | Description | . | Direction Method | Defines which endpoints \"order\" will be used to define the direction reference for the ouputs. | . | Direction Choice | Further refines the direction method, based on the above selection.-Smallest to Greatest will order direction reference metrics in ascending order.-Greatest to Smallest will order direction reference metrics in descending order.*Really it’s how the endpoint reference value is sorted, but I couldn’t call that Direction’ direction.* | . | Dir Source Attribute | The attribute that will be used by the selected method. | . If the selected method is Edge Dot Attribute, the attribute will be read from Edges as an FVector direction. Method . The Direction method, combined with the Direction Choice determine which endpoint should be considered the Start &amp; End of the edge. The “direction” of the edge used for computing outputs &amp; properties is the safe normal going from the start to the end of the edge. | Mode | Description | . | &lt;span class=\"ebit\"&gt;Endpoints order&lt;/span&gt; | Will use the endpoints’ as ordered during cluster construction. | . | &lt;span class=\"ebit\"&gt;Endpoints indices&lt;/span&gt; | Will use the endpoints’ point index. | . | &lt;span class=\"ebit\"&gt;Endpoints Sort&lt;/span&gt; | Enables the use of any number of [Sorting Rules](/PCGExtendedToolkit/doc-misc/sort-points/sort-rule.html) to determine direction.*This method, while more expensive, is the most efficient.* | . | &lt;span class=\"ebit\"&gt;Edge Dot Attribute&lt;/span&gt; | Will use an attribute (converted to an FVector) from the edges’ and do a Dot Product with the edge’ direction.*This method, combined with Direction Choice offers full control over direction.* | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/settings/settings-edge-direction.html",
    "relUrl": "/settings/settings-edge-direction.html"
  },"1559": {
    "doc": "settings-extra-weight",
    "title": "settings-extra-weight",
    "content": "Extra Weighting . | Property | Description | . | Weight up Visited | If enabled, points and edges will accumulate additional weight are paths are found.This allows you to make \"already in use\" points &amp; edges either more or less desirable for the next internal execution. | . | Visited Points Weight Factor | The weight to add to points that have been visited. This is a multiplier of the Heuristic’ Modifiers Reference Weight.*The weight is added each time a point is used.* | . | Visited Edges Weight Factor | The weight to add to edges that have been visited. This is a multiplier of the Heuristic’ Modifiers Reference Weight.*The weight is added each time an edge is used.* | . Important note on weighting up visited Vtx and Edges: . | The weight is only computed for the pathfinding node and isn’t carried over or cached. | Enabling this feature breaks parallelism. Task are still ran asynchronously, but each path must wait for the previous one to be computed. Impact is usually negligible, but if you have lots of paths, it may take noticeably more time to process. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/settings/settings-extra-weight.html",
    "relUrl": "/settings/settings-extra-weight.html"
  },"1560": {
    "doc": "settings-forward",
    "title": "settings-forward",
    "content": "“Forwarding” settings lets you pick-and-choose which attributes &amp; tags carry over from some data to another. | Property | Description | . | Enabled | Whether attribute forwarding is enabled or not. | . | Preserve Attributes Default Value | If enabled, the node will attempt to create attributes on the data in a way that preserve the original, underlying default value of the attribute.*This can be critical in order to identify which data originally belonged to which, as well as properly initializing flags to a desirable default.* | . Note that the filters look for a single valid match amongst the list; you cannot create and/or conditions. Filter Details . | Property | Description | . | Filter Mode | Chooses how the filter operates.- All let everything pass.- Exclude filters *out* the result of the filter.- Include only allows the items that pass the filters. | . | Matches | Lets you define a list of checks pairs: a string value, and a Match Mode. | . | Comma Separated Names | Easy to override, lets you specify a list of comma-separated names.*The only caveat is that you can only pick a unique match mode used for each entry.* | . | Comma Separated Names Filter | Which filter will be used along the Comma Separated Names. | . | Preserve PCGEx Data | Most of the time you’ll want to leave it to its default value. It ensures PCGEx/ prefixed data are not captured by the filter. | . Filter Modes . | Mode | Description | . | &lt;span class=\"ebit\"&gt;Equals&lt;/span&gt; | Checks for strict equality of the filtered value and the associated string. | . | &lt;span class=\"ebit\"&gt;Contains&lt;/span&gt; | Checks if the filtered value contains the associated string. | . | &lt;span class=\"ebit\"&gt;Starts With&lt;/span&gt; | Checks if the filtered value is prefixed with the associated string. | . | &lt;span class=\"ebit\"&gt;Ends With&lt;/span&gt; | Checks if the filtered value is suffixed with the associated string. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/settings/settings-forward.html",
    "relUrl": "/settings/settings-forward.html"
  },"1561": {
    "doc": "settings-fuse-details",
    "title": "settings-fuse-details",
    "content": "| Property | Description | . | Target Distance | Target Distance reference..*Whether to consider point bounds, and if so, how.* | . | Fuse Method | Lets you choose the method for finding neighbors &amp; collocated points | . | Voxel Grid Offset | Offset the voxelized grid by an constant amount.*By default the center of the grid is 0,0,0, which may look like an undersirable offset. That offset can be manually compensated using this parameter.* | . | Inline Insertion | **Using the Octree fuse method is not deterministic by default.**Enabling inlined insertion will make it so, at the cost of speed. | . | Source Distance | Source Distance reference.*Whether to consider point bounds, and if so, how.* | . | **Tolerance** | |   | . | Component Wise Tolerance | If enabled, lets you set individual tolerance in world space for each X, Y and Z axis. | . | Tolerance | Uniform tolerance. This represent the radius within which elements will be considered in fuse range. | . | Tolerances | If enabled, represent individual axis’ radius within which elements will be considered in fuse range. | . | Local Tolerance | If enabled, lets your use per-point tolerance value.**NOT IMPLEMENTED** | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/settings/settings-fuse-details.html",
    "relUrl": "/settings/settings-fuse-details.html"
  },"1562": {
    "doc": "settings-hash-comparison",
    "title": "settings-hash-comparison",
    "content": "| Property | Description | . | Hash Tolerance Value | Where to read the tolerance from. Can be a per-point Attribute, or an easily overridable Constant. | . | Hash Tolerance Attribute | Attribute to read tolerance from. | . | Hash Tolerance Constant | Constant hash tolerance value. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/settings/settings-hash-comparison.html",
    "relUrl": "/settings/settings-hash-comparison.html"
  },"1563": {
    "doc": "settings-heuristics-local-weight",
    "title": "settings-heuristics-local-weight",
    "content": "| **Local Weight**| |   | . | Use Local Weight Multiplier | If enabled, this heuristic will be using a dynamic, per-point weight factor. | . | Local Weight Multiplier Source | Whether to read the weight from Vtx or Edges points. | . | Local Weight Multiplier Attribute | Attribute to read the local weight from. | . | **Roaming**| |   | . | UVW Seed | Bounds-relative roaming seed point | . | UVW Goal | Bounds-relative roaming goal point | . Roaming seed/goal points are used as fallback in contexts that are using heuristics but don’t have explicit seed/goals; such as Cluster Refine‘MST or Score-based refinements. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/heuristics/settings-heuristics-local-weight.html",
    "relUrl": "/doc-pathfinding/heuristics/settings-heuristics-local-weight.html"
  },"1564": {
    "doc": "settings-heuristics",
    "title": "settings-heuristics",
    "content": "| Property | Description | . | **Basics**| |   | . | Weight Factor | Weight of this heuristic against other concurrent heuristics.*The higher the value, the more important it is during resolution.* | . | Invert | Whether the score of this heuristic should be inverted.*This effectively samples the score curve backwards.* | . | Score Curve | Curve over which the heuristic values will be remapped. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-pathfinding/heuristics/settings-heuristics.html",
    "relUrl": "/doc-pathfinding/heuristics/settings-heuristics.html"
  },"1565": {
    "doc": "settings-index-safety",
    "title": "settings-index-safety",
    "content": "The index safety property controls how invalid/out of bounds input values are handled. | Safety method | |   | . | &lt;span class=\"ebit\"&gt;Ignore&lt;/span&gt; | Invalid indices will be ignored and won’t be processed further. | . | &lt;span class=\"ebit\"&gt;Tile&lt;/span&gt; | Index is tiled (*wrapped around*) the context’ valid min/max range. | . | &lt;span class=\"ebit\"&gt;Clamp&lt;/span&gt; | Index is clamped between the context’ valid min/max range. | . | &lt;span class=\"ebit\"&gt;Yoyo&lt;/span&gt; | Index bounces back and forth between the context’ valid min/max range. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/settings/settings-index-safety.html",
    "relUrl": "/settings/settings-index-safety.html"
  },"1566": {
    "doc": "settings-influence",
    "title": "settings-influence",
    "content": "| Property | Description | . | :**Settings**| |   | . | Influence | Interpolate between the original position and the final, relaxed position.- 1.0 means fully relaxed- 0.0 means the original position is preserved. | . | **Local Influence** | When enabled, this allows you to use a per-point influence value.*This is especially useful for \"pinning\" specific points.* | . | Progressive Influence | When enabled, Influence is **applied between each iteration**, instead of once after all iterations have been processed.*This is more expensive but yield more good looking results, especially with non-uniform local influence.* | . Note that while the default Influence is clamped, the local influence is purposefully not clamped, allowing for undershooting or overshooting the influence’ interpolation between the relaxed and original position. Use carefully. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/settings/settings-influence.html",
    "relUrl": "/settings/settings-influence.html"
  },"1567": {
    "doc": "settings-intersect-edge-edge",
    "title": "settings-intersect-edge-edge",
    "content": "| Property | Description | . | Enable Self Intersection | If enabled, a cluster will test if intersection exists against itself. Otherwise, only check against other clusters. | . | **Tolerance** | |   | . | Tolerance | Uniform tolerance. This represent the radius within which elements will be considered in fuse range. | . | Min Angle | If enabled, only considers edges to be intersecting if their angle is greater than the specified value. | . | Max Angle | If enabled, only considers edges to be intersecting if their angle is smaller than the specified value. | . | **Outputs** | |   | . | &lt;span class=\"eout\"&gt;Crossing Attribute Name&lt;/span&gt;bool | If enabled, flag the edges’ intersection point. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/settings/settings-intersect-edge-edge.html",
    "relUrl": "/settings/settings-intersect-edge-edge.html"
  },"1568": {
    "doc": "settings-intersect-point-edge",
    "title": "settings-intersect-point-edge",
    "content": "| Property | Description | . | Enable Self Intersection | If enabled, a cluster will test if intersection exists against itself. Otherwise, only check against other clusters. | . | **Fuse Details** | |   | . | Source Distance | Source Distance reference.*Whether to consider point bounds, and if so, how.* | . | Component Wise Tolerance | If enabled, lets you set individual tolerance in world space for each X, Y and Z axis. | . | Tolerance | Uniform tolerance. This represent the radius within which elements will be considered in fuse range. | . | Tolerances | If enabled, represent individual axis’ radius within which elements will be considered in fuse range. | . | Local Tolerance | If enabled, lets your use per-point tolerance value.**NOT IMPLEMENTED** | . | **Outputs** | |   | . | Snap on Edge | If enabled, snap the intersection position onto the original edge, as opposed to the reverse. | . | &lt;span class=\"eout\"&gt;Intersector Attribute Name&lt;/span&gt;bool | If enabled, flag the points that intersected with an edge. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/settings/settings-intersect-point-edge.html",
    "relUrl": "/settings/settings-intersect-point-edge.html"
  },"1569": {
    "doc": "settings-intersect-point-point",
    "title": "settings-intersect-point-point",
    "content": "| Property | Description | . | **Fuse Details** | |   | . | Target Distance | Target Distance reference..*Whether to consider point bounds, and if so, how.* | . | Fuse Method | Lets you choose the method for finding neighbors &amp; collocated points | . | Voxel Grid Offset | Offset the voxelized grid by an constant amount.*By default the center of the grid is 0,0,0, which may look like an undersirable offset. That offset can be manually compensated using this parameter.* | . | Inline Insertion | **Using the Octree fuse method is not deterministic by default.**Enabling inlined insertion will make it so, at the cost of speed. | . | Source Distance | Source Distance reference.*Whether to consider point bounds, and if so, how.* | . | **Tolerance** | |   | . | Component Wise Tolerance | If enabled, lets you set individual tolerance in world space for each X, Y and Z axis. | . | Tolerance | Uniform tolerance. This represent the radius within which elements will be considered in fuse range. | . | Tolerances | If enabled, represent individual axis’ radius within which elements will be considered in fuse range. | . | Local Tolerance | If enabled, lets your use per-point tolerance value.**NOT IMPLEMENTED** | . | **Outputs** | |   | . | &lt;span class=\"eout\"&gt;Compounded Attribute Name&lt;/span&gt;bool | If enabled, writes a bool flag. true if the point is the result of a merge, false if it’s the \"original\" one. | . | &lt;span class=\"eout\"&gt;Compound Size Attribute Name&lt;/span&gt;int32 | If enabled, writes the numbers of points that have been compounded/merged into it. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/settings/settings-intersect-point-point.html",
    "relUrl": "/settings/settings-intersect-point-point.html"
  },"1570": {
    "doc": "settings-projection",
    "title": "settings-projection",
    "content": "The projection settings control how the point position is translated to a 2D space before the graph is computed; and how this projection will translate back to the original space, if relevant. | Property | Description | . | Projection Normal | Normal vector of the plane used for projection.By default, the projection plan normal is Up; so the graph is computed over the X Y plane. | . | Local Projection Normal | If enabled, uses a per-point projection vector. | . | Local Normal | Attribute ti read normal from, | . Local projection normal is very powerful but can also be very clunky to use – it’s very easy to end up with singularities that will prevent the graph from being properly computed. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/settings/settings-projection.html",
    "relUrl": "/settings/settings-projection.html"
  },"1571": {
    "doc": "settings-statistics",
    "title": "settings-statistics",
    "content": "| **Statistics** | |   | . | — | ![wip](https://img.shields.io/badge/WIP-c8860e) | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/settings/settings-statistics.html",
    "relUrl": "/settings/settings-statistics.html"
  },"1572": {
    "doc": "settings-tagging-assets",
    "title": "settings-tagging-assets",
    "content": "| Property | Description | . | Grab Tags | Pick which tags from the asset collection should be grabbed and added to the component.*See [Entries &amp; Collections Tags](/PCGExtendedToolkit/doc-assets/asset-collections/#entries–collections-tags).* | . | Forward Input Data Tags | If enabled, tags associated with the currently processed dataset will be forwarded to the components. | . | *More TBD* |   | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/settings/settings-tagging-assets.html",
    "relUrl": "/settings/settings-tagging-assets.html"
  },"1573": {
    "doc": "settings-tagging-components",
    "title": "settings-tagging-components",
    "content": "| Property | Description | . | Forward Input Data Tags | If enabled, tags associated with the currently processed dataset will be forwarded to the components. | . | *More TBD* |   | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/settings/settings-tagging-components.html",
    "relUrl": "/settings/settings-tagging-components.html"
  },"1574": {
    "doc": "settings-weighting",
    "title": "settings-weighting",
    "content": "There is two weighting method available. Full Range and Effective Range. Each method outputs a [0..1] value that will be used to sample the Weight Over Distance curve. However, there is a critical nuance between the two: . | Full Range is a simple normalization, each target distance is divided by the longest one. As such, it’s very unlikely the curve will get sampled close to x=0. | Effective Range remaps each target distance using the shortest &amp; longest distance as min/max. As such, the shortest sampled distance will sample the curve at x=0, and the longest at x=1. | . Note that the Effective Range method tends to spread/scale the input set of values – but allows one to leverage the full range of the curve no matter the min/max input values. Hence, using Full Range with only high (or low) input value will only sample a very narrow portion of the curve. Important note: when using the Within range sample method, some outputs will use the final weighted position/transforms for their calculations; although mathematically correct, this may yield unusuable/innacurate results. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/settings/settings-weighting.html",
    "relUrl": "/settings/settings-weighting.html"
  },"1575": {
    "doc": "🜛 Circle",
    "title": "🜛 Circle",
    "content": "PCGEx | Shape : Circle, Arc Circle, Arc, and more . - . Shape builderA single shape builder definition . Table of content . | Properties | . The Bitmask Filter lets you check whether certain flags are set or not in an int64 bitmask attribute. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-shapes/shape-circle.html#circle",
    "relUrl": "/doc-shapes/shape-circle.html#circle"
  },"1576": {
    "doc": "🜛 Circle",
    "title": "Properties",
    "content": ". | Property | Description | . | WIP | WIP | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-shapes/shape-circle.html#properties",
    "relUrl": "/doc-shapes/shape-circle.html#properties"
  },"1577": {
    "doc": "🜛 Circle",
    "title": "🜛 Circle",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-shapes/shape-circle.html",
    "relUrl": "/doc-shapes/shape-circle.html"
  },"1578": {
    "doc": "Create Shapes",
    "title": "Create Shapes",
    "content": "PCGEx | Create Shapes Create parametric shapes out of seed points . The Create Shapes node takes any number of Shape Builders as input and turn input seeds into those shapes. SeedsSeed points for shape builders Shape buildersIndividual shape builder ShapesShape points . Table of content . | Properties . | Available Filters | . | . WIP . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-shapes/shape-create-shapes.html#create-shapes",
    "relUrl": "/doc-shapes/shape-create-shapes.html#create-shapes"
  },"1579": {
    "doc": "Create Shapes",
    "title": "Properties",
    "content": ". | Property | Description | . | **Settings** | |   | . | Mode | How to ouput data.*See below.* | . | Result Attribute Namebool | Name of the attribute the filter result will be written to. | . | Swap | If enabled, inverts the combined result of the filters. | . | : Mode | |   | . | &lt;span class=\"ebit\"&gt;Partition&lt;/span&gt; | Split input dataset in either Inside (filter passed) or Outside (filters failed) outputs. | . | &lt;span class=\"ebit\"&gt;Write&lt;/span&gt; | Preserve input and write the result of the filter to an attribute. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-shapes/shape-create-shapes.html#properties",
    "relUrl": "/doc-shapes/shape-create-shapes.html#properties"
  },"1580": {
    "doc": "Create Shapes",
    "title": "Available Filters",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-shapes/shape-create-shapes.html#available-filters",
    "relUrl": "/doc-shapes/shape-create-shapes.html#available-filters"
  },"1581": {
    "doc": "Create Shapes",
    "title": "🝖 AND / OR (Group)",
    "content": "Group multiple filters to set up complex AND/OR branches. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-shapes/shape-create-shapes.html#and--or-group",
    "relUrl": "/doc-shapes/shape-create-shapes.html#and--or-group"
  },"1582": {
    "doc": "Create Shapes",
    "title": "🝖 Compare Nearest (Numeric)",
    "content": "The Numeric Comparison Filter compares the arithmetic value of an attribute against the closest point from another dataset. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-shapes/shape-create-shapes.html#compare-nearest-numeric",
    "relUrl": "/doc-shapes/shape-create-shapes.html#compare-nearest-numeric"
  },"1583": {
    "doc": "Create Shapes",
    "title": "🝖 Compare (Numeric)",
    "content": "The Numeric Comparison Filter compares the arithmetic value of two attributes . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-shapes/shape-create-shapes.html#compare-numeric",
    "relUrl": "/doc-shapes/shape-create-shapes.html#compare-numeric"
  },"1584": {
    "doc": "Create Shapes",
    "title": "🝖 Compare (String)",
    "content": "Compares two string-like attributes against each other. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-shapes/shape-create-shapes.html#compare-string",
    "relUrl": "/doc-shapes/shape-create-shapes.html#compare-string"
  },"1585": {
    "doc": "Create Shapes",
    "title": "🝖 Bool",
    "content": "Performs a simple boolean comparison, converting numeric values to true (&gt; 0) or false (&lt;= 0). ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-shapes/shape-create-shapes.html#bool",
    "relUrl": "/doc-shapes/shape-create-shapes.html#bool"
  },"1586": {
    "doc": "Create Shapes",
    "title": "🝖 Within Range",
    "content": "Checks if an attribute value falls within a specified range. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-shapes/shape-create-shapes.html#within-range",
    "relUrl": "/doc-shapes/shape-create-shapes.html#within-range"
  },"1587": {
    "doc": "Create Shapes",
    "title": "🝖 Dot Product",
    "content": "Compares the dot product of two direction vectors against a third value. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-shapes/shape-create-shapes.html#dot-product",
    "relUrl": "/doc-shapes/shape-create-shapes.html#dot-product"
  },"1588": {
    "doc": "Create Shapes",
    "title": "🝖 Modulo Comparison",
    "content": "Compares the modulo of two attributes against a third operand, with configurable comparisons and tolerance. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-shapes/shape-create-shapes.html#modulo-comparison",
    "relUrl": "/doc-shapes/shape-create-shapes.html#modulo-comparison"
  },"1589": {
    "doc": "Create Shapes",
    "title": "🝖 Distance",
    "content": "Compare distance to closest target against a constant or attribute. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-shapes/shape-create-shapes.html#distance",
    "relUrl": "/doc-shapes/shape-create-shapes.html#distance"
  },"1590": {
    "doc": "Create Shapes",
    "title": "🝖 Bounds",
    "content": "Checks if a point is inside or outside the provided bounds, with options for bounds types and an epsilon adjustment. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-shapes/shape-create-shapes.html#bounds",
    "relUrl": "/doc-shapes/shape-create-shapes.html#bounds"
  },"1591": {
    "doc": "Create Shapes",
    "title": "🝖 Bitmask",
    "content": "Checks specific flags in an int64 bitmask attribute with configurable mask types, comparisons, and an option to invert results. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-shapes/shape-create-shapes.html#bitmask",
    "relUrl": "/doc-shapes/shape-create-shapes.html#bitmask"
  },"1592": {
    "doc": "Create Shapes",
    "title": "🝖 Random",
    "content": "Random filter. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-shapes/shape-create-shapes.html#random",
    "relUrl": "/doc-shapes/shape-create-shapes.html#random"
  },"1593": {
    "doc": "Create Shapes",
    "title": "🝖 Mean Value",
    "content": "The Mean Value Filter compares per-point values of an attribute against the mean statistical value of that same attribute. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-shapes/shape-create-shapes.html#mean-value",
    "relUrl": "/doc-shapes/shape-create-shapes.html#mean-value"
  },"1594": {
    "doc": "Create Shapes",
    "title": "🝖 Self Compare (Numeric)",
    "content": "Compares the numeric value at one index against the same attribute at another index. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-shapes/shape-create-shapes.html#self-compare-numeric",
    "relUrl": "/doc-shapes/shape-create-shapes.html#self-compare-numeric"
  },"1595": {
    "doc": "Create Shapes",
    "title": "🝖 Self Compare (String)",
    "content": "Compares the string value at one index against the same attribute at another index. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-shapes/shape-create-shapes.html#self-compare-string",
    "relUrl": "/doc-shapes/shape-create-shapes.html#self-compare-string"
  },"1596": {
    "doc": "Create Shapes",
    "title": "🝖 Spline Inclusion",
    "content": "Checks against how a point is included in a spline. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-shapes/shape-create-shapes.html#spline-inclusion",
    "relUrl": "/doc-shapes/shape-create-shapes.html#spline-inclusion"
  },"1597": {
    "doc": "Create Shapes",
    "title": "🝖 Path Inclusion",
    "content": "Checks against how a point is included in a path. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-shapes/shape-create-shapes.html#path-inclusion",
    "relUrl": "/doc-shapes/shape-create-shapes.html#path-inclusion"
  },"1598": {
    "doc": "Create Shapes",
    "title": "Create Shapes",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-shapes/shape-create-shapes.html",
    "relUrl": "/doc-shapes/shape-create-shapes.html"
  },"1599": {
    "doc": "Moving Average",
    "title": "Moving Average",
    "content": "Index-based moving-average sampling . Table of content . | Properties | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-smooth/smoothing-moving-average.html#moving-average",
    "relUrl": "/doc-paths/paths-smooth/smoothing-moving-average.html#moving-average"
  },"1600": {
    "doc": "Moving Average",
    "title": "Properties",
    "content": ". | Property | Description | . | :**Settings**| |   | . | Window Size | The number of leading &amp; trailing points to sample.*The larger the window, the more uniform the result.* | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-smooth/smoothing-moving-average.html#properties",
    "relUrl": "/doc-paths/paths-smooth/smoothing-moving-average.html#properties"
  },"1601": {
    "doc": "Moving Average",
    "title": "Moving Average",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-smooth/smoothing-moving-average.html",
    "relUrl": "/doc-paths/paths-smooth/smoothing-moving-average.html"
  },"1602": {
    "doc": "Radius",
    "title": "Radius",
    "content": "Radius &amp; position-based sampling . Table of content . | Properties | . Note that because of how the maths works for this module, it can be used with any input data: whether the points are ordered as paths or not doesn’t matter. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-smooth/smoothing-radius.html#radius",
    "relUrl": "/doc-paths/paths-smooth/smoothing-radius.html#radius"
  },"1603": {
    "doc": "Radius",
    "title": "Properties",
    "content": ". | Property | Description | . | :**Settings**| |   | . | Blend Radius | Radius within which neighbor points will be sampled. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-smooth/smoothing-radius.html#properties",
    "relUrl": "/doc-paths/paths-smooth/smoothing-radius.html#properties"
  },"1604": {
    "doc": "Radius",
    "title": "Radius",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-smooth/smoothing-radius.html",
    "relUrl": "/doc-paths/paths-smooth/smoothing-radius.html"
  },"1605": {
    "doc": "🝘 Sorting Rule",
    "title": "🝘 Sorting Rule",
    "content": "PCGEx | Rule : Sorting An individual sorting rule . TBD . Sorting RuleA single sorting rule . Table of content . | Properties | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/sort-points/sort-rule.html#sorting-rule",
    "relUrl": "/doc-misc/sort-points/sort-rule.html#sorting-rule"
  },"1606": {
    "doc": "🝘 Sorting Rule",
    "title": "Properties",
    "content": ". DOC TDB . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/sort-points/sort-rule.html#properties",
    "relUrl": "/doc-misc/sort-points/sort-rule.html#properties"
  },"1607": {
    "doc": "🝘 Sorting Rule",
    "title": "🝘 Sorting Rule",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-misc/sort-points/sort-rule.html",
    "relUrl": "/doc-misc/sort-points/sort-rule.html"
  },"1608": {
    "doc": "∢ Auto Tangents",
    "title": "∢ Auto Tangents",
    "content": "Neighbor-based tangents . Table of content . The Auto Tangents compute tangents by using neighboring points. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-write-tangents/tangent-auto.html#auto-tangents",
    "relUrl": "/doc-paths/paths-write-tangents/tangent-auto.html#auto-tangents"
  },"1609": {
    "doc": "∢ Auto Tangents",
    "title": "∢ Auto Tangents",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-write-tangents/tangent-auto.html",
    "relUrl": "/doc-paths/paths-write-tangents/tangent-auto.html"
  },"1610": {
    "doc": "∢ Catmull-Rom",
    "title": "∢ Catmull-Rom",
    "content": "Neighbor-based tangents . Table of content . The Catmull-Rom compute tangents as the direction from the previous point to the next. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-write-tangents/tangent-catmull-rom.html#catmull-rom",
    "relUrl": "/doc-paths/paths-write-tangents/tangent-catmull-rom.html#catmull-rom"
  },"1611": {
    "doc": "∢ Catmull-Rom",
    "title": "∢ Catmull-Rom",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-write-tangents/tangent-catmull-rom.html",
    "relUrl": "/doc-paths/paths-write-tangents/tangent-catmull-rom.html"
  },"1612": {
    "doc": "∢ From Neighbors",
    "title": "∢ From Neighbors",
    "content": "Neighbor-based tangents . Table of content . The From Neighbors compute tangents against neighbors position. It often yield results that are mathematically comparable to ∢ Catmull-Rom. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-write-tangents/tangent-from-neighbors.html#from-neighbors",
    "relUrl": "/doc-paths/paths-write-tangents/tangent-from-neighbors.html#from-neighbors"
  },"1613": {
    "doc": "∢ From Neighbors",
    "title": "∢ From Neighbors",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-write-tangents/tangent-from-neighbors.html",
    "relUrl": "/doc-paths/paths-write-tangents/tangent-from-neighbors.html"
  },"1614": {
    "doc": "∢ From Transform",
    "title": "∢ From Transform",
    "content": "Transform-based tangents . Table of content . | Properties | . The From Transform writes the selected transform axis (in world space) of the point as a tangent. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-write-tangents/tangent-from-transform.html#from-transform",
    "relUrl": "/doc-paths/paths-write-tangents/tangent-from-transform.html#from-transform"
  },"1615": {
    "doc": "∢ From Transform",
    "title": "Properties",
    "content": ". | Property | Description | . | :**Settings**| |   | . | Axis | Lets you pick the transform axis | . | **Axis**| |   | . | Forward | Transform forward axis.*Positive X* | . | Backward | Transform backward axis.*Negative X* | . | Right | Transform right axis.*Positive Y* | . | Left | Transform left axis.*Negative Y* | . | Up | Transform up axis.*Positive Z* | . | Down | Transform down axis.*Negative Z* | . Note that as the time of writing, this tangent require scaling as it’s using a normalized vector. Additional scaling options will be exposed in order to make it easier to scale when used specifically for start/end points. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-write-tangents/tangent-from-transform.html#properties",
    "relUrl": "/doc-paths/paths-write-tangents/tangent-from-transform.html#properties"
  },"1616": {
    "doc": "∢ From Transform",
    "title": "∢ From Transform",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-write-tangents/tangent-from-transform.html",
    "relUrl": "/doc-paths/paths-write-tangents/tangent-from-transform.html"
  },"1617": {
    "doc": "∢ Zero Tangents",
    "title": "∢ Zero Tangents",
    "content": "No tangents . Table of content . The Zero Tangents writes a 0,0,0 FVector to the tangents. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-write-tangents/tangent-zero.html#zero-tangents",
    "relUrl": "/doc-paths/paths-write-tangents/tangent-zero.html#zero-tangents"
  },"1618": {
    "doc": "∢ Zero Tangents",
    "title": "∢ Zero Tangents",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-paths/paths-write-tangents/tangent-zero.html",
    "relUrl": "/doc-paths/paths-write-tangents/tangent-zero.html"
  },"1619": {
    "doc": "Get Texture Data",
    "title": "Get Texture Data",
    "content": "PCGEx | Get Texture Data Can output multiple textures object from material parameters and texture paths . The Get Texture Data node can create PCG Textures in batches, either from texture reference paths, or by parsing material’ texture parameters. InPoints with asset reference attribute Point FiltersFilter which points will be read Texture ParamsReusable texture parameter definition OutPoints with added data Texture DataPCG texture data . Table of content . | Properties | . The Get Texture Data provide a quick-and-dirty (yet highly customizable) way to create new PCG textures data from either material parameters or texture paths. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-sampling/sampling-textures/textures-get-data.html#get-texture-data",
    "relUrl": "/doc-sampling/sampling-textures/textures-get-data.html#get-texture-data"
  },"1620": {
    "doc": "Get Texture Data",
    "title": "Properties",
    "content": ". WIP / TBD . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-sampling/sampling-textures/textures-get-data.html#properties",
    "relUrl": "/doc-sampling/sampling-textures/textures-get-data.html#properties"
  },"1621": {
    "doc": "Get Texture Data",
    "title": "Get Texture Data",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-sampling/sampling-textures/textures-get-data.html",
    "relUrl": "/doc-sampling/sampling-textures/textures-get-data.html"
  },"1622": {
    "doc": "Texture Param",
    "title": "Texture Param",
    "content": "PCGEx | Texture Param A single texture param that hold re-usable information . The Texture Param node represent a single set of settings that pertain to a specific texture. Texture ParamA single texture param data . Table of content . | Properties | . The Texture Param data hold a few bits of information that represents intentions for working with a texture object. It is used by a few different nodes and aleviates the need to enter the same data multiple times in different places. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-sampling/sampling-textures/textures-params.html#texture-param",
    "relUrl": "/doc-sampling/sampling-textures/textures-params.html#texture-param"
  },"1623": {
    "doc": "Texture Param",
    "title": "Properties",
    "content": ". WIP / TBD . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-sampling/sampling-textures/textures-params.html#properties",
    "relUrl": "/doc-sampling/sampling-textures/textures-params.html#properties"
  },"1624": {
    "doc": "Texture Param",
    "title": "Texture Param",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-sampling/sampling-textures/textures-params.html",
    "relUrl": "/doc-sampling/sampling-textures/textures-params.html"
  },"1625": {
    "doc": "Sample Texture",
    "title": "Sample Texture",
    "content": "PCGEx | Sample : Texture Sample multiple, per-point textures . The Sample Texture can sample multiple texture sources at the same time, using per-point selection . InPoints with asset reference attribute Point FiltersFilter which points will be read Texture DataPCG texture data Texture ParamsReusable texture parameter definition OutPoints with added data . Table of content . | Properties | . The Sample Texture node offers a very efficient way to sample multiple texture sources at the same time without the need for loops. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-sampling/sampling-textures/textures-sample.html#sample-texture",
    "relUrl": "/doc-sampling/sampling-textures/textures-sample.html#sample-texture"
  },"1626": {
    "doc": "Sample Texture",
    "title": "Properties",
    "content": ". WIP / TBD . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-sampling/sampling-textures/textures-sample.html#properties",
    "relUrl": "/doc-sampling/sampling-textures/textures-sample.html#properties"
  },"1627": {
    "doc": "Sample Texture",
    "title": "Sample Texture",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-sampling/sampling-textures/textures-sample.html",
    "relUrl": "/doc-sampling/sampling-textures/textures-sample.html"
  },"1628": {
    "doc": "🝊 Edge Match",
    "title": "🝊 Edge Match",
    "content": "PCGEx | Vtx : Edge Match Find the neighbors that best match a given direction . TBD . PropertyA single property writer . Related . | Working with Clusters | Properties : Vtx | . Table of content . | Properties . | Dot Comparison Details | Outputs | . | . The Edge Match property outputs the properties of the single connected edges that best matches a given direction. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/properties-vtx/vtx-extra-best-match.html#edge-match",
    "relUrl": "/doc-clusters/properties-vtx/vtx-extra-best-match.html#edge-match"
  },"1629": {
    "doc": "🝊 Edge Match",
    "title": "Properties",
    "content": ". | Property | Description | . | :**Settings**| |   | . | Origin | Defines how the base direction is computed, either from the Node to the neighbor (*going outward*), or from the Neighbor to the node (*going inward*). | . | Direction Source | Select where to read the direction to compare to from; either Constant or Attribute. | . | Direction *(Constant or Attribute)* | Test Direction. | . | Transform Direction | If enabled, will transform the input direction (either Constant or Attribute) using the point’ transform. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/properties-vtx/vtx-extra-best-match.html#properties",
    "relUrl": "/doc-clusters/properties-vtx/vtx-extra-best-match.html#properties"
  },"1630": {
    "doc": "🝊 Edge Match",
    "title": "Dot Comparison Details",
    "content": ". | Property | Description | . | Comparison | Which comparison to use.*See [Numeric comparisons](/PCGExtendedToolkit/doc-general/general-comparisons.html#numeric-comparisons).* | . | Dot Units | Let you choose to work either with normalized dot range (-1 / 1) or degrees.*This affects how the attribute Dot value will be interpreted as well.* | . | Unsigned Dot | When enabled, the comparison will occur against an absolute dot value.*This is especially useful when testing against undirected lines.* | . | Dot Value | The type of value used for this probe’ search radius; either a Constant value or fetched from anAttribute | . | *(Dot or Degrees)* Constant | Constant to compare against. | . | *(Dot or Degrees)* Attribute | Constant to compare against. | . | *(Dot or Degrees)* Tolerance | Comparison tolerance, if the selected comparison is an approximative (~) one. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/properties-vtx/vtx-extra-best-match.html#dot-comparison-details",
    "relUrl": "/doc-clusters/properties-vtx/vtx-extra-best-match.html#dot-comparison-details"
  },"1631": {
    "doc": "🝊 Edge Match",
    "title": "Outputs",
    "content": "| Output | Description | . | &lt;span class=\"eout\"&gt;Direction Attribute&lt;/span&gt;FVector | If enabled, writes the Edge’ direction to the specified attribute. | . | *Invert Direction* | *If enabled, will invert (*-1) the direction output above.* | . | &lt;span class=\"eout\"&gt;Length Attribute&lt;/span&gt;Double | If enabled, writes the Edge’ length to the specified attribute. | . | &lt;span class=\"eout\"&gt;Edge Index Attribute&lt;/span&gt;Int32 | If enabled, writes the Edge’ point index to the specified attribute.*This is useful for targeted/cherry-picking manipulations.* | . | &lt;span class=\"eout\"&gt;Vtx Index Attribute&lt;/span&gt;Int32 | If enabled, writes the Vtx’ point index the selected Edge connects to, to the specified attribute.*This is useful for targeted/cherry-picking manipulations.* | . | &lt;span class=\"eout\"&gt;Neighbor Count Attribute&lt;/span&gt;Int32 | If enabled, writes the Vtx’ point neighbor count the selected Edge connects to, to the specified attribute.*Amongst other things, this can come in handy to drive the 🝰 Heuristic Attribute.* | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/properties-vtx/vtx-extra-best-match.html#outputs",
    "relUrl": "/doc-clusters/properties-vtx/vtx-extra-best-match.html#outputs"
  },"1632": {
    "doc": "🝊 Edge Match",
    "title": "🝊 Edge Match",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/properties-vtx/vtx-extra-best-match.html",
    "relUrl": "/doc-clusters/properties-vtx/vtx-extra-best-match.html"
  },"1633": {
    "doc": "🝊 Special Edges",
    "title": "🝊 Special Edges",
    "content": "PCGEx | Vtx : Special Edges Gather infos from special-case edges . The Special Edges property outputs data about the two most extreme edges connected to a vertex — the shortest and longest — allowing users to capture attributes like direction, length, and indices for both, with an additional option to average all connected edges. PropertyA single property writer . Related . | Working with Clusters | Properties : Vtx | . Table of content . | Properties . | Shortest Edge | Longest Edge | Average Edge | . | . The Special Edges property outputs the properties of the two “special” connected edges – special in the outlier sense : the Shortest connected edge, as well as the Longest connected edge. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/properties-vtx/vtx-extra-special-edges.html#special-edges",
    "relUrl": "/doc-clusters/properties-vtx/vtx-extra-special-edges.html#special-edges"
  },"1634": {
    "doc": "🝊 Special Edges",
    "title": "Properties",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/properties-vtx/vtx-extra-special-edges.html#properties",
    "relUrl": "/doc-clusters/properties-vtx/vtx-extra-special-edges.html#properties"
  },"1635": {
    "doc": "🝊 Special Edges",
    "title": "Shortest Edge",
    "content": "| Output | Description | . | &lt;span class=\"eout\"&gt;Direction Attribute&lt;/span&gt;FVector | If enabled, writes the Shortest Edge’ direction to the specified attribute. | . | *Invert Direction* | *If enabled, will invert (*-1) the direction output above.* | . | &lt;span class=\"eout\"&gt;Length Attribute&lt;/span&gt;Double | If enabled, writes the Shortest Edge’’ length to the specified attribute. | . | &lt;span class=\"eout\"&gt;Edge Index Attribute&lt;/span&gt;Int32 | If enabled, writes the Shortest Edge’’ point index to the specified attribute.*This is useful for targeted/cherry-picking manipulations.* | . | &lt;span class=\"eout\"&gt;Vtx Index Attribute&lt;/span&gt;Int32 | If enabled, writes the Vtx’ point index the Shortest Edge’ connects to, to the specified attribute.*This is useful for targeted/cherry-picking manipulations.* | . | &lt;span class=\"eout\"&gt;Neighbor Count Attribute&lt;/span&gt;Int32 | If enabled, writes the Vtx’ point neighbor count the Shortest Edge’ connects to, to the specified attribute.*Amongst other things, this can come in handy to drive the 🝰 Heuristic Attribute.* | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/properties-vtx/vtx-extra-special-edges.html#shortest-edge",
    "relUrl": "/doc-clusters/properties-vtx/vtx-extra-special-edges.html#shortest-edge"
  },"1636": {
    "doc": "🝊 Special Edges",
    "title": "Longest Edge",
    "content": "| Output | Description | . | &lt;span class=\"eout\"&gt;Direction Attribute&lt;/span&gt;FVector | If enabled, writes the Longest Edge’ direction to the specified attribute. | . | *Invert Direction* | *If enabled, will invert (*-1) the direction output above.* | . | &lt;span class=\"eout\"&gt;Length Attribute&lt;/span&gt;Double | If enabled, writes the Longest Edge’’ length to the specified attribute. | . | &lt;span class=\"eout\"&gt;Edge Index Attribute&lt;/span&gt;Int32 | If enabled, writes the Longest Edge’’ point index to the specified attribute.*This is useful for targeted/cherry-picking manipulations.* | . | &lt;span class=\"eout\"&gt;Vtx Index Attribute&lt;/span&gt;Int32 | If enabled, writes the Vtx’ point index the Longest Edge’ connects to, to the specified attribute.*This is useful for targeted/cherry-picking manipulations.* | . | &lt;span class=\"eout\"&gt;Neighbor Count Attribute&lt;/span&gt;Int32 | If enabled, writes the Vtx’ point neighbor count the Longest Edge’ connects to, to the specified attribute.*Amongst other things, this can come in handy to drive the 🝰 Heuristic Attribute.* | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/properties-vtx/vtx-extra-special-edges.html#longest-edge",
    "relUrl": "/doc-clusters/properties-vtx/vtx-extra-special-edges.html#longest-edge"
  },"1637": {
    "doc": "🝊 Special Edges",
    "title": "Average Edge",
    "content": "A sub-selection of all connected’ edges average. | Output | Description | . | &lt;span class=\"eout\"&gt;Direction Attribute&lt;/span&gt;FVector | If enabled, writes the averaged direction of all connected edges. | . | *Invert Direction* | *If enabled, will invert (*-1) the direction output above.* | . | &lt;span class=\"eout\"&gt;Length Attribute&lt;/span&gt;Double | If enabled, writes the averaged length of all connected edges. | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/properties-vtx/vtx-extra-special-edges.html#average-edge",
    "relUrl": "/doc-clusters/properties-vtx/vtx-extra-special-edges.html#average-edge"
  },"1638": {
    "doc": "🝊 Special Edges",
    "title": "🝊 Special Edges",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/properties-vtx/vtx-extra-special-edges.html",
    "relUrl": "/doc-clusters/properties-vtx/vtx-extra-special-edges.html"
  },"1639": {
    "doc": "🝊 Special Neighbors",
    "title": "🝊 Special Neighbors",
    "content": "PCGEx | Vtx : Special Neighbors Gather infos from special-case neighbors . The Special Neighbors property outputs information about two key neighbors of a vertex — the one with the most connections (Largest Neighbor) and the one with the fewest connections (Smallest Neighbor). You can extract various attributes, such as edge direction, length, and vertex indices, for both of these special neighbors. PropertyA single property writer . Related . | Working with Clusters | Properties : Vtx | . Table of content . | Properties . | Largest Neighbor | Smallest Neighbor | . | . The Special Neighbor property outputs the properties of the two “special” connected neighbors – special in the outlier sense : the Largest connected vtx, as well as the Smallest connected vtx – in terms of number of connectons. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/properties-vtx/vtx-extra-special-neighbors.html#special-neighbors",
    "relUrl": "/doc-clusters/properties-vtx/vtx-extra-special-neighbors.html#special-neighbors"
  },"1640": {
    "doc": "🝊 Special Neighbors",
    "title": "Properties",
    "content": ". ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/properties-vtx/vtx-extra-special-neighbors.html#properties",
    "relUrl": "/doc-clusters/properties-vtx/vtx-extra-special-neighbors.html#properties"
  },"1641": {
    "doc": "🝊 Special Neighbors",
    "title": "Largest Neighbor",
    "content": "The Largest Neighbor is the connected Vtx with the largest number of connections. | Output | Description | . | &lt;span class=\"eout\"&gt;Direction Attribute&lt;/span&gt;FVector | If enabled, writes the Edge’ direction to the specified attribute. | . | *Invert Direction* | *If enabled, will invert (*-1) the direction output above.* | . | &lt;span class=\"eout\"&gt;Length Attribute&lt;/span&gt;Double | If enabled, writes the Edge’’ length to the specified attribute. | . | &lt;span class=\"eout\"&gt;Edge Index Attribute&lt;/span&gt;Int32 | If enabled, writes the Edge’’ point index to the specified attribute.*This is useful for targeted/cherry-picking manipulations.* | . | &lt;span class=\"eout\"&gt;Vtx Index Attribute&lt;/span&gt;Int32 | If enabled, writes the Vtx’ point index the Edge’ connects to, to the specified attribute.*This is useful for targeted/cherry-picking manipulations.* | . | &lt;span class=\"eout\"&gt;Neighbor Count Attribute&lt;/span&gt;Int32 | If enabled, writes the Vtx’ point neighbor count the Edge’ connects to, to the specified attribute.*Amongst other things, this can come in handy to drive the 🝰 Heuristic Attribute.* | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/properties-vtx/vtx-extra-special-neighbors.html#largest-neighbor",
    "relUrl": "/doc-clusters/properties-vtx/vtx-extra-special-neighbors.html#largest-neighbor"
  },"1642": {
    "doc": "🝊 Special Neighbors",
    "title": "Smallest Neighbor",
    "content": "The Smallest Neighbor is the connected Vtx with the smallest number of connections. | Output | Description | . | &lt;span class=\"eout\"&gt;Direction Attribute&lt;/span&gt;FVector | If enabled, writes the Edge’ direction to the specified attribute. | . | *Invert Direction* | *If enabled, will invert (*-1) the direction output above.* | . | &lt;span class=\"eout\"&gt;Length Attribute&lt;/span&gt;Double | If enabled, writes the Edge’’ length to the specified attribute. | . | &lt;span class=\"eout\"&gt;Edge Index Attribute&lt;/span&gt;Int32 | If enabled, writes the Edge’’ point index to the specified attribute.*This is useful for targeted/cherry-picking manipulations.* | . | &lt;span class=\"eout\"&gt;Vtx Index Attribute&lt;/span&gt;Int32 | If enabled, writes the Vtx’ point index the Edge’ connects to, to the specified attribute.*This is useful for targeted/cherry-picking manipulations.* | . | &lt;span class=\"eout\"&gt;Neighbor Count Attribute&lt;/span&gt;Int32 | If enabled, writes the Vtx’ point neighbor count the Edge’ connects to, to the specified attribute.*Amongst other things, this can come in handy to drive the 🝰 Heuristic Attribute.* | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/properties-vtx/vtx-extra-special-neighbors.html#smallest-neighbor",
    "relUrl": "/doc-clusters/properties-vtx/vtx-extra-special-neighbors.html#smallest-neighbor"
  },"1643": {
    "doc": "🝊 Special Neighbors",
    "title": "🝊 Special Neighbors",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-clusters/properties-vtx/vtx-extra-special-neighbors.html",
    "relUrl": "/doc-clusters/properties-vtx/vtx-extra-special-neighbors.html"
  },"1644": {
    "doc": "Working with Clusters",
    "title": "Working with Clusters",
    "content": "Vtx? Edges? . A summary of what “graph” means and entails in the context of PCGEx. One of the main focus of PCGEx is working with Clusters : vtx &amp; edge-based “graph” structures. They’re akin to a mesh without faces: a bunch of vertices connected by a bunch of edges. PCGEx leverage PCG’ point data as data holders in order to enable easy tweaking and manipulation of edge/vertice data using existing vanilla nodes. In short, a graph is represented by at least two separate set of points: the first, Vtx represent individual vertices; others, Edges, represent interconnected clusters. Edges points stores the indices of their start and end point in the matching Vtx group. Because of that approach, nodes that work with graph require Vtx and Edges as separate inputs. Data Tags are used to mark which edges match which vertices, so you will see additional tags appear on your data, formatted as PCGEx/XXX. Rule of thumb : If you manually alter (as in add or remove points) the content of a Vtx or Edges created by a PCGEx Node, make sure to use the Sanitize Clusters node before using them as inputs for other PCGEx nodes. Checklist . | Packed data | Clusters | Cluster Output Settings | Important Notes | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-general/working-with-clusters.html#working-with-clusters",
    "relUrl": "/doc-general/working-with-clusters.html#working-with-clusters"
  },"1645": {
    "doc": "Working with Clusters",
    "title": "Packed data",
    "content": "The PCGEx/VtxEndpoint attribute first 32 bits are that Vtx unique ID from the cluster perspective, while the last 32 bits contains the number of Edges this Vtx is connected to. It makes up the identity of the Vtx. Alternatively, Edges have a PCGEx/EdgeEndpoints attribute whose first 32 bits matches their start’ Vtx unique ID, and the last 32 bits are the edge’ end Vtx unique ID. Put together, this data is used to rebuild clusters in memory. If you manually alter (read : using native nodes) the number of points in either Vtx or Edges dataset, make sure to use Sanitize Clusters to restore the coherence of these attributes. Rule of thumb : The only information that matter on Edges for clusters is their start and end attribute. Their position in space is ignored so feel free to use those points if they can be relevant to you. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-general/working-with-clusters.html#packed-data",
    "relUrl": "/doc-general/working-with-clusters.html#packed-data"
  },"1646": {
    "doc": "Working with Clusters",
    "title": "Clusters",
    "content": "In PCGEx terms, a cluster is “a set of Vtx and Edges that are interconnected in a finite way” – in other words, there is a guaranteed way inside a cluster that a path can be found between any Vtx to any other Vtx when passing through Edges. A graph usually has a single set of vertices, but will output as many edge datasets as there are clusters. These will be then rebuilt inside the nodes to be processed. If you find yourself with unexpected disconnections that ruin your pathfinding, check out Connect Clusters or Fuse Clusters. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-general/working-with-clusters.html#clusters",
    "relUrl": "/doc-general/working-with-clusters.html#clusters"
  },"1647": {
    "doc": "Working with Clusters",
    "title": "Cluster Output Settings",
    "content": "This group of settings is present on all PCGEx nodes that output cluster data. They’re used to prune undesired ouputs and include a few very specific optimization options. | Property | Description | . | Edge Position | If enabled, edge point’ position will be the result of that value used as a lerp between its start and end Vtx point. | . | : **Pruning** :| |   | . | Min Vtx Count | If enabled, only ouputs clusters that have more ( &gt; ) Vtx than the specified number. | . | Max Vtx Count | If enabled, only ouputs clusters that have less ( &lt; ) Vtx than the specified number. | . | Min Edge Count | If enabled, only ouputs clusters that have more ( &gt; ) Edge than the specified number. | . | Max Edge Count | If enabled, only ouputs clusters that have less ( &lt; ) Edge than the specified number. | . | : **Misc** :| |   | . | Refresh Edge Seed | If enabled, Edge points gets a fresh seed. | . | Build and Cache Cluster | If enabled, pre-build and cache cluster along with the point data.**This has a slight memory cost associated to it, but can offer tremendous performance improvement.***If disabled, cluster processors that comes down the line have to rebuild clusters from point data, which is very costly as they are also tested for errors and possible disconnections in the process.* | . | Expand Clusters | If enabled, also build &amp; cache another layer of cache data.**This can have a significant memory cost, as well as a minimal performance overhead, but can greatly improve certain specific operations down the line.** | . ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-general/working-with-clusters.html#cluster-output-settings",
    "relUrl": "/doc-general/working-with-clusters.html#cluster-output-settings"
  },"1648": {
    "doc": "Working with Clusters",
    "title": "Important Notes",
    "content": "Altering PCGEx/VtxEndpoints, PCGEx/ClusterId voids the guarantee that PCGEx nodes will work as expected. The UID used for the tagging is NOT deterministic, and will change at each execution of the graph, and for each node. It is used under the hood only, and should not be edited, nor relied upon for any kind of tag-related operations. For the same reason, if you create custom tags starting with PCGEx/, it will break existing vtx/edge associations. Because of the reliance on the tagging system, if you edit Vtx and Edges before using them with a PCGEx node, make sure tags are preserved. I’m working on more robust ways to associate the data other than tags, but sadly tagging is the most bulletproof and reliable method I found. Underlying data types are always at the risk of not being preserved if they’re not properly duplicated, which can happen in earlier/experimental version of PCG that this plugin is supporting. ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-general/working-with-clusters.html#important-notes",
    "relUrl": "/doc-general/working-with-clusters.html#important-notes"
  },"1649": {
    "doc": "Working with Clusters",
    "title": "Working with Clusters",
    "content": " ",
    "url": "https://nebukam.github.io/PCGExtendedToolkit/doc-general/working-with-clusters.html",
    "relUrl": "/doc-general/working-with-clusters.html"
  }
}
